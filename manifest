[
    {
        "name": "HD Wallet",
        "versions": {
            "1.0": {
                "path": "hd-wallet/plugin.lua",
                "description": "## Short Description\nThis plugin implements hierarchical deterministic wallets (or \"HD Wallets\") BIP0032 protocol.\n\n### ## Introduction\nThe plugin allows to derive child key (xprv, xpub) from a master key in a deterministic way, and/or sign transaction hashes for UTXO and ethereum type crypto coin.\n\n## Use cases\n\nThe plugin can be used to\n\n- Derive child key for UTXO\n- Derive child key for ethereum\n- Sign transaction for UTXO\n- Sign transaction for ethereum\n\n## Setup\n\n- Generate HD-Wallets master key manually\n**Example Master Key:** `xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U`\n- Importe master key in SDKMS as secret raw key\n\n## Input/Output JSON object format\n\n**Input**\n\n```\n{\n\"master_key_id\": \"<Master-Key-UUID>\",\n\"path\": \"<Child-Key-Path>\"  ,\n\"msg_hash\": \"<32-Byte-Message-Hash>\",\n\"coin\": \"<Coin-Type>\"\n}\n```\n\n**Output**\n\n```\n\"xprv\": \"<HD-Wallet-Private-Key>\",\n\"xpub\": \"<HD-Wallet-Public-Key>\",\n\"coin_signature\": \"<Bitcoin-canonicalized-ECDSA-signature>\",\n\"signature\": \"<ECDSA signature>\"\n```\n\n* `master_key_id`: UUID of master key imported in SDKMS\n* `path`: Path of key to be derived to sign e.g: m/0, m/1, m/2/10 etc\n* `msg_hash`: 32 byte SHA-3 message hash\n* `coin`: coin type utxo or eth\n* `xprv`: BIP0032 private key\n* `xpub`: BIP0032 public key\n* `coin_signature`: Bitcoin canonicalized ECDSA signature\n* `signature`: ECDSA signature\n\n## Example Input/Output JSON object\n\n**Input JSON object**\n\n```\n{\n\"master_key_id\": \"0eae8ff0-553e-4f47-bb64-7c87f34bf5e5\",\n\"coin\": \"utxo\",\n\"path\": \"m/2\",\n\"msg_hash\": \"45a0ee821b05400f513891bbb567a99139f3df72e9e1d4b48186841cc5996d2f\"\n}\n```\n\n**Output JSON object**\n\n```\n{\n\"xprv\": \"xprv9uZghWCSYwDho7us3q1WLBjVYx2xzVJNT8qNo4P9i8wa3tQJYbffzztTF6wXjuorG49NXahqraWsrVUmy3uTJLkvSYXyDLnHHU1GJibUk2t\",\n\"xpub\": \"xpub68Z371jLPJn11bzL9rYWhKgE6ysTPx2DpMkybSnmGUUYvgjT68yvYoCw6PP8Vo7YoZRC6iqrfpixEUG694KgHPYYnydGuEYDwjESStYxYxe\",\n\"signature\": \"3045022100af9bf94c4959328b56861ca5f175b5e59014cb5bd2a5fcee2e95b1563dbc652e0220411ff01751af64d6b7209908fc58f527b07a0a9258eee7be7aa5704136954b02\",\n\"coin_signature\": \"af9bf94c4959328b56861ca5f175b5e59014cb5bd2a5fcee2e95b1563dbc652e411ff01751af64d6b7209908fc58f527b07a0a9258eee7be7aa5704136954b02\"\n}\n```\n\n## References\n\n- https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n\n### Release Notes\n- Initial release",
                "commit": "92fc1b69de84fe725307393d5b83c28c27f8cfa3"
            },
            "1.1": {
                "path": "hd-wallet/plugin.lua",
                "description": "##\nThis plugin implements hierarchical deterministic wallets (or \"HD Wallets\") BIP0032 protocol.\n\n### ## Introduction\nThe plugin allows to derive child key (xprv, xpub) from a master key in a deterministic way, and/or sign transaction hashes for UTXO and ethereum type crypto coins.\n\n## Use cases\n\nThe plugin can be used to\n\n- Derive child key for UTXO\n- Derive child key for ethereum\n- Sign transaction for UTXO\n- Sign transaction for ethereum\n- Import wrapped private key for storage in Smartkey\n\n## Setup\n\n- Generate HD-Wallets master key manually\n**Example Master Key:** `xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U`\n- Import master key in SDKMS as wrapped secret key using plugin import method\n\n## Input/Output JSON object format for signing\n\n### Input\nFor UTXO coin (BTC, LTC, BCH, etc.):\n{\n\"masterKeyId\": \"5aef3e3f-7927-49b2-b252-bf84b6980f95\",\n\"coin\": \"utxo\",\n\"path\": \"m/2\",\n\"msgHash\": \"45a0ee821b05400f513891bbb567a99139f3df72e9e1d4b48186841cc5996d2f\"\n}\n\nFor ETH:\n{\n\"masterKeyId\": \"5aef3e3f-7927-49b2-b252-bf84b6980f95\",\n\"coin\": \"eth\",\n\"msgHash\": \"45a0ee821b05400f513891bbb567a99139f3df72e9e1d4b48186841cc5996d2f\"\n}\n\n### Output\n{\n\"xpub\": \"<HD-Wallet-Public-Key>\",\n\"coin_signature\": \"<Bitcoin-canonicalized-ECDSA-signature>\",\n\"signature\": \"<ECDSA signature>\"\n}\n\n## Input/Output JSON object format for import\n\nFor XPRV Import:\n{\n\"import\": true,\n\"xprvEncId\": \"5aef3e3f-7927-49b2-b252-bf84b6980f95\",\n\"wrapKeyId\": \"02e5c697-87cd-45b6-8163-957fa5e13370\",\n\"name\": \"Imported Key\"\n}\n\n## Variable Explanations:\n* `master_key_id`: UUID of master key imported in SDKMS\n* `path`: Path of key to be derived to sign e.g: m/0, m/1, m/2/10 etc\n* `msg_hash`: 32 byte SHA-3 message hash\n* `coin`: coin type utxo or eth\n* `xprv`: BIP0032 private key\n* `xpub`: BIP0032 public key\n* `coin_signature`: Bitcoin canonicalized ECDSA signature\n* `signature`: ECDSA signature\n\n## References\n\n- https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n- https://en.bitcoin.it/wiki/Bech32\n\n### Release Notes\n- Initial release\n- Added input function and support for bech32",
                "commit": "62edc006cc11fb95b5e0ec7ace753f5eb6a9dd3a"
            },
            "1.3": {
                "path": "hd-wallet/plugin.lua",
                "description": "## Short Description\nImplementation of hierarchical deterministic wallets (or \"HD Wallets\")\n\n## Introduction\nThe plugin derives a child key in a given path from a master key, and signs\na transaction hash. The child key is transient; it only exists during the\nplugin execution. This version of the plugin requires the master key to be\nexportable. In upcoming version 2.0, this condition is removed for better\nsecurity.\n\n## Use cases\n\nThe plugin can be used to sign a transaction for UTXO and Ethereum.\n\n## Setup\n\nImport the BIP32 master key as a BIP32 object - text import.\n**Example Master Key:**\n`xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U`\n\n## Input/Output JSON object format for signing\n\n### Input\nFor UTXO coin (BTC, LTC, BCH, etc.):\n{\n\"master_key_id\": \"5aef3e3f-7927-49b2-b252-bf84b6980f95\",\n\"coin\": \"utxo\",\n\"path\": \"m/2\",\n\"msg_hash\": \"45a0ee821b05400f513891bbb567a99139f3df72e9e1d4b48186841cc5996d2f\"\n}\n\nFor ETH:\n{\n\"master_key_id\": \"5aef3e3f-7927-49b2-b252-bf84b6980f95\",\n\"coin\": \"eth\",\n\"msg_hash\": \"45a0ee821b05400f513891bbb567a99139f3df72e9e1d4b48186841cc5996d2f\"\n}\n\n### Output\n{\n\"coin\": \"eth\",\n\"xpub\": \"<HD-Wallet-Public-Key>\",\n\"coin_signature\": \"<Bitcoin-canonicalized-ECDSA-signature>\",\n\"signature\": \"<ECDSA signature>\"\n}\n\n* `master_key_id`:  UUID of master key imported in DSM\n* `path`:           Path of key to be derived for signature, e.g: m/2/10H\n* `msg_hash`:       32-byte SHA-3 message hash\n* `coin`:           coin type utxo or eth\n* `xpub`:           BIP0032 public key\n* `signature`:      ECDSA signature\n* `coin_signature`: Bitcoin canonicalized ECDSA signature\n\n## References\n\n- https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n- https://en.bitcoin.it/wiki/Bech32\n\n### Release Notes\n- Initial release\n- 1.2 - See github.com/fortanix/sdkms-plugin-library/pull/6\n- 1.3 - Code refactor for legibility w.r.t. the BIP0032 specification.\nSeveral fixes over 1.2:\n- Fix compilation errors, code lint\n- Removed unused functions and wrong documentation\n- Use bytes everywhere\n- Specify that we support private -> private key derivation.",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "SSH CA",
        "versions": {
            "1.0": {
                "path": "ssh-ca/plugin.lua",
                "description": "## Short Description\nIssue certificates for SSH authentication\n\n### ## Introduction\nSSH certificates are a method for authenticating users and/or servers in the SSH protocol.\nInstead of bare public keys (the usual method of SSH authentication) an authority\nissues a certificate which can then be used to authenticate to an SSH server.\nSSH certificates were originally added to OpenSSH in version 5.6 (released in 2010).\n\n## Use Cases\n\nAuthenticate clients to servers or servers to clients using an trusted third party\nhosted on SDKMS.\n\n## Setup\n\n### Creating CA key with SDKMS\n\nThe initial step is to create a key for the SSH CA. Generate an RSA\nkey with suitable parameters on SDKMS, and then download the public key.\n\nConverting the public to the OpenSSH format requires a two-step process.\nFirst, use OpenSSL to convert the RSA key to \"RSAPublicKey\" format:\n\n`$ openssl rsa -pubin -RSAPublicKey_out -in sdkms_rsa.pub > sdkms_rsa_conv.pem`\n\nThen use `ssh-keygen` to convert this to the SSH format\n\n`$ ssh-keygen -m PEM -i -f sdkms_rsa_conv.pem > ssh_ca.pub`\n\n### Creating CA key with OpenSSH\n\nAlternatively, the key can be created on a trusted machine using OpenSSH\ntools, then transferred to SDKMS:\n\n`$ ssh-keygen -f ssh_ca`\n\nThis will create two files, `ssh_ca.pub` (public key in SSH format)\nand `ssh_ca` (private key in PKCS #8 format).\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAI...\n-----END RSA PRIVATE KEY-----\n```\n\nTo import the SSH private key in SDKMS, copy the base64 encoded block\n(but *not* the PEM headers starting with \"-----\") and paste it into\nthe Security Object import field. Make sure Sign and Verify operations\nare enabled. Disable Export unless required.\n\n### Server Configuration\n\nSet up sshd configuration for accepting SSH certificates. In your `sshd_config` add\n\n`TrustedUserCAKeys /path/to/ssh_ca.pub`\n\nand restart `sshd`\n\n### Issue Client Cert\n\nGenerate an RSA key pair that the user will use:\n\n`ssh-keygen -f ~/.ssh/user_key`\n\nThis will again generate two keys, `user_key` (PKCS#8 private key) and\n`user_key.pub` (the SSH format public key). The `user_key.pub` should look like\n\n`ssh-rsa AAAAB3<more base64 data> username@hostname`\n\n## Input/Output JSON\n\n```\n{\n\"cert_lifetime\":<integer>,\n\"valid_principals\":\"<username>\",\n\"cert_type\":\"user\",\n\"ca_key\":\"<sobject name>\",\n\"extensions\":{<map of strings to strings>},\n\"critical_extensions\":{<map of strings to strings>},\n\"pubkey\":\"<string>\"\n}\n```\n\n\"`cert_lifetime`\" specifies the lifetime of the certificate in seconds.\n\n\"`valid_principals`\" specifies what username this certificate can be used for.\n\n\"`cert_type`\" can be \"user\" or \"server\".\n\n\"`ca_key`\" gives the name of the private key that was used when the RSA key was\nimported into SDKMS earlier.\n\n\"`extensions`\" specifies operations the certificate can be used for. Values\nOpenSSH supports include \"`permit-X11-forwarding`\", \"`permit-agent-forwarding`\"\n\"`permit-port-forwarding`\", \"`permit-pty`\", and \"`permit-user-rc`\". In theory,\nextensions can take values, but all currently defined extensions use an empty\nstring. Unknown values will be ignored by the server.\n\n\"`critical_extensions`\" specifies operations which if the server does not\nunderstand the value, then the login attempt will be rejected. The values OpenSSH\nsupports are \"`force-command`\" and \"`source-address`\". \"`force-command`\" specifies a\nsingle command which the certificate can be used for. \"`source-address`\" gives a\nlist of host/mask pairs, login is only allowed from an IP matching one of the\nlisted values.\n\n\"`pubkey`\" gives the contents of the `user_key.pub` file with the leading \"`ssh-rsa `\" and\ntrailing \"` username@hostname`\" removed.\n\n## Example Usage\n\n```\n{\n\"cert_lifetime\":86400,\n\"valid_principals\":\"desired_username\",\n\"cert_type\":\"user\",\n\"ca_key\":\"SSH CA Key\",\n\"extensions\":{\"permit-pty\":\"\"},\n\"critical_extensions\":{\"source-address\":\"10.2.0.0/16,127.0.0.1\"},\n\"pubkey\":\"AAAAB3<more base64 data>\"}\n}\n```\n\nWhen the plugin is invoked it will return a string that looks like\n\n`\"ssh-rsa-cert-v01@openssh.com AAAAHHNza....\"`\n\nCopy the entire contents to `~/.ssh/user_key-cert.pub`\n\nNow test the output using `ssh-keygen`:\n\n```\n$ ssh-keygen -L  -f user_key-cert.pub\nuser_key-cert.pub:\nType: ssh-rsa-cert-v01@openssh.com user certificate\n...\n```\n\nNow run\n\n`$ ssh -i ~/.ssh/user_key server_host whoami`\n\nThe login should succeed with the command executed on the remote host.\n\nIf you use `-v` option when using a certificate you should see something like\n\n```\ndebug1: Offering public key: RSA-CERT SHA256:Hcb9trzeAptUdTgqWj9VEncbkAGOpAglGnUrYGq4/Vo user_key\ndebug1: Server accepts key: pkalg ssh-rsa-cert-v01@openssh.com blen 1029\n```\n\n## References\n\nhttps://cvsweb.openbsd.org/src/usr.bin/ssh/PROTOCOL.certkeys?annotate=HEAD\n\n### Release Notes\n\nInitial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "DUKPT",
        "versions": {
            "1.0": {
                "path": "dukpt/plugin.lua",
                "description": "## Short Description\nPlugin for importing DUKPT BDKs and for encrypting and decrypting data using the DUKPT procedure.\n### ## Introduction\nDUKPT plugin is an SDKMS implementation of the Derived Unique Key Per Transaction process that's described in Annex A of ANS X9.24-2009. This module provides DUKPT decryption using the 3DES scheme. It decrypts the encrypted card information using the KSN and BDK-ID as inputs to the plugin and generates decrypted/plain card information.\n\nInitially there is a Base Derivation Key (BDK) that is used to generate the \"Initial PIN Encryption Key\" (IPEK). The BDK always stays in the HSM and is never injected into the devices. It is known only by the manufacturer and the merchant. The \"Key Serial Number\" (KSN) and IPEK are injected into each device. The KSN is sent with the \"crypt\" material so that the receiving end can also decrypt it. The last 21 bits of the KSN are a counter that gets incremented every transaction.\n\nThere is a single DUKPT plugin, with three supported operations: `import`, `encrypt`, and `decrypt`.\n\n## Use Cases\nAs described above in the Introduction, the value of DUKPT is the ability to secure many independent messages in such a way that compromising the keys for any individual message doesn't endanger other messages while still minimizing the number of keys that need to be stored and managed. The canonical example of\nthis, and the use case for which this procedure was developed, is to encrypt payment information during transactions.\n\n## Setup\n### Using SDKMS Plugins\n* Plugins are an independent and secure subsystem where business logic can be\nexecuted inside SDKMS.\n* Plugins are invoked using a REST API similar to the cryptographic and key\nmanagement APIs.\n* Plugins are identified by UUID, like apps and security objects.\n* To invoke a plugin, make a POST request to `https://<API endpoint>/sys/v1/plugins/<uuid>`.\nThe POST request body must be either valid\nJSON or empty. The exact structure is defined by the plugin.\n* The request may return:\n- 200 OK with a JSON response body,\n- 204 No Content with empty response body, or\n- a 4xx/5xx error with a plain text error message response body.\n\n### Invoking SDKMS plugins from SDKMS Python CLI\nCheck the SDKMS CLI README for information on setting up the CLI.\n\nLogin to sdkms inorder to invoke plugin:\n\n`$ sdkms-cli user-login`\n\nTo invoke a plugin:\n\n`$ sdkms-cli invoke-plugin --name dukpt --in <decrypt-in.json>`\n\n* Plugins can either be invoked using `--name` or `--id`, taking the plugin's name or UUID respectively.\n* `in` : Path to input json file.\n\n## DUKPT Input/Output JSON Formats\nThe following sections specify the fields in the inputs and outputs of the plugin's operations, which are JSON maps.\n\n### DUKPT Import Operation\n#### Input\n* `operation` : Must be the string `import` for importing BDKs.\n* `name` : A string to be used as the name of the key in SDKMS. Must be unique.\n* `material` : A string containing the 16 hex encoded bytes of the key material.\n\n#### Output\n* `key_id` : The UUID of the imported key in SDKMS. Referred to in the other\noperations as `bdk_id`.\n\n### DUKPT Encrypt and Decrypt\n#### Input\n* `operation` : Either `encrypt` or `decrypt`, for encryption and decryption\nrespectively.\n* `bdk_id` : The UUID of the imported BDK key to use.\n* `ksn` : Key serial number, hex encoded.\n* `key_mode` : The method used for deriving the session key from the IPEK.\nPossible values are:\n- `datakey`\n- `pinkey`\n- `mackey`\n* `card_data` : The data to be encrypted or decrypted, encoded in a string in accordance with the encoding specified below.\n* `encoding` : For the `encrypt` operation this is the encoding of the data to be encrypted. For `decrypt`, this is the encoding that the data should be returned in.\nPossible values are:\n- `base64`\n- `hex`\n\n#### Output\n* `card_data` : The result of the encryption or decryption.\n\n## Example Usages\n### DUKPT Import\nImports a BDK into SDKMS for use with the other operations.\n\n#### Example Input\n```json\n{ \"operation\": \"import\",\n\"name\": \"my_bdk\",\n\"material\": \"0123456789ABCDEFFEDCBA9876543210\" }\n```\n\n#### Example Output\n```json\n{ \"key_id\": \"d17e7c0c-3246-41c4-9824-c98d2c6515fb\" }\n```\n\n### DUKPT Encrypt and Decrypt\nEncrypts or decrypts data with a key derived from the given BDK and KSN.\n\n#### Example Input\nBelow is a sample input json to the SDKMS DUKPT plugin's decrypt operation. The\nstructure is the same for encryption, though the semantics change slightly as\ndescribed above.\n```json\n{ \"operation\": \"decrypt\",\n\"bdk_id\": \"fd1fbe76-6d64-4d30-b351-e79449e1eb77\",\n\"ksn\": \"FFFF9876543210E00008\",\n\"key_mode\": \"datakey\",\n\"card_data\": \"y07Fue/gKW7x9yDM06LZBg==\",\n\"encoding\": \"base64\" }\n```\n\n#### Example Output\n```json\n{ \"card_data\": \"Zm9ydGFuaXg=\" }\n```\n\n## References\n\n* [https://github.com/dpjayasekara/node-dukpt](https://github.com/dpjayasekara/node-dukpt \"NodeJS DUKPT implementation\")\n* [https://github.com/sgbj/Dukpt.NET](https://github.com/sgbj/Dukpt.NET \"C# DUKPT implementation\")\n* [https://support.fortanix.com/sdkms/developers-guide-plugin.html](https://support.fortanix.com/sdkms/developers-guide-plugin.html \"SDKMS developers guide plugin\")\n* [https://support.fortanix.com/api/#/Plugins](https://support.fortanix.com/api/#/Plugins \"SDKMS plugins API\")\n\n### Release Notes\n- Initial Release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "X.509 CA",
        "versions": {
            "1.0": {
                "path": "x509-ca/plugin.lua",
                "description": "## Short Description\nIssue X.509 certificates for keys stored in SDKMS.\n\n### ## Introduction\nThe X.509 CA plugin allows SDKMS users to issue certificates for keys stored in SDKMS.\nThe plugin requires the CA key and certificate to be stored in SDKMS as well.\n\nOnce invoked, the plugin generates an X.509 certificate and returns the new certificate in PEM format encoded as a JSON string. To invoke the plugin, the user must specify the following as input to the plugin:\n\n- Subject's Distinguished Name (DN),\n- The name of the issuer certificate stored in SDKMS,\n- The name of the issuer key stored in SDKMS,\n- The name of the subject key stored in SDKMS,\n- The lifetime of the generated certificate in seconds.\n\nThe public key of the subject key will be included in the generated certificate.\nThe generated certificate will have a randomly generated serial number.\n\nNote that this plugin does not add limiting extensions, such as the key usage extension, to the generated certificate. It also does not ensure that the generated certificate is acceptable for any particular use case. For example, it allows the user to generate a certificate for `CN=domain1.com` while the issuer certificate is for `CN=domain2.net` which may not be acceptable. For more information about X.509 certificates see [RFC 5280](#rfc5280).\n\nAlso note that this plugin does not store the generated certificate in SDKMS and does not track generated certificates in any way, therefore, it does not prevent issuance of multiple certificates for the same subject.\n\n## Setup\nIn order to use this plugin, you need to generate or import your CA key and certificate in SDKMS. Additionally, you need to generate/import the subject key for each certificate you like to generate using this plugin.\nNote that the plugin needs to have access to these security objects in SDKMS. To ensure the plugin has access to these security objects, make sure that the plugin shares a group with each security object that it needs to access.\n\nHere is an example arrangement of objects in SDKMS:\n\n- Two groups: `X.509 CA` and `TLS Keys`,\n- The CA certificate (`x509 CA cert`) and CA key (`x509 CA key`) residing in group `X.509 CA`,\n- The subject key for an app that requires a certificate (`my app key`) residing in `TLS Keys`,\n- The X.509 CA plugin residing in both groups.\n\nThe example usage section shows how to invoke the plugin using the above setup to generate a certificate.\n\n## Input/Output\n\nThis plugin accepts a JSON object with the following fields as input:\n\n* `subject_dn`: a map of OIDs to values\n* `issuer_cert`: the name of the issuer cert security object\n* `issuer_key`: the name of the issuer key security object\n* `subject_key`: the name of the subject key security object\n* `cert_lifetime`: the lifetime of the certificate in seconds\n\nIt returns the newly generated certificate in PEM format encoded as a JSON string.\n\n\n## Example Usage\n\nAssuming the necessary objects are created as described in the example in the setup section, we can generate a certificate for `my app key` by invoking the plugin with the following input:\n\n```json\n{\n\"subject_dn\": {\n\"CN\": \"localhost\",\n\"OU\": \"Testing\"\n},\n\"subject_key\": \"my app key\",\n\"issuer_key\": \"x509 CA key\",\n\"issuer_cert\": \"x509 CA cert\",\n\"cert_lifetime\": 86400\n}\n```\n\nThe value for `cert_lifetime` in the example above is 24 hours expressed in seconds.\n\n\n## References\n- <a name=\"rfc5280\"></a>[RFC 5280](https://tools.ietf.org/html/rfc5280)\n\n\n### Release Notes\n- Initial release",
                "commit": "3f5b6bf2e54a02241ad55dae18f3cb2d41fe8562"
            },
            "1.1": {
                "path": "x509-ca/plugin.lua",
                "description": "# X.509 CA\n\n## Introduction\nThe X.509 CA plugin allows SDKMS users to issue certificates for keys stored in SDKMS.\nThe plugin requires the CA key and certificate to be stored in SDKMS as well.\n\nOnce invoked, the plugin generates an X.509 certificate and returns the new certificate in PEM\nformat encoded as a JSON string. To invoke the plugin, the user must specify the following as input\nto the plugin:\n\n- Subject's Distinguished Name (DN),\n- The name of the issuer certificate stored in SDKMS,\n- The name of the issuer key stored in SDKMS,\n- The name of the subject key stored in SDKMS,\n- The lifetime of the generated certificate in seconds.\n\nThe public key of the subject key will be included in the generated certificate.\nThe generated certificate will have a randomly generated serial number.\n\nNote that this plugin does not add limiting extensions, such as the key usage extension, to the\ngenerated certificate. It also does not ensure that the generated certificate is acceptable for any\nparticular use case. For example, it allows the user to generate a certificate for `CN=domain1.com`\nwhile the issuer certificate is for `CN=domain2.net` which may not be acceptable. For more\ninformation about X.509 certificates see [RFC 5280](#rfc5280).\n\nAlso note that this plugin does not store the generated certificate in SDKMS and does not track\ngenerated certificates in any way, therefore, it does not prevent issuance of multiple certificates\nfor the same subject.\n\n\n## Setup\nIn order to use this plugin, you need to generate or import your CA key and certificate in SDKMS.\nAdditionally, you need to generate/import the subject key for each certificate you like to generate\nusing this plugin.\n\nNote that the plugin needs to have access to these security objects in SDKMS. To ensure the plugin\nhas access to these security objects, make sure that the plugin shares a group with each security\nobject that it needs to access.\n\nHere is an example arrangement of objects in SDKMS:\n\n- Two groups: `X.509 CA` and `TLS Keys`,\n- The CA certificate (`x509 CA cert`) and CA key (`x509 CA key`) residing in group `X.509 CA`,\n- The subject key for an app that requires a certificate (`my app key`) residing in `TLS Keys`,\n- The X.509 CA plugin residing in both groups.\n\nThe example usage section shows how to invoke the plugin using the above setup to generate a\ncertificate.\n\n\n## Input/Output\n\nThis plugin accepts a JSON object with the following fields as input:\n\n* `subject_dn`: a map of OIDs to values\n* `issuer_cert`: the name of the issuer cert security object\n* `issuer_key`: the name of the issuer key security object\n* `subject_key`: the name of the subject key security object\n* `cert_lifetime`: the lifetime of the certificate in seconds\n\nIt returns the newly generated certificate in PEM format encoded as a JSON string.\n\n\n## Example Usage\n\nAssuming the necessary objects are created as described in the example in the setup section, we can\ngenerate a certificate for `my app key` by invoking the plugin with the following input:\n\n```json\n{\n  \"subject_dn\": {\n    \"CN\": \"localhost\",\n    \"OU\": \"Testing\"\n  },\n  \"subject_key\": \"my app key\",\n  \"issuer_key\": \"x509 CA key\",\n  \"issuer_cert\": \"x509 CA cert\",\n  \"cert_lifetime\": 86400\n}\n```\n\nThe value for `cert_lifetime` in the example above is 24 hours expressed in seconds.\n\nIf same attribute needs to be specified multiple times in `subject_dn` (like multiple \"OU\"),\na list can be passed instead of a string. For example:\n\n```json\n{\n  \"subject_dn\": {\n    \"CN\": \"localhost\",\n    \"OU\": [\"Testing\", \"TestingAgain\"]\n  },\n  \"subject_key\": \"my app key\",\n  \"issuer_key\": \"x509 CA key\",\n  \"issuer_cert\": \"x509 CA cert\",\n  \"cert_lifetime\": 86400\n}\n```\n\n## References\n- [RFC 5280](https://tools.ietf.org/html/rfc5280)",
                "short_description": "Issue X.509 certificates for keys stored in SDKMS.",
                "release_notes": [
                    "Allow specifying multiple entries in subject DN in the form of a list"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "X.509 TBS CA",
        "versions": {
            "1.0": {
                "path": "x509-tbs-ca/plugin.lua",
                "description": "## Short Description\nCreates a signed X.509 Certificate structure for keys managed by SDKMS. It showcases the flexibility of the plugin framework to use user-specific data formats.\n\n### ## Introduction\nX.509 certificates are a key element of many security architectures. It cryptographically ties a public key to the issuer of the certificate. Companies may wish to use their own input format.\nThis example plugin shows the flexibility of Fortanix's plugin framework. In this case a basic JSON structure is accepted as input. After the input passes a user-specified verification function, any desired fields can be added and a valid X509 certificate is created. The signed certificate is returned  in PEM format.\n\n## Use Cases\n\nX.509 certificates are used in a wide variety of applications:\n\n- Webservers use X.509 certificates as part of TLS to authenticate their identity\n- IPsec uses it to authenticate peers\n- Code signing systems such as Microsoft Authenticate enable verification of vendors of computer programs\n\n## Input/Output JSON Object Format\n\nThe input is a JSON map with the following fields:\n\n* `subject_key`: the name of the key that will be included in the certificate\n* `issuer_cert`: the name of the issuer cert stored in SDKMS\n* `issuer_key`: the name of the issuer key stored in SDKMS\n* `cert_lifetime`: the lifetime of the certificate in seconds\n* `subject_dn`: a map of OIDs to values\n\n## Example Usages\n\n```\n{\n\"issuer_cert\": \"my CA cert\",\n\"issuer_key\": \"my CA key\",\n\"subject_key\": \"my server key\",\n\"cert_lifetime\": 86400,\n\"subject_dn\": { \"CN\": \"localhost\", \"OU\": \"Testing\" }\n}\n```\n\n## References\n\n- https://www.rfc-editor.org/rfc/rfc5280.txt\n\n### Release Notes\n- Initial release",
                "commit": "8813b29efa6f1e4cbb316a009a48739fb924dded"
            },
            "2.0": {
                "path": "x509-tbs-ca/plugin.lua",
                "description": "## Short Description\nCreates a signed X.509 Certificate structure for keys managed by SDKMS. It showcases the flexibility of the plugin framework to use user-specific data formats.\n\n### ## Introduction\nX.509 certificates are a key element of many security architectures. It cryptographically ties a public key to the issuer of the certificate. Companies may wish to use their own input format.\nThis example plugin shows the flexibility of Fortanix's plugin framework. In this case a basic JSON structure is accepted as input. After the input passes a user-specified verification function, any desired fields can be added and a valid X509 certificate is created. The signed certificate is returned  in PEM format.\n\n## Use Cases\n\nX.509 certificates are used in a wide variety of applications:\n\n- Webservers use X.509 certificates as part of TLS to authenticate their identity\n- IPsec uses it to authenticate peers\n- Code signing systems such as Microsoft Authenticate enable verification of vendors of computer programs\n\n## Input/Output JSON Object Format\n\nThe input is a JSON map with the following fields:\n\n* `subject_key`: the name of the key that will be included in the certificate\n* `issuer_cert`: the name of the issuer cert stored in SDKMS\n* `issuer_key`: the name of the issuer key stored in SDKMS\n* `cert_lifetime`: the lifetime of the certificate in seconds\n* `subject_dn`: a map of OIDs to values\n\n## Example Usages\n\n```\n{\n\"issuer_cert\": \"my CA cert\",\n\"issuer_key\": \"my CA key\",\n\"subject_key\": \"my server key\",\n\"cert_lifetime\": 86400,\n\"subject_dn\": { \"CN\": \"localhost\", \"OU\": \"Testing\" }\n}\n```\n\n## References\n\n- https://www.rfc-editor.org/rfc/rfc5280.txt\n\n### Release Notes\n- Fixed number of arguments passed to sign()",
                "commit": "863e9c060b6f4e8b692c1cfcfe9a8cfb26f98f80"
            },
            "2.1": {
                "path": "x509-tbs-ca/plugin.lua",
                "description": "# X.509 TBS CA\n\n## Introduction\n\nX.509 certificates are a key element of many security architectures. It cryptographically\nties a public key to the issuer of the certificate. Companies may wish to use their own input format.\nThis example plugin shows the flexibility of Fortanix's plugin framework. In this case a basic JSON \nstructure is accepted as input. After the input passes a user-specified verification function, any\ndesired fields can be added and a valid X509 certificate is created. The signed certificate is returned \nin PEM format.\n\n## Use Cases\n\nX.509 certificates are used in a wide variety of applications:\n\n - Webservers use X.509 certificates as part of TLS to authenticate their identity\n - IPsec uses it to authenticate peers\n - Code signing systems such as Microsoft Authenticate enable verification of vendors of computer programs\n - etc.\n\n\n## Input/Output JSON Object Format\n\nThe input is a JSON map with the following fields:\n\n* `subject_key`: the name of the key that will be included in the certificate\n* `issuer_cert`: the name of the issuer cert stored in SDKMS\n* `issuer_key`: the name of the issuer key stored in SDKMS\n* `cert_lifetime`: the lifetime of the certificate in seconds\n* `subject_dn`: a map of OIDs to values\n\n## Example Usages\n\nInput:\n```\n{\n  \"issuer_cert\": \"my CA cert\",\n  \"issuer_key\": \"my CA key\",\n  \"subject_key\": \"my server key\",\n  \"cert_lifetime\": 86400,\n  \"subject_dn\": { \"CN\": \"localhost\", \"OU\": \"Testing\" }\n}\n```\n\nOutput:\n```\n-----BEGIN CERTIFICATE-----\nMIIDPTCCAiWgAwIBAgIUJzh5GdpFnsYeDTY3qc9xv6ZJmBQwDQYJKoZIhvcNAQEL\nBQAwJTEQMA4GA1UEAxMHVGVzdCBDQTERMA8GA1UEChMIRm9ydGFuaXgwHhcNMjAw\nNDE1MTQxNTUzWhcNMjAwNDE2MTQxNTUzWjAlMREwDwYDVQQKDAhGb3J0YW5peDEQ\nMA4GA1UECwwHVGVzdGluZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\nANI/C8XizogQbWSeYYmxlwrpXYblfHOjQI5w8JhNFA9a5z+K3r94ju22Nf9CYeBL\n27oSaS1Q0fNc6izTaV27uGis2X903J3tX4JLusdLeKqxsXwkLy5u8SsjT13HGBi9\nWdPnKLcKS+gX/zf3wOYdRcWILfRa6AxQzAL69Awk2SBW+EbTgo0LlWko9oK1uV+s\nU1dmpljq0ngRIgD2KUrb2g23cOS954AnkrsI28J4twbv7/Pw3xmrVY+2AU7haVqO\nfM18T0Vb8MYmT9tuUD+oWdj3AzFWNiVCUiQh6VI7WvVLFUkKIsW1IyRShoiWKcqr\nZzCBexmM71I02gvqYv00E58CAwEAAaNlMGMwGQYDVR0OBBIEEDFzdjRCbnY3L1k0\nNmNOK04wDwYDVR0TAQH/BAUwAwEBADAQBgNVHSAECTAHMAUGAyoDBDAjBgNVHSME\nHDAagBjuPJ14dyS2Lnt2/V/cMHPMTfBWiuvjOOgwDQYJKoZIhvcNAQELBQADggEB\nANKWKbGJlfzf6JhbvHWHlXmJVbyBN8GKWYJZbEZjNdFrv8bbXPhHHYcczMZ1ua5I\nzzNR/2o6iP2PzBKhBa57jzxiam+9b0UPv/tpekj/i8bUVg6gCGO6SEq5/WRmEDcO\nDoIli8UDSHayZMFdqaL/orGSXsgBOCjvbLxGfjJm3KCDzFOZoxuBcOPnhxeLLRts\nCQK5eiiwcx+2gCsU+Jg/j6kpLQpZC96IiHeJPSKaXIkehMyh6UuDGYbtCuEUXtcj\nmCCZAbXsajBfVa+YM42zD+FOQ1pjh4JTc8q3gPXecmQaIcK6LXoGOOUZ+z5vNhbb\ngWph2EGdaFrf1FCrcf5QKEA=\n-----END CERTIFICATE-----\n```\n\nIf same attribute needs to be specified multiple times in `subject_dn` (like multiple \"OU\"),\na list can be passed instead of a string. For example:\n\n```json\n{\n  \"issuer_cert\": \"my CA cert\",\n  \"issuer_key\": \"my CA key\",\n  \"subject_key\": \"my server key\",\n  \"cert_lifetime\": 86400,\n  \"subject_dn\": { \"CN\": \"localhost\", \"OU\": [\"Testing\", \"TestingAgain\"] }\n}\n```\n\n## References\n\n - [RFC 5280](https://www.rfc-editor.org/rfc/rfc5280.txt)",
                "short_description": "Creates a signed X.509 Certificate structure for keys managed by SDKMS. It showcases the flexibility of the plugin framework to use user-specific data formats.",
                "release_notes": [
                    "Allow specifying multiple entries in subject DN in the form of a list"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Key/Value Pair",
        "versions": {
            "1.0": {
                "path": "kvp/plugin.lua",
                "description": "## Short Description\nSeamlessley extend the functionality of Fortanix Self Defending KMS Secrets. Leverage applications generate and manage key-value (KV) pairs through Self Defending KMS Secrets.\n\n### ## Introduction\nEvery day, application teams come to rely on numerous secrets in their development and operational (DevOps) processes. Secrets ranging from passwords, tokens, certificates, SSH keys and database credentials simply cannot be hard-coded or statically configured.\n\n**Fortanix Self Defending KMS is THE MOST SECURE KMS** in the market. With this Plugin, DevOps can now easily manage their build and deployment secrets to maintain confidentiality throughout their CI/CD pipelines as well as during application runtime.\n\n### Use cases\n\n* Set and retrieve keys and corresponding values\n- keys and values are comma-separated parameters inside JSON\n\n* Namespace support prevents secret path collisions\n- names of Self Defending KMS Secrets are unique within an Self Defending KMS Account\n- Plugin prefixes KV secrets paths with a namespace to allow path reuse\n- allows multiple secrets with the same path inside an Self Defending KMS Account\n\n* Versioning support for keys such that:\n- Key update/delete automatically creates a new version\n- Key update/delete does not delete other keys\n- Uses Self Defending KMS custom metadata to validate versions\n\n* Deletion truncates the latest version (LIFO) or purges all versions\n\n## Setup and Usage\n### Invoking Plugins from Self Defending KMS CLI\nCheck the Self Defending KMS Python-based CLI README for information on setting up the CLI.\n\n* Log in to Self Defending KMS first.  `$ sdkms-cli user-login`\n- Currently, the CLI only allows `user-login` for Plugin invocation.\n- Specify an account argument if user has access to multiple accounts:\n- `--account-name`\n* Invoke the Plugin:\n`$ sdkms-cli invoke-Plugin --name kvp --in <read-secret-kvp.json>`\n- Either of the following argument should work:\n- `--name`\n- `--id`\n- `in` : Path to input JSON file.\n\n\n## Input and Output JSON Formats\nThe following sections specify the fields in the inputs and outputs of the\nPlugin's operations, which are JSON maps.\n\n__Important note__ about some of the input JSON parameters:\n\n* `group` : string, the prefix of the KVP secret.\n- Can be some arbitrary namespace label or an Self Defending KMS Group UUID.\n- In case a Group UUID is specified, KVP secret creation will be attempted in that Group.\n- The Plugin also needs to be a member of the specified Self Defending KMS Group.\n* `path` : string, the label of the KVP secret.\n- If `group` isn't specified, then the path needs to be unique within the entire Self Defending KMS Account.\n\n\n###  GET Operation\n#### Input\n* `op` : string, must be = `get` for reading a specific KVP secret.\n* `group` : string, the prefix of the KVP secret. ***Optional***.\n* `path` : string, the label of the KVP secret. **Required**\n* `version` : string, version of the KVP secret. ***Optional***.\n* `keys` : string, comma-separated list of key labels. ***Optional***.\n\n#### Output\n* `v#` : string, version number of the KVP secret.\n* [array] containing all key-value pairs or those matching the input keys, if specified:\n- `<key_name>`: string, JSON record index.\n- `<key_value>`: string, JSON record value.\n\n### PUT Operation\n#### Input\n* `op` : string, must be = `put` for writing a specific KVP secret.\n* `group` : string, the prefix of the KVP secret. ***Optional***.\n* `path` : string, the label of the KVP secret. **Required**\n* `keys` : string, comma-separated list of key labels. **Required**.\n* `values` : string, a comma-separated list of key values. **Required**.\n\n#### Output\n* `v#` : string, the version number of the KVP secret. **Auto-incremented**.\n* [array] containing all key-value pairs that match the input keys as well as those preexisting :\n- `<key_name>`: string, JSON record index.\n- `<key_value>`: string, JSON record value.\n\n### DEL Operation\n#### Input\n* `op` : string, must be = `put` for dropping a key within a specific KVP secret.\n* `group` : string, the prefix of the KVP secret. ***Optional***.\n* `path` : string, the label of the KVP secret. **Required**\n* `keys` : string, comma-separated list of key labels. **Required**.\n\n#### Output\n* `v#` : string, the version number of the KVP secret. **Auto-incremented**.\n* [array] containing all key-value pairs excluding the keys specified:\n- `<key_name>`: string, JSON record index.\n- `<key_value>`: string, JSON record value.\n\n### DEBUG Operation\n#### Input\n* `op` : string, must be = `debug` for displaying all the versions of a specific KVP secret.\n* `group` : string, the prefix of the KVP secret. ***Optional***.\n* `path` : string, the label of the KVP secret. **Required**\n* `keys` : string, comma-separated list of key labels. ***Optional***.\n\n#### Output\n*  [array] containing **all versions** of the KVP secret:\n- `v#` : string, the version number of the KVP secret.\n* [array] containing all key-value pairs excluding the keys specified :\n- `<key_name>`: string, JSON record index.\n- `<key_value>`: string, JSON record value.\n\n### TERMINATE Operation\n__Note__: All versions are deleted and the operation is audited.\n#### Input\n* `op` : string, must be = `ter` for completely destroying a specific KVP secret.\n* `group` : string, the prefix of the KVP secret. ***Optional***.\n* `path` : string, the label of the KVP secret. **Required**\n\n#### Output\n*  `message`: [string] error or success.\n\n## Testing\n\nFollowing example shows the lifecycle of a KVP secret as each operation is performed through the KVP Plugin.\n\n* `op:put` creates new key(s)\n- Version: new >> v1\n- Input: `{op:put, [k1], [val1]}`\n- Output: `v1{[k1:val1]}`\n* `op:put` updates and/or adds new key(s)\n- Version: v1 >> v2\n- Input `{op:put, keys:k1,k2, values:v1,v2}`\n- Output: `v2{[k1:v1,k2:v2]}`\n* `op:del` removes a key and bumps up version\n- Version: v2 >> v3\n- Input: `{op:del, keys: k2}`\n- Output: `v3{[k1:v1]}`\n* `op:put` increments always version\n- Version: v3 >> v4\n- Input: `{op:put, keys:k3, values:val3}`\n- Output: `v4{[k1:v1,k3:val3]}`\n* `op:debug` returns all versions and filters by key(s)\n- Versions: v1 <<>> v4:\n- Input: `{op:debug, keys:k1}`\n- Output: `v1{[k1:val1]}, v2([k1:v1]}, v3{[k1:v1]}, v4{[k1:v1]}`\n* `op:ter`destroys the KV secret altogether\n- Versions: `{[v4,v3,v2,v1]}` >> destroyed\n- Output: error or success message\n\n\n## Room for Improvement\nFollowing use cases are not supported yet:\n\n* alternative storage to Self Defending KMS Opaque Security Objects\n* explicit auditing with fine-grained levels\n* deletion of specific version and linking adjacent versions\n* revert to version and truncate all future version\n\nCommunity improvements are welcome. Join us on [Slack](https://fortanix.com/community/).\nGet your **API KEY** by signing up at [sdkms.fortanix.com](https://sdkms.fortanix.com).\n\n## References\n* [support.fortanix.com/sdkms/developers-guide-Plugin.html](https://support.fortanix.com/sdkms/developers-guide-Plugin.html \"Self Defending KMS developers guide Plugin\")\n* [support.fortanix.com/api/#/Plugins](https://support.fortanix.com/api/#/Plugins \"Self Defending KMS Plugins API\")\n* [bitbucket.org/fortanix/kubernetes-integration](https://bitbucket.org/fortanix/kubernetes-integration \"Kubernetes Integration\")\n\n### Release Notes\n- Initial Release\n- Uses Self Defending KMS Secret Security Object\n- Self Defending KMS Secrets are fully audited\n- Storage of KVPs limited to 1024 bytes\n- Test script provided\n- Tested with **Kubernetes Secrets Injection** referenced above.",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "JWS+JWE Encrypt",
        "versions": {
            "1.0": {
                "path": "jws-jwe-encrypt/plugin.lua",
                "description": "## Short Description\nThis plugin generates a **JSON Web Encryption (JWE)** from the **JSON Web Signature (JWS)**, which is constructed using the user's input payload.\n\n### ## Introduction\nThis plugin, performs encrypt using JWE standards:  enc:  A256CBC-HS512 alg:  RSA-OAEP-256.\n\nThis plugin performs the following steps:\n\n1. It generates a JWS from the `payload`.\n2. Generates a header for JWS containing `alg` and `typ`, as:\n```\n{typ : \"JWT\", \"alg\" : \"RS256\"}\n```\n3. Encodes header and input payload to the Base64URL format.\n4. Constructs the JWS Signing input by concatenating header and payload.\n5. Sign the above constructed `Jws Signing input` by RSA private key (provided in input) using SHA-256 and mode as PKCS1-v1_5.\n6. Encodes the signature in the Base64URL format and constructs JWS by concatenating header, payload, and signature by using `\".\"` as a separator. It will use this `jws` as input payload to `JWE`.\n7. Generate the header for JWE, containing `alg, enc, typ`.\n```\n{alg = \"RSA-OAEP-256\", enc = \"A256CBC-HS512\", typ = \"JWT\"}\n```\n8. Generate an exportable `transient` `AES` key of size `256` bits and an exportable `transient` `HMAC` key of size `256` bits.\n9. Encrypts the above generated JWS using the transient AES key in `CBC` mode.\n10. Generate `aad` using the `header` and `al` to store the size of `aad`.\n11. Creates an input payload for HMAC consisting of `aad, iv, cipher, al`.\n12. Creates a HMAC of the payload created above using HMAC key using `SHA-512` as the hashing algorithm.\n13. Truncate the digest generated above to half the length and use as authentication-tag.\n14. Import the `certificate` as a transient key.\n15. Encrypt the combined transient AES key and HMAC key with the `certificate` given as input, using `OAEP_MGF1_SHA256` as the mode and `RSA` is the algorithm.\n16. Returns the header, encrypted transient key, encrypted input payload, iv (used for encrypting input payload), the authentication-tag and JWE.\n\n## Use cases\n\n1. Assert one\u2019s identity, given that the recipient of the JWE trusts the asserting party.\n2. Transfer data securely between interested parties over a unsecured channel.\n\n## Setup\n\n1. For these plugin, we need a RSA private key already imported in SDKMS, and its corresponding public key as a certificate which the user should provide as input.\n\n## Input/Output JSON object format\n\n1. **`payload`** corresponds to input data, which is first signed and then encrypted.\n2. **`key`** is the name of `RSA` private key which should be already imported in `SDKMS`. This is used for signing the payload.\n3. **`cert`** contains the contents of the certificate (`pem` file) in base64 encoding. This is used to encrypt and verify the signature.\n\n## Example usages\n\nSample Input format: (The certificate value should be supplied as base64 encoded string)\n```\n{\n\"payload\" : \"hello world\",\n\"key\" : \"keyname\",\n\"cert\" : \"....\"\n}\n```\n\nSample Output format:\n```\n{\nheader : header,\nencrypted_key : encrypt_trans_key,\ncipher : cipher,\niv : iv,\ntag : digest,\njwe : jwe,\n}\n```\n\n## References\n\n1. https://tools.ietf.org/html/rfc7515\n2. https://tools.ietf.org/html/rfc7516\n\n### Release Notes\n- Initial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "JWS+JWE Decrypt",
        "versions": {
            "1.0": {
                "path": "jws-jwe-decrypt/plugin.lua",
                "description": "## Short Description\nGenerates the user's payload from a **JSON Web Encryption (JWE)** .\n\n### ## Introduction\nThis plugin performs decrypt using JWE standards:  `enc:  A256CBC-HS512 alg:  RSA-OAEP-256`.\n\nIt performs the following steps:\n\n1. It takes the JWE as input and splits it to get the parts i.e. encrypted key material, iv, ciphertext, and tag.\n2. Decrypts the encrypted composite transient key using the RSA private key (provided in input), and generate AES, HMAC transient keys from the decrypted key-material.\n3. Computes the `aad` from the header in the input and `al` to store the size of `aad`.\n4. Using `iv` from the input, and the generated AES key, it decrypts the cipher provided in the input in `CBC` mode. We receive the plaintext after decryption, which is correct only after the verification is successful.\n5. For verification, it creates an input payload for HMAC consisting of `aad, iv, cipher, al`.\n6. Creates a HMAC of the payload created above using HMAC key using `SHA-512` as the hashing algorithm.\n7. It truncates the digest generated above to half the length and compares it to the tag in the input.\n8. If the generated digest matches the tag, then it verifies the plaintext which is a JWS.\n9. It takes the JWS and splits it to get the parts i.e. header, payload, and signature.\n10. From the header and payload, it re-constructs the `Jws Signing input`.\n11. Decodes the signature from Base64URL to Base64, so as to use for verifying the signature.\n12. Imports the `certificate` as a transient key.\n13. Verifies the above constructed `Jws Signing input` and the decoded `signature` by `certificate` using `SHA-256` and mode as `PKCS1-v1_5`.\n14. The plugin output is `VERIFIED` and the actual `payload` (inside the JWS) in case signature is correctly verified and `VERIFICATION FAILED` otherwise.\n\n## Use cases\n\n1. Assert one\u2019s identity, given that the recipient of the JWE trusts the asserting party.\n2. Transfer data securely between interested parties over a unsecured channel.\n\n## Setup\n\n1. For these plugin, we need a RSA private key already imported in SDKMS, and its corresponding public key as a certificate which the user should provide as input.\n\n## Input/Output JSON object format\n\nInput parameters details:\n\n1. **`jwe`** corresponds to JWE generated by `Encrypt` plugin.\n2. **`key`** is the name of `RSA` private key which should be already imported in `SDKMS`. This is used for decrypting the payload.\n3. **`cert`** contains the contents of the certificate (`pem` file) in base64 encoding. This is used to verify the signature.\n\n## Example usages\n\nSample Input format: (The certificate value should be provided as a base-64 encoded string).\n```\n{\n\"jwe\": \"...\",\n\"key\" : \"keyname\",\n\"cert\" : \"...\"\n}\n```\n\nSample output format:\n```\n{\n\"payload\": \"...\",\n\"output\": \"VERIFIED\"\n}\n```\n\n## References\n\n1. https://tools.ietf.org/html/rfc7515\n2. https://tools.ietf.org/html/rfc7516\n\n### Release Notes\n- Initial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "AWS BYOK",
        "versions": {
            "1.0": {
                "path": "aws/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for AWS cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of AWS KMS.\n\n### ## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the AWS cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in AWS KMS\n- List Fortanix Self-Defending KMS AWS BYOK key\n- Rotate Fortanix Self-Defending KMS AWS BYOK key\n\n\n## Setup\n\n- Log in to AWS portal\n- Create AWS IAM policy\n- Create AWS KMS plicy\n- Attach policy to IAM user\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures AWS IAM secret key and access key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: AWS secret key\n* `access_key`: AWS access key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"secret_key\": \"GZA....sz\",\n\"access_key\": \"AK...ZCX\"\n}\n```\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in AWS KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n\n```\n{\n\"operation\": \"create\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"key_size\": 256,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\"\n},\n\"created_at\": \"20200725T155625Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"obj_type\": \"AES\",\n\"never_exportable\": false,\n\"state\": \"Active\",\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"activation_date\": \"20200725T155625Z\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"enabled\": true,\n\"origin\": \"FortanixHSM\",\n\"kid\": \"04286b5c-4707-4ed1-bf92-934c7a077d5f\",\n\"name\": \"test-key\",\n\"public_only\": false,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"compliant_with_policies\": true\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from AWS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n\"\n{\n\"operation\": \"list\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n\"KeyCount\":1,\n\"Keys\":[\n{\n\"KeyArn\":\"arn:aws:kms:us-west-1:513076507034:key/46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\",\n\"KeyId\":\"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\n}\n],\n\"Truncated\\\":false\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in AWS KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"obj_type\": \"AES\",\n\"kid\": \"49521024-e28f-4f6c-82e7-a9f29088ec43\",\n\"activation_date\": \"20200725T155809Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"compliant_with_policies\": true,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"enabled\": true,\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"origin\": \"FortanixHSM\",\n\"created_at\": \"20200725T155809Z\",\n\"key_size\": 256,\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"never_exportable\": false,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"129bfa49-3dde-4d5f-87f7-f883e80e7893\"\n},\n\"name\": \"test-key\",\n\"public_only\": false\n}\n```\n\n### Release Notes\n- Initial release",
                "commit": "9e22569e6f7e57da293995c4deedcab6cfa041cf"
            },
            "2.0": {
                "path": "aws/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for AWS cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of AWS KMS.\n\n### ## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the AWS cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in AWS KMS\n- List Fortanix Self-Defending KMS AWS BYOK key\n- Rotate Fortanix Self-Defending KMS AWS BYOK key\n- Disable AWS BYOK key from Fortanix Self-Defending KMS\n- Enable AWS BYOK key from Fortanix Self-Defending KMS\n- Delete AWS BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to AWS CMK\n\n## Setup\n\n- Log in to AWS portal\n- Create AWS IAM policy\n- Create AWS KMS plicy\n- Attach policy to IAM user\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures AWS IAM secret key and access key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: AWS secret key\n* `access_key`: AWS access key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"secret_key\": \"GZA....sz\",\n\"access_key\": \"AK...ZCX\"\n}\n```\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in AWS KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n\n```\n{\n\"operation\": \"create\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"key_size\": 256,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\"\n},\n\"created_at\": \"20200725T155625Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"obj_type\": \"AES\",\n\"never_exportable\": false,\n\"state\": \"Active\",\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"activation_date\": \"20200725T155625Z\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"enabled\": true,\n\"origin\": \"FortanixHSM\",\n\"kid\": \"04286b5c-4707-4ed1-bf92-934c7a077d5f\",\n\"name\": \"test-key\",\n\"public_only\": false,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"compliant_with_policies\": true\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from AWS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n\"\n{\n\"operation\": \"list\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n\"KeyCount\":1,\n\"Keys\":[\n{\n\"KeyArn\":\"arn:aws:kms:us-west-1:513076507034:key/46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\",\n\"KeyId\":\"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\n}\n],\n\"Truncated\\\":false\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in AWS KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"obj_type\": \"AES\",\n\"kid\": \"49521024-e28f-4f6c-82e7-a9f29088ec43\",\n\"activation_date\": \"20200725T155809Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"compliant_with_policies\": true,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"enabled\": true,\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"origin\": \"FortanixHSM\",\n\"created_at\": \"20200725T155809Z\",\n\"key_size\": 256,\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"never_exportable\": false,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"129bfa49-3dde-4d5f-87f7-f883e80e7893\"\n},\n\"name\": \"test-key\",\n\"public_only\": false\n}\n```\n\n### Disable operation\n\nThis operation will disable a AWS KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"disable\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Enable operation\n\nThis operation will enable a AWS KMS disabled key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"enable\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Release Notes\nAdded support for the following new features:\n- Disable AWS BYOK key from Fortanix Self-Defending KMS\n- Enable AWS BYOK key from Fortanix Self-Defending KMS\n- Schedule deletion for AWS CMK from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to AWS CMK",
                "commit": "8cde7a48743076045809da52037c94a96a195d47"
            },
            "2.1": {
                "path": "aws/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for AWS cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of AWS KMS.\n\n### ## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the AWS cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in AWS KMS\n- List Fortanix Self-Defending KMS AWS BYOK key\n- Rotate Fortanix Self-Defending KMS AWS BYOK key\n- Disable AWS BYOK key from Fortanix Self-Defending KMS\n- Enable AWS BYOK key from Fortanix Self-Defending KMS\n- Delete AWS BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to AWS CMK\n\n## Setup\n\n- Log in to AWS portal\n- Create AWS IAM policy\n- Create AWS KMS plicy\n- Attach policy to IAM user\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures AWS IAM secret key and access key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: AWS secret key\n* `access_key`: AWS access key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"secret_key\": \"GZA....sz\",\n\"access_key\": \"AK...ZCX\"\n}\n```\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in AWS KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n\n```\n{\n\"operation\": \"create\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"key_size\": 256,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\"\n},\n\"created_at\": \"20200725T155625Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"obj_type\": \"AES\",\n\"never_exportable\": false,\n\"state\": \"Active\",\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"activation_date\": \"20200725T155625Z\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"enabled\": true,\n\"origin\": \"FortanixHSM\",\n\"kid\": \"04286b5c-4707-4ed1-bf92-934c7a077d5f\",\n\"name\": \"test-key\",\n\"public_only\": false,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"compliant_with_policies\": true\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from AWS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n\"\n{\n\"operation\": \"list\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n\"KeyCount\":1,\n\"Keys\":[\n{\n\"KeyArn\":\"arn:aws:kms:us-west-1:513076507034:key/46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\",\n\"KeyId\":\"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\n}\n],\n\"Truncated\\\":false\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in AWS KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n\"obj_type\": \"AES\",\n\"kid\": \"49521024-e28f-4f6c-82e7-a9f29088ec43\",\n\"activation_date\": \"20200725T155809Z\",\n\"lastused_at\": \"19700101T000000Z\",\n\"compliant_with_policies\": true,\n\"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n\"enabled\": true,\n\"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"origin\": \"FortanixHSM\",\n\"created_at\": \"20200725T155809Z\",\n\"key_size\": 256,\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n},\n\"never_exportable\": false,\n\"custom_metadata\": {\n\"AWS_KEY_ID\": \"129bfa49-3dde-4d5f-87f7-f883e80e7893\"\n},\n\"name\": \"test-key\",\n\"public_only\": false\n}\n```\n\n### Disable operation\n\nThis operation will disable a AWS KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"disable\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Enable operation\n\nThis operation will enable a AWS KMS disabled key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"enable\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Release Notes\nAdded support for the following new features:\n- Disable AWS BYOK key from Fortanix Self-Defending KMS\n- Enable AWS BYOK key from Fortanix Self-Defending KMS\n- Schedule deletion for AWS CMK from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to AWS CMK",
                "commit": "6da03480d7c1531177a3033280994b7a45b01d51"
            },
            "3.4": {
                "path": "aws/plugin.lua",
                "description": "# FORTANIX DATA SECURITY MANAGER AWS KMS BRING YOUR OWN KEY (BYOK) PLUGIN\n\n> NOTE: This plugin should be considered deprecated and users are advised to migrate to the native functionality in DSM.\n\n## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because\nphysically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises\nuse encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows\nenterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an\nimplementation to use the AWS cloud BYOK model.\n\n## Requirement\n- Fortanix Data Security Manager Version >= 3.17.1330\n\n## Use cases\nThe plugin can be used to\n\n- Push Fortanix Data Security Manager key in AWS KMS\n- List Fortanix Data Security Manager AWS BYOK key\n- Rotate Fortanix Data Security Manager AWS BYOK key\n- Disable AWS BYOK key from Fortanix Data Security Manager\n- Enable AWS BYOK key from Fortanix Data Security Manager\n- Delete AWS BYOK key from Fortanix Data Security Manager\n- Reimport key material from Fortanix Data Security Manager to AWS CMK\n\n\n## Setup\n- Log in to AWS portal\n- Create AWS IAM policy\n- Create AWS KMS policy\n- Attach policy to IAM user\n- Alternatively, setup AssumeRole or AssumeRoleWithSAML\n\n## Input/Output JSON object format\n\n### Configure operation\nThis operation configures AWS IAM secret key and access key in Fortanix Data Security Manager and returns a UUID. You need\nto pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: AWS secret key\n* `access_key`: AWS access key\n\n#### Example\nInput JSON\n```\n{\n  \"operation\": \"configure\",\n  \"secret_key\": \"GZA....sz\",\n  \"access_key\": \"AK...ZCX\"\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Configure SAML operation\nThis operation configures AWS IAM SAML Identity Provider (IdP) and an administrator or API credential in Fortanix\nData Security Manager and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `configure_saml`.\n* `host`: SAML Identity Provider host\n* `resource`: SAML Identity Provider API suffix\n* `username`: SAML Identity Provider Admin or API credential\n* `password`: SAML Identity Provider Admin or API credential\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"configure_saml\",\n  \"host\"     : \"dev-95xx74.okta.com\",\n  \"resource\" : \"amazon_aws/exk19l...S04x7\",\n  \"username\" : \"joe@fortanix.com\",\n  \"password\" : \"s$O...x245\"\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### AssumeRole operation\nThis operation takes the configured IAM user access credential and a role ARN as input to assume a new target role for\nthe IAM user. It produces a temporary security credential valid for 15 mins.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `assumerole`.\n* `secret_id`: The response of `configuration` operation.\n* `role_arn`: AWS ARN for the target IAM role\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"assumerole\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\",\n  \"role_arn\": \"arn:aws:iam::123456789012:role/target-assume-role\"\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\n### AssumeRoleWithSAML operation\nThis operation takes the configured IAM IdP Principal ARN and and a role ARN as input to assume a new target role for\nthe external federated user. It produces a temporary security credential valid for 15 mins.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `assumerole`.\n* `secret_id`: The response of `configuration` operation.\n* `role_arn`: AWS ARN for the target IAM role\n* `principal_arn`: AWS ARN for the preconfigured IAM IdP federating the external user\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"assumerolewithsaml\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n  \"role_arn\": \"arn:aws:iam::763471887487:role/SAML-default-role\",\n  \"principal_arn\": \"arn:aws:iam::763471887487:saml-provider/OKTA\"\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\n### Create operation\nThis operation will create an AES-256 key in Fortanix Data Security Manager and import it in AWS KMS.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` or `assumerole` operation.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"create\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n  \"key_size\": 256,\n  \"custom_metadata\": {\n    \"AWS_KEY_ID\": \"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\"\n  },\n  \"created_at\": \"20200725T155625Z\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"obj_type\": \"AES\",\n  \"never_exportable\": false,\n  \"state\": \"Active\",\n  \"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n  \"activation_date\": \"20200725T155625Z\",\n  \"creator\": {\n    \"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n  },\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"enabled\": true,\n  \"origin\": \"FortanixHSM\",\n  \"kid\": \"04286b5c-4707-4ed1-bf92-934c7a077d5f\",\n  \"name\": \"test-key\",\n  \"public_only\": false,\n  \"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n  \"compliant_with_policies\": true\n}\n```\n\n### List operation\nThis operation will list all the BYOK keys from AWS.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` or `assumerole` operation.\n\n#### Example\n\nInput JSON\n```\n\"\n{\n  \"operation\": \"list\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n  \"KeyCount\":1,\n  \"Keys\":[\n    {\n      \"KeyArn\":\"arn:aws:kms:us-west-1:513076507034:key/46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\",\n      \"KeyId\":\"46fa7bfd-24de-4e5d-be94-99fa3e3bf09e\n    }\n  ],\n  \"Truncated\":false\n}\n```\n\n### Rotate operation\nThis operation will rotate a key in Fortanix Data Security Manager as well as in AWS KMS key.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` or `assumerole` operation.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{\n  \"obj_type\": \"AES\",\n  \"kid\": \"49521024-e28f-4f6c-82e7-a9f29088ec43\",\n  \"activation_date\": \"20200725T155809Z\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"compliant_with_policies\": true,\n  \"group_id\": \"9564adfd-2399-46d0-90c0-4cf80b7bcc33\",\n  \"enabled\": true,\n  \"acct_id\": \"15e5e446-c911-4ad4-92b4-85eabefabfe7\",\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"origin\": \"FortanixHSM\",\n  \"created_at\": \"20200725T155809Z\",\n  \"key_size\": 256,\n  \"state\": \"Active\",\n  \"creator\": {\n    \"plugin\": \"c2aa3055-5532-4ff2-8ca5-cb450c26e280\"\n  },\n  \"never_exportable\": false,\n  \"custom_metadata\": {\n    \"AWS_KEY_ID\": \"129bfa49-3dde-4d5f-87f7-f883e80e7893\"\n  },\n  \"name\": \"test-key\",\n  \"public_only\": false\n}\n```\n\n### Disable operation\nThis operation will disable a AWS KMS key.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\nInput JSON\n```\n{\n  \"operation\": \"disable\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Enable operation\nThis operation will enable a AWS KMS disabled key.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\nInput JSON\n```\n{\n  \"operation\": \"enable\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Delete operation\nThis operation will schedule a AWS key deletion. This will not delete key from Fortanix Data Security Manager.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\nInput JSON\n```\n{\n  \"operation\": \"delete\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Cancel Delete operation\nThis operation will cancel a scheduled deletion of a AWS key deletion.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `cancel_deletion`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"cancel_deletion\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"d6807129-27fe-4f64-8509-f9d3326c1de5\"\n}\n```\n\nOutput JSON\n```\n{}\n```\n\n### Reimport operation\nThis operation will reimport the same key in an existing AWS KMS CMK.\n\n#### Parameters\n* `operation`: The operation which you want to perform. A valid value is `reimport`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\nInput JSON\n```\n{\n  \"operation\": \"reimport\",\n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n```\n\nOutput JSON\n```\n{}\n```",
                "short_description": "This plugin implements the Bring Your Own Key (BYOK) model for AWS cloud. Using this plugin you can keep your keys inside Fortanix DSM and use BYOK features of AWS KMS.",
                "release_notes": [
                    "- Add deprecation notice",
                    "- Correctly handle the reporting of errors from AWS to avoid plugin crashing"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Self-Defending KMS-Azure Bring Your Own Key (BYOK)",
        "versions": {
            "1.0": {
                "path": "azure/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n### ## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure key vault\n- List Azure BYOK key\n- Rotate key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Backup Azure key vault key\n- Recover Azure key vault key\n- Restore Azure key vault key\n- Purge Azure key vault key\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS.\n- Create a Key vault in Azure\n- Add the above app in the `Access Policy` of the above key vault\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create Key operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and in Azure key vault and return a key ID.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `exp`: Key expiration time. Accepted format is Unix time.\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"exp\": 1596240000,\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"updated\": 1593587162,\n\"exp\": 1596240000,\n\"enabled\": true,\n\"created\": 1593587161\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/12860b1156e448dda3a5a3fba9b19a4d\",\n\"key_ops\": [\n\"sign\",\n\"verify\"\n],\n\"n\": \"AOWMCffn25U5JFX7M8zW-ncjOOaVuVPBFSI6Ae_N6Nl9Uzn_2Y_DfJX4gjaPRNcercZ8Fib7WzF_UwZPU486D7lqB8_YxP8F9WyM8cOYgT1KL4KdRh-6-dstQ9MmVp06FmvV2E8T7njY-Ds218gHW4eXA4UWeu2GXrClKmD7ADkD\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\"\n}\n}\n}\n```\n\n### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Rotate Key operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n}\n```\n\n\n### Backup Key operation\n\nThis operation will return encrypted Azure key vault key.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `backup`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"backup\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"activation_date\": \"20200814T075259Z\",\n\"key_ops\": [\n\"EXPORT\"\n],\n\"created_at\": \"20200814T075259Z\",\n\"acct_id\": \"d97b7540-052d-422b-a6a9-017517f221e9\",\n\"origin\": \"External\",\n\"key_size\": 75000,\n\"compliant_with_policies\": true,\n\"public_only\": false,\n\"enabled\": true,\n\"obj_type\": \"OPAQUE\",\n\"value\": \"JkF6dXJlS2V5VmF1bHRLZXlCYWNrdXBWMS5taWNyb3NvZnQuY29tZXlKcmFXUWlPaUkwTXpnMVlqQTNZaTFrTlRRM0xUUXlaVFV0WVdVNVpTMDJNVEJrWXpNNVpHWmhaamdpTENKaGJHY2lPaUpTVTBFdFQwRkZVQ0lzSW1WdVl5STZJa0V5TlRaRFFrTXRTRk0xTVRJaWZRLnVHUzdEaWtOa1BzZ3dqb1lmYnltYl9NVnM1elpOZERzR1E2STdJVEx1Uy1IbHd1UXpoYkw5NjBfRzV6a1o5MkY0NnppV1FSWVJDS2ZCY3IyRWpoXzFkRGlkOTFQN3M5QVdNNlZsNlVHSEk2bjJ0Q3R0djlDRkw1U2trSm5YeDNkZllHcEVBY1c4amlrYUlVendBMjc3OFVBa1NlZDY1S2VYUXhWR0poenlOX1hPZVgwRWZtSlZnaUZrSmRrM1k2SmFmRzBjWTdTZnItajZXZzd1UHVOT1NPZW1Lb25pTW1nWDRjeUNpSnRvQzFVNG96eDk0UUdQblhETXl4T2VYVlFOeXl6cUotZndyQldMUUZUdFN5bmNlYnJGRGdwc2plcGVuWVhQbnkxUU1qVXN6MXlEOUpqRjgxdXcxUDZnNVl3LThyckg5ckVhY3phQUNpUzRKNzVIQS5PbHhKakZTZDdIWXRtX0dUdnFPY1N3LkNQVThTRjZUZDI1Q0oxNnZEQ3dQOVdJczF1bTNKYkpadTQwRFdPZE1ibzJDdEM4aVVzdk9FSE9BemI3WHFkOXJTSThSNERuTG5maEVnSHRfMnZkcUV6OXBUY2pldlhuRnBkbGdfMDdsc2xScDdJNGZEcm94LVhlOU9nMXhWRjZkd3JqUjdpWE9URTVFZjVvYnk2Ums0NkJSZG1TNHV3S3U1Wk9KLWVKQnR0WmFNckgzVmdqbkowUFpnaThFQ1NWOEN1ZFE5R3dvX1Z3R1FhTHZjYVhnNWR6SkNYdlk4dkY0eU5wZnloYWY5RnVtLVFLYzNrYnNsTjhKR19vMFNjZFdKdWh2d2JIc0VRQW9zZ3JFQlJHQ2tjcG12U0xJd1Fja3pUTmVmemJOTGwzZXVXY3JJZzgwSmM1VkdfSFRGN3VDNXV1Ry13UnVfblhUZ0hPNFFWVnVPempZMmgwZ3djdjk3TVZSWjg5OXA0NFM2ZDhZNUJZNXJmbkhvUXh4U0Q2cGJtbThxcGdwdDV6cmd6VUtKaFNNRWZ1X2xpOE5nM0ctVXFLSlZ6alFmUmw5OHlLbGdPUi05VW5DbnZGUEtKYzN3RmFhWlVhV09hR01USEoyeXkyWGJJcEwycGJCUTEtRURHNmFkZERwYi1sNEU5Z0RpVlZvQkVGVVVwbzNwQWNES3N0bEloSWQxNzlBMUhjQ0h3cFFYeEVTb3E3aUpOUkJvbmg3cmtoU2hVQjFfR050U3RaemtBOXF1Q3B5U0twNXhOcEFZdlJaOXlod2JhZzZfSkJMZXRiT3ZIVmtQT1lqSTFheFlVWm9YMGhaRHZFc2lFcHVoNjJGUDNqc3ZDMGFQRUFNdjhhb0ZXQ1h0UF9VYlp6NE1xZC1mbnA2S09YYlNBeDVDTDR1emloTHI4RndUZkxCMXhxSlEwR0cxNG9qSnlCQ2M5WjhmN3NrcmFOWlpXNU5wRkRSdU0zTWZCUmQxU3N5Z0xuNXZkZnlRajFtXy0xTUtpY0lQSDJROWQ3eVhNWnE4N0lJMDBlNnczVVFIUGxUd25WUnNWSDFkRGg0TWhvdGdkakRqWC0tbGhGMmhCZTVFbHgycURkN3FEM05TTGNnVFRnSW9JRXhWMkg5OHNpUVBjeHc2RDIyYzZfTndtYlNtLU9XeGhaLUVZSkJ4c25NQjV0UFNWTkUxY2dGZnBRSE5KN1R3bVA0T2JCV1dmR2VDZjlEbU1DOXJuVi1GX2k1RTMzWUhpXzNVbWdEM29aZXhDOHJjVmFPbGdtc3pWQnUySVR2aEJabXc0S3ZKc2MzeTYwSDB3N1RSbzNFWXpTbnpmWVc0ajQtOU9GRmljMjU1SzFzdURVbmpkLU81alJkd3NaNk4yOU16MWFFeS1uTTdiTm1aNl9TQ0NxMFJLdi14MVhfVW5TQUNIVGJNVUFNTFhHNkhRaVlYZGtqUHNtMk9YTUF1cXB1VDBqWUJsTWVmMEIweEJQVE5QWXlxcG5DRXRxcmRIWTBxdER5TzRQTmU2dHpOYWxUSTBPVk1qN2NZTmhxQ3pqQW14OEk0QTd2TkcwMlR2TE9sSVlTZXVTN2R4dHFUemtPNVEwaVJxMVVwdUFJemJjOElwV1EzZkU4eDZva1ZJOHBWZFpocGcwbF8xakxCNE5FZExMMlFOVEVSZUtyUzc0SDlONE1hTFlEY0VtU2JScTFVM3JZQTNhZy1JNGxaQXEzVmNjdHp2WVZnY1l3MGM3U1E3NEo0eWd4OERYZDA5S00yMmpiZHdvYkRyWms4Y3I5aTJkd3lfRzlEU2d3XzZOSS1wbklDVGtkVU9IdlN3b0w4R01JYmd5LTl0UGtwSE9CRXBDaHFzaUpVRXU1VG05b0lwM0wtR0FzeTVjZ0ZHMmxUV1R3dGlzRUU4aXZsNlNXWjVVSHMzZ2JKTjcxUExMbkw5cUlneW5Zem1YckdvSkdkT1lkZnVqVWthT3RCNmJSWWpnZnVJSlZoN3lSUVlfOVpJVGczVEZTMTlFYzFNOVR1WVlaZzU3ZjhHWEJUXzFMSkZDd09JMmJ1SEh1cDNiYU9XbWhLWEswVm1NNGF0OXp5SzJiS21oSHRVLWNLb3VudEtUTVVtTmFNU05ObnJGRzlmZ0FiLVNMTjJROHBwZnpGOFJYajlTM0lIVmJfSldFNmY4dng0MDRvY1R2VEpUZFpvWGxwamtKdjd1d3Q0QVZldVhmZ1VqT0c0dkk2SmZMTnJMNEVhU0pEQmViR2Fnc0xXOHlkR2F0dnRnem9zYXpRUUhydWdKS2U2a2IxRWNtSEZCcDh2azlqWGtSY1JsekVZSktCMVdGejRvYmhPTllLbEp1YlF3Y3Z1Q0xqM1NmVDBVMldYSFhJWjNMQU5UczJkekFabWNXaEwtbTVUdWpsR1BQUXg3aVgtVXlSZWhPc1BEVXA5WnFYVmdQV1ZWOVdNOHlXeVpRTmx2MGxkdml3aHljd0hSTElEX25lcEg3NlBSeThiWUlGWUZGRHh0dXNadjlqRXA2d19YQWZiQzNRNzctaWRGQ24yaUxLbHZGbkdiVGxCajd3RlFJaDVLaWFEX0JDOW9hVGJTZE5jajVPNmRtMG5QVFB4T3pNTEt3clNxSHF3dWY4Um9SZVg5d1VDR3hmWE5jNkF3UjhheHJwWXlQUmhZZUJxdWtRSFFaYVFQclhMYkNWNUZxblRNM2tsUm8zNHJ5R1hHMnBweDFKNldBWmRFc084d2x2U3NUUjU5S3h4Q2FKMEExckJQblFxUUNsR1ZnZ0dsM3VjRjBDdTItdXBGTWtleGRTOWJ3T3gxZDN6SFJncmtWVks4eE9XRGNvMl80OWpHVnlGT1hQQkI2a0hPcWR2d28tYXRKTDFZUmFTSUEtbkxPbmF5bXBsMlZzZDhrd2lnQ21SV2R4a1FUME9kSFBSQUtZbFBKNkREU3RubVBIeWFpWDlCbUZ0TVh2cWNMeG1mdE4yTzBaZ09mdUV3bkRXZFNUdGhCVUxSNjd6czJkZExwXzYwSVlNSEpRZDFsSHQxbl93akV6TFlOU253T2NGdG1xQkQ0T05ib3lmWGNtVEhwc0c5T1l1SC1uODVNMWF3UEFRaGRZWURWY2lOdTJhRlRPYXcyM0FSbXNYQTNtQlpjNU1LcS1rZ2N6R1VnMlIyTjQzbUVVZFpoWXV6Y3NMSEhkdXA5Z092N19iZk5rcmxMWEl6Z3NoMERRMjZHTnhVNHd4aUZGRms3a09xYV8tR1NOcWRDejdfUUl1QUFiaXhZd29MZU1rRXllVHVzZnN2b2tjMURUTUJGT2otSkx3VGdiVzZFcHhZeldZTDVNZzFhc1ZjRTBncVhUSnlSSHJhWE85RjRMMTNNclQ3TThSTnJEQy1Td2pkLUhzdWVpamVYbmVLSTREOTlEUUhGUnpVVmFWNUNuT3BHSktYOUtELTR0T0g5eS1HdHIzQ3VTWkhXRjRxeFFPYURTWFBrYm1idTJ5NGoxcHQ0VnIyWERJd2IxeGphdVVtLXVvUDJickg0a0Rkbm9wS0MyZmNfdVpwR1VCcEpfMDJNM0NSajVGQ1F5UFpQUTMwdlpybFllaE9RZnNSOHJ0c0phSnUzWDRNUTFRX0JLeGotNWlXbGNjMHJEVDUwYWNkN096elZtREI4RDg0QlNKdmwxNjFQeUxUN0FjcURRODNOZUFoX2RCeE5MQV80WklPMUlTc2Z0d0VjMlRNNDlMWXJ3NDhia2hTTU1qWjF0T0lrMEs4R3JOYzVPM2V6VDYtTUVPWnZralctV2F5N215aHJ5V0Rxc2ZCaTc1bTQwbm1qUUFMeEVBZ3ZMRUs5M29GbmJpY1l3NlpNNmJ5V0ptUkpucmxjNldpOW9DbWkxTFhCTlRIQndhMFFJSURvcXFHSTlmdGE5Qld4WE81VWQ5RXVlZkE5blNNUWw5WVZQa0szejVJeTd4TEQtY2NReHZyYUFrYi0ybHNkUVpJbDVGYzJFRjBUTVlBT3RSMWJBMXZXU2tEblkxNXg4bnpoZVFLTmUzdk5FMHhvWXp2Nnh0TldrV0pjU3NzUkw3Mmp0UnAtajh4OEZIaGhGQ0VvVGRsVTB5RnUxcXdmQjdfXzkzeTMyWUhSZ1V3dTFVUWZIMklLYnZVbjhZN2pkTDNSX0xUUEQ2d1JIS3l4SzNQajFNbi1YaFEzTW9SZFJIQ09xN2w3djVoVllhZF95SnpjMUhVcGxjSTVvb0VBUkU1TW1rSl9abm9sbmZ3aEVPZFB6TTFXVXRYMl84SzFoNHlGRUNaNThWdHRyaG42NTVrXy1MTHNoYk1KUVNKT2tkLTd2YS1od1R1eFliRHd6NElwVTZqRUo5eU5fSHdYQy1wemdCTkRkbXNYOTJndnI2MjFtZ1p6UTgyQmRjWHM1MWhNMHhfWUl4WkkyUVctTk5nNVNWNG1KNVdsbWFjcEYwNUFxUnFST2JLbndpNEthMmhFUWg4TWhDcDB5VDVCc0Y1V1pCOVNRWW5vVERCcHEyamYtNGRIeUIzUkFFNktwODdKbE9STE5TaFFqcEwyVzgzRV93RWRuOVdDaGpyTG96bnhVbUttRXp1alE1VG9rNE1yZ1VwdjZHdlBVbm9PWVdHV2pEZ3BGZTlxYmtWcUpQZGpiUkNIUkczTEQ1OXZOMFVIaml5U0FxcXJzQ2RMSXVJdzRWcVZNa3ZjQS1ROEhfNjBwMDBfNWZld29EeWc4NHpkVlNqeW95cjZ1ZlZWa3kyMjBLQnhnQ3h0OFhRUlNONDN1Yk1ZV3lmUXFXTUN2MmxKQkhIMklJblZPQTY2QVAyX1ktZ2NwcTBqQzJNLUE0YUx0LWVDLU4wazRTdWRZQUFxejhHWDVvMUZnVkZXbjFLQXB6N1RwaTJQcnUzOEY5aFJGaHRacTRHVWpCeVp5M1E2QlpEVkxBNG5UN09Ka19DUFVOZ1pXY25RdTFIUW1za2JQczRiRkk5Mnh0Z2R4N1hfZlNQajB1RnAxNzBzYlBHTk1Db0NBQlRXSFBfRjNLMlJObjdrS3ZDRWVqMnRLMGZRcUZjWWVLa1piWGxpUzVGN2d3dWFkLWhxdFg4SmlNNmVqcnlTeEFGRGREYTNwWG8zX3NBbVhIaHZqUDlfbzBNNVNoV0k3OFVMUTY0V0pIVTAyZWhuTVFDdGlIUDg5RkZWRE5QaXhJRm9wdEdrY2FnNkl5QjFHbDZaMGVtOUdURVU0YndZODZ3Z2l0dThEaER0ZmhxemJUSXpKeENkTGxwTWVjQk9EVEFNTmZmUXR2am15STBSR3NXLTFzZDBKNzBKcmR4aldQSVNhN3h3V0E1cVZreEllMzZlQ3Jkb0JDQTlTeThDWEVIaFJXS3J4QXNwb2k5UWc5WjRnR0RsdDVlTGdpYk9UNnNDWTdpcFlZT29NVlI3RS15Vk9ydUJDemF1d1BBMXhqRFRsNTRwNGo2ZFhoTkZNVmJhQlRseGtyUmJUeGlYSkNEYlA0ZWpxWHpkTmEzOFU1LXRQdW5Bb3p4TFRwZnBrQ3pReUF0SnZfM3liZ19QeTV0d015MHhzLVE5c3pMUXpQS010VHZsNjc4VXJ5VUhwVFgxUmp5RFVKN2p3R3NNdEt5ZXVIdWlpaEx3N2VieDF1QUxNeUxQV2Zmc3FhcjBCRnpGdS1lMTlPM0d4R0ozMm9iNFBDd3VUVWROYVRtWUJmaTdqMmNHNGY1LWk0SlQ5UDQwNmd3cTUzcWdwSUtGSWlTME1SLTJ1MzRXXzRVdjNVVTUtSGNkekg5bjlIMVpxTGdINlVmSW5pTDU4b2RMX0dxc3dEUFE5SGdUZDRyemxHLWFqOWMyUHI3XzJYbGptSjdQcWlzck5TYklmVzBESFliZ05vY1ctRm00X3lUcUpMMkpJc0NCWFVwcV9nZUlObTFpalIyRW5mMmJUaThyUG1SVXk4cEtfcXdOTkhrVk9OWl9tQjBfYTBCOFpLOHcyZ1VwbTk0ZWxPTHloWFhKb1pmQ2hiM3I4QnNvZDRzc2twQVVlYXUtTGZMSDRFOVBzTjRNd1ZhWXpycHItTGtlYy1XUVlWLXpxOG1rN0xsd3dTdnVhNnliWHBJWGRmM0ZpVDVqT3c4WlVZN2ZSSG5nU1dBNGdPSC1jQ3pxdVRveS1SLVBZZnE4WktHWUZjWE1XVWlBVzRXbTZidkhZemFXMUN2RVlITkt5SVpfZGJzNjBRY2pTUmdDMzhfdmw4emNIU1I5NEJUYUlES3hBcm5ncy05RVUxVC1KaG9zODJMV3NsN0I2dlV2dGlsZXZEOXI5bnRpM2IzY3BlM3hHYXliWkxYLTRaa3BFSXJraWV2TC0zcnBNSzBhQk4wbWE2dGViOUJlNldWSVJqSFdRa0x4dkNFc2xSVlItWTVSR0VjUUdPN0h6bmRxT2dKSE1ncEZjUXI2QW4yMHZBc2FmZ1ltYVFNdi13REZlZWlNZWdGUFloNENpcU1STmcyUXRuSzJHdDlLTmFYZFQ0NnU2LTBBanlpLXlmLVg5Y1d0U0ZsSUVaU2JOcWJldHptUGZ0OHNXTEV1OWZoZzZLZzdwRDdiZlYzNVZxdE1McENGYndQZHoybHREZUQ1Yl9uMFdKYnozRUlXZ095ck5zNFptdTBlU3YxOXRoMklGVmlsZ0czZmtZNklYMlBQbkxKa2dWSHNpZTRrMDdpcUFteUI5SFM1WExzbnkzZmUtTzF0cmFFRU0tS1FoRTlrdkJaYlNmWnBmQ3B0aHIxYkdLaXZZdjg3R190WlB3R3ZySTJKTG9NaHJIcURzSmhNZjNma25aTFRoZTVUQzdPbnhOdTMtbkpRa0lrR3NJLVNJZFZzTDRyV25NYW4xNWowZ0Exbmd5Z0VPQkJqUU9hR2ZtLUxYOUREVVJFYnNjQmJheGNwZHBtOHZCMU5KRTRza3psbVI3NV9yb2wwMFdDeTJ1RXZscV9pTGF1dkp0RzZoYUhjbm5oVC1XSjdNMUJZZHdpbFp6VHdkUE5PVkhBMlRjQ3U4MEhrTkZPcVMwemhha29CU09VOTBPTDBfSkltbTdHcko2V3AyRmFGTDVvQWNYUVhOTEtKc2E4dXRpcHR2SG1IbGhNYkRQRHBiMDVEWGw4cXNKMGx4TmN0NUpwclpFdDgwaWMzdC1xYWNHR0U4UFd3ZENpczUwd2pHRXZCeVgwT1dXUmt1TE5hMVAyOW9KVl9FYlFZcEMzV0hkaFNxMnFBZnRtU1FmTDlzY2k1emdCZnBBdXRsQlpWS2xJQ0UxM0FoeVdnX1RGby05bTBLVVp2cmh3ZncxWlpobWZZNlJsTk9aUTJ1SWl3WFpRZ0t6bnpEZFY0UnZuSjhZM2sydjNFY2wxQnBPbllGZUpyT2ZJTVhoMnFVZEdZVmxCY1RkdGFaTDROeTNzY3k1dkhHN2l5bWI3N1Z5bjdUU3RscTg3U0c2c2ZvcXdqUVRqdFVHVzh1ODhfYUpTNmpsQ3loeTFnUVNZTU5keGhvUHowV0tJU29SUW1ZWG1aVDJVTGJtUjZZZ1RJUU9YZUpUMkEzZ2RLb3NOZjZqNERCYUVFTmdwODZGVk1DQ1c2Z2h5TS1VRmZuSU54WVhqZHZoQmZfOXJTRDI5bFRWRzNGeEktdkR4cHhKd094dmFxNUpMUjVrdmpuRXE1Z29zYzM2eGZKakFyU2NNTng0ajFmajUxNEdtNnZBcVhoMXBsb2lXS3NoVkNwaW1OSS1nQWxJVEJidGlDc2lINWFURVltdEp4U0ZrSUhhaHJzOG1GZWY4Nmhjc2tCc3N2UWhmazlRaFhPbGpJalpETzBJbm5EUUpEcnhnZzZqUzc3UlhGNUM4eGpZNGtEMVFiV2o2bUJweS1HMi1RU0pqcmtWZURYUkFHSDdsU3QxUHM5ajlLZGF1NWtfQ2ZPSEFvbkU0dFBadVV0ZDBxTzY3a2ZoNmozN1lweHV1MU16VnJQem9aS2tpenZuS2pTNmRZZThPZnExZlZHU01qbWd6R1hyRENFeDhjZEIwc1B2Qnh3VHVWczRPc3ZNNWlteEg5X0FyQnRNTGY0ckJoZUJkOVRiVkpjZ1Y3aVlWMlhDTi1wdVRSTVkwRzJmUDd0azR3a1J1OUdhLUkyd2JVcHFhcTdBdkhXSnpYa3FNZlM3N3B1ODM3RGJZWWtWODE2U2FIU2lnMEdPX0RhcEFrZG1PMzFrWHYxbTlYWExxMU4wMDN1NW9TTHAwSTJMcXI0NF9sLTJBZjJOQWFBbWhiYXllVzZLWms4MldpWTZnNUJGY3BPdl8ta0J6ZGJmSi1CeWU2X1lUcER3dkk0emtuZkp1M2J0RjNfckVQM3ROVFhkZ0xyMEFHay1SZklJejJ0SkR0bWE3NzNZSm9OQjJ0X1VEMGV6RXgtaTQ4QW9jbF9yLXVnOXlPbEp1bGFSVnNZQVIwOF9yMXdfVThVRjNrOXBJc3hVU1NsNUswWmEyS3FmYnJZVXlwVW40QkZuWlpQQl9QNGlWaXctTWVFTWt5c1cxR3BYamtOblhWVzc4SWFxd0ZPWWpybUJzdGszcDREM3ZUMS1MdE1hRDliUTBoTFExUWVvQ2kzQXF5amt5ejdXUlVJTmZRa2U0M2t1R09YQTBfbVhXWkFndHlwd01qY05lR3NZVDI1Y1N6cHFwMzR4eDktNnU3UjdoTGxOWElieTdZTHdoa2NlSTV1T3NmNlNpcFBwTVYtQVhQdmM3UTdQSjlZOXY3TEVUY2V6T2xyMldvdE43WHFfUjF2N0MtQjhlSFVhTjQxQTZVbkVNV2M3dEtza1gxSFBuaVNWblBFZ0dsYktRYkFibU4wdmxLZUVCQWdQQ0diZ0dCUlhQcG9kaEJpcUUtYkd0eFBkNURYMmRxakRpcnMxOFg2ZXlNanpaM3JGNU5xUFJ4aVp1TlQ3TEV0a2VaNFd3TjdRUWtrM3ZIQ1MzbkJiZUNjd1hlWHptZk4zRmVSWGxyWjBhRDVCdmNXZVllaG5aYXFQc0tEZHVxSDNhZ1F3Uk9qSXd4ckxkN2xwbkpKZk91OXFDRFl4VVhOaVdxS3BZcHk4NURrOGFqcUt5XzN3c1NRVGJQVmFmZng2R2o5cUVTc0g5QUd5dTNBVndSdXpSaElHVm5BQkF4VDBSY3lLNlVEWV8xd01vRnhyNHdVUjhPejVldUJUSTBycEtnQ1lUcG00NlhVTVA2OWFncDdXRU83QkZkNWNzOHd0SFJsbzhvVmtDN0FQTjJvak5GRXZ5NWpaX0tPbmdRYk5wUXZaZ0ZBcGFNZVI1MVRwMkRXRWp1UnZUTEVWc0xMbFV1ZVdVSVVwbTFuaDhBdkVVUkpUYzZaZjBxUExva0p5UVZ0TDFUXzRmRnlHTHlUaHphTDFiMUVkOWRqZE55YXV2WDdhT0IyMF9ONThlazNXakVfcEtaNk9paVY1bTBqMS1RenZrdDZNVWlxeXM2cnZYRlFIb2xodEYyc0JEMFRxSGhGMlE0Y3ZJWEZEdHo2dzZrNENaMmZyMVlCaThFS0xOZzRoUUIwNjZfWGtyUUM4bmE0T0VUakhxMlI5Z2xMZGVvNWZlZ2paTzk0eVJiUXpsQnRIM3Y0TG0tOS1TYXJ6Rm1fYVhlbmFZajFtTUhwMFNjZWlidy1oeHVkZkc4b0tJTk5EN2ViUG9RbnRNQ1dPbnR3LXZRWW5uUjRZQU55ZEk3aW5wY2NJNVJQUENtVmh1UFBuSVBoX2VUWFp0N1hORVY0bldyRUFmRlBGbUUzR2JYakwxV3RKZ3hxQ1E0Rk55dWFaa1ZtMnFXeVp6dlA1aUpVY3BpNExrLUhJTU1iZUQ2X25FaGJ0NHNYS096dFZ2ZDUwVUx1Wnp6M1Bsa1NBUktIUXVoQmI4US1NSzQwMFpaX1NhZkZKdEZ5QkpIckUxLVp1Z3JpbjYtX1pabk1zLUZWanJKTEtMUGNoOVg3Q2R6dGhLYXJqOEhKaTNNMTF5Z3BBU25TM3NndDRvMURtTDhCRGpnTUx6Ul9kekNPeHpRRFJhU192Nk5jbzRGbXZPUzliSS1xSHlIRWVEOGQ2cTZMbER3WlVkZFZhcE81ajl2RklHT3BSRWowLUZrbXFncVBMSkNESXBTQldQU18xVExPYkFLVnlBb1NzcXdvODlnY2ltTHhLQkFiN1EzaWNIalNrV3gwbDBGSDBwOU5hUDJoczZVT3pxUERJYXhDZjIwRFZLNGRQeVlhT3FFY2V2NVkwTmtXUU03dlNkTHJhVXVYZ2tiM3Y2NlRBZFV2cTAtZ2NGR2l6d2RrX2tldzN3am92MFloMy1PY0thdzJtTW5kSVJoWnBpRG9UcjdIX3ZQSWs5Q1Q5TlFyMDViVm5TOERaQU4xVHU3QzJORDU4ZzEwa21tTEFWZEhQT1FFMFYwLVFlOTNVNTdDX1hQSjZ5UlpwOV9UbTlaajlBWFRQNHZUN05sejY3clZ5SmlqUml1aVdib09VckdPWFRubjBHUmxrN0V2UlJvUHNuNXFmSU54OVNVczUybW1JaG9hTGVPWnduV3FYWjd4bmhoT0dxQldFRzNaQVpURm5kN1MzV3QtNjgwWGhoWVZCSHBIdUZfRFhrTVlkbXJhSDRUVXNaMDVJVUthOGxPbHVLWFVnT09TX2N5OWphN1F3VDUxNm1RQUFtcUI4NDdEc29ldUx6elBLdFFkckl0UkpxRHJNbHdWREtTYUV4eDItbzkwZU16RURDNTNFdzRJb1d0N3hOVks3MVEtbWpSQUY0d295WDh3TWJsWlZRSFVpSVNNNWRqdmRfTU5GeVhqTTUycDRNbDd3NlNlQndnSmxRYjdQRldiX19pZGhFRFNWY0FEdHNiLWt1UEZMOFE3T05adGc5ZkxZRzNxX3pROG4xWERIR2xjdjJDell0MnY0WUVDQ00yZ1lkelhyVktmdHJrRWxFRDZCZDNwWkdOb21lVjI1cG5VcnVxekxnamh3U1BmMmlhamgzeUd6X0NwdmRtQVEwdTY5eGNMZEhtNEpQdTZyaEh2eWRBb2lvUktOVkZqT1NwTDBRMXZPaWNuUVR0Wi1XN20xdm85N0tGZEN2OVZtS005cjRidUZLa2xvMjRac0JXaHRCYmxvQktkUmE0eE9sZTVMTHdiOUM1MnY4dm81cWxITkNKem9fTGNHcFBNM1JKNkVrdmlNRFA3cEJ3cE95ZHZRSzJDT1lSaDdBbmZYcEtMOEM0YTBKWHlueWpYRDJWdXNONWhSTVN2bDM0ZW55b09EVmRwam40bFFNRzMtZWtZOEFDV1ZnVUJLYVdueGx1SDBROHdKS19YVTJFdWZ4aDRGMEhucXN5R2oyTEphaU82dWRqdnRjTkFGTS0tN2hmQzNMMGstMFJmWVE0blNHcVpaclp6MzE0c0R2bmF1NV8wWXhPVXVBLThRZmJGZTZiWXFpeWxoU2Rza21kaGlBbzg3NW5DZXhjZnlrSVpCdnlIYXlaYVo0VXkwZDhvSE9RblNsR1p2Zm4wcVlHaV81TVhCMmFFZXp0ZmprUmYyVHVheHlYenhvYkh1LTJwT1JraTFZa2Q1TFAzX1ZTbzlnbXp3cERjdWdycHM5cHZPeFdZOGY0bU1KMThiWVM0TzBvQ0ZLa29ieFkxc0xnLWxCYmxFMU1zbllfR1cwSm14M2RLSzJUYlNoRmNGTUJPNUh1WURvcVdyM0JILUJIS0lPbHk5U0xnS25sTkZGSFUyTTFEV3pCTWhLb0pkM1hTSzZ0bndEWkpGby51dVRVYXZaQndQbHJ0VWNGWHc5LWdoZm9kaDE5b2pPbmJkX1gtUFlHMzBn\",\n\"lastused_at\": \"19700101T000000Z\",\n\"group_id\": \"929a4dab-363d-4f1c-a197-46fc8c0c1251\",\n\"kid\": \"037bef5e-9a2d-4820-b120-02b9b036996d\",\n\"never_exportable\": false,\n\"name\": \"B7E2D3C7D1041342\",\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"bef7866f-194b-452d-83c9-1c2bffe01a3b\"\n}\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n### Recover Key operation\n\nThis operation will recover a deleted key of Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `recover`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"recover\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n[\n{\n\"attributes\": {\n\"created\": 1593587492,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KeyType\": \"BYOK\",\n\"KMS\": \"SDKMS\"\n},\n\"key\": {\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\"\n}\n}\n]\n```\n\n### Restore Key operation\n\nThis operation will restore a key in Azure key vault from its backup blob value.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `kid`: Response `kid` of `backup` operation\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"restore\",\n\"backup_key_name\": \"backup_key_name\",\n\"key_name\": \"key_name\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"key\": {\n\"kid\": \"https://kv-sdk-test.vault-int.azure-int.net/keys/KeyBackupRestoreTest/d7a019f5da8843aea30722a7edcc37f7\",\n\"kty\": \"RSA\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"v6XXEveP0G4tVvtszozRrSSo6zYDOScH8YBVBBY1CR2MCXBk-iMnKgzUyePi9_ofP3AmOxXx-2AsLC8rxi6n3jQNbGtIvQ4oMdUEhWVcVkmwdl0XyOouofEmIHeSxRg6wXFG4tYAKLmKsO9HqmU5n7ebdDlYngcobc1xHsP0u8e0ltntlgWBlSthmY8AMKW9Sb_teEYhilbkvt_ALr00G_4XHmfq7hSOZePWbGSWQW6yC7__9MrlDfzaSlHyBIyLppPEB7u6Zewrl_eNJWoUVrouIGA32qNETIOr_wxXRVGKoerTt-wFC-CXPn30W_6CmKSxoFBNvnzijg5hAU9V0w\",\n\"e\": \"AQAB\"\n},\n\"attributes\": {\n\"enabled\": false,\n\"nbf\": 1262332800,\n\"exp\": 1893484800,\n\"created\": 1493938217,\n\"updated\": 1493938217,\n\"recoveryLevel\": \"Recoverable+Purgeable\"\n}\n}\n```\n\n### Purge Key operation\n\nThis operation will purge a key in Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `purge`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"purge\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n\n```\n{\n\"body\": \"\",\n\"headers\": {\n\"X-Content-Type-Options\": \"nosniff\",\n\"Date\": \"Fri, 14 Aug 2020 08:01:39 GMT\",\n\"Strict-Transport-Security\": \"max-age=31536000;includeSubDomains\",\n\"x-ms-request-id\": \"e9851042-6210-474d-b9b0-706f600aa5d4\",\n\"Pragma\": \"no-cache\",\n\"x-ms-keyvault-service-version\": \"1.1.31.4\",\n\"Expires\": \"-1\",\n\"Cache-Control\": \"no-cache\",\n\"x-ms-keyvault-network-info\": \"conn_type=Ipv4;addr=216.218.139.205;act_addr_fam=InterNetwork;\",\n\"X-AspNet-Version\": \"4.0.30319\",\n\"X-Powered-By\": \"ASP.NET\",\n\"x-ms-keyvault-region\": \"eastus\"\n},\n\"status\": 204\n}\n```\n\n### References\n- [Azure BYOK](https://docs.microsoft.com/en-us/azure/information-protection/byok-price-restrictions)\n\n### Release Notes\n- Initial release",
                "commit": "3aeef3b307130de1364f066324b99c2f997f50ea"
            },
            "2.0": {
                "path": "azure/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n### ## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure key vault\n- List Azure BYOK key\n- Rotate key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Backup Azure key vault key\n- Recover Azure key vault key\n- Restore Azure key vault key\n- Purge Azure key vault key\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS.\n- Create a Key vault in Azure\n- Add the above app in the `Access Policy` of the above key vault\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create Key operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and in Azure key vault and return a key ID.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `exp`: Key expiration time. Accepted format is Unix time.\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"exp\": 1596240000,\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"updated\": 1593587162,\n\"exp\": 1596240000,\n\"enabled\": true,\n\"created\": 1593587161\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/12860b1156e448dda3a5a3fba9b19a4d\",\n\"key_ops\": [\n\"sign\",\n\"verify\"\n],\n\"n\": \"AOWMCffn25U5JFX7M8zW-ncjOOaVuVPBFSI6Ae_N6Nl9Uzn_2Y_DfJX4gjaPRNcercZ8Fib7WzF_UwZPU486D7lqB8_YxP8F9WyM8cOYgT1KL4KdRh-6-dstQ9MmVp06FmvV2E8T7njY-Ds218gHW4eXA4UWeu2GXrClKmD7ADkD\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\"\n}\n}\n}\n```\n\n### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Rotate Key operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n}\n```\n\n\n### Backup Key operation\n\nThis operation will return encrypted Azure key vault key.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `backup`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"backup\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"activation_date\": \"20200814T075259Z\",\n\"key_ops\": [\n\"EXPORT\"\n],\n\"created_at\": \"20200814T075259Z\",\n\"acct_id\": \"d97b7540-052d-422b-a6a9-017517f221e9\",\n\"origin\": \"External\",\n\"key_size\": 75000,\n\"compliant_with_policies\": true,\n\"public_only\": false,\n\"enabled\": true,\n\"obj_type\": \"OPAQUE\",\n\"value\": \"JkF6dXJlS2V5VmF1bHRLZXlCYWNrdXBWMS5taWNyb3NvZnQuY29tZXlKcmFXUWlPaUkwTXpnMVlqQTNZaTFrTlRRM0xUUXlaVFV0WVdVNVpTMDJNVEJrWXpNNVpHWmhaamdpTENKaGJHY2lPaUpTVTBFdFQwRkZVQ0lzSW1WdVl5STZJa0V5TlRaRFFrTXRTRk0xTVRJaWZRLnVHUzdEaWtOa1BzZ3dqb1lmYnltYl9NVnM1elpOZERzR1E2STdJVEx1Uy1IbHd1UXpoYkw5NjBfRzV6a1o5MkY0NnppV1FSWVJDS2ZCY3IyRWpoXzFkRGlkOTFQN3M5QVdNNlZsNlVHSEk2bjJ0Q3R0djlDRkw1U2trSm5YeDNkZllHcEVBY1c4amlrYUlVendBMjc3OFVBa1NlZDY1S2VYUXhWR0poenlOX1hPZVgwRWZtSlZnaUZrSmRrM1k2SmFmRzBjWTdTZnItajZXZzd1UHVOT1NPZW1Lb25pTW1nWDRjeUNpSnRvQzFVNG96eDk0UUdQblhETXl4T2VYVlFOeXl6cUotZndyQldMUUZUdFN5bmNlYnJGRGdwc2plcGVuWVhQbnkxUU1qVXN6MXlEOUpqRjgxdXcxUDZnNVl3LThyckg5ckVhY3phQUNpUzRKNzVIQS5PbHhKakZTZDdIWXRtX0dUdnFPY1N3LkNQVThTRjZUZDI1Q0oxNnZEQ3dQOVdJczF1bTNKYkpadTQwRFdPZE1ibzJDdEM4aVVzdk9FSE9BemI3WHFkOXJTSThSNERuTG5maEVnSHRfMnZkcUV6OXBUY2pldlhuRnBkbGdfMDdsc2xScDdJNGZEcm94LVhlOU9nMXhWRjZkd3JqUjdpWE9URTVFZjVvYnk2Ums0NkJSZG1TNHV3S3U1Wk9KLWVKQnR0WmFNckgzVmdqbkowUFpnaThFQ1NWOEN1ZFE5R3dvX1Z3R1FhTHZjYVhnNWR6SkNYdlk4dkY0eU5wZnloYWY5RnVtLVFLYzNrYnNsTjhKR19vMFNjZFdKdWh2d2JIc0VRQW9zZ3JFQlJHQ2tjcG12U0xJd1Fja3pUTmVmemJOTGwzZXVXY3JJZzgwSmM1VkdfSFRGN3VDNXV1Ry13UnVfblhUZ0hPNFFWVnVPempZMmgwZ3djdjk3TVZSWjg5OXA0NFM2ZDhZNUJZNXJmbkhvUXh4U0Q2cGJtbThxcGdwdDV6cmd6VUtKaFNNRWZ1X2xpOE5nM0ctVXFLSlZ6alFmUmw5OHlLbGdPUi05VW5DbnZGUEtKYzN3RmFhWlVhV09hR01USEoyeXkyWGJJcEwycGJCUTEtRURHNmFkZERwYi1sNEU5Z0RpVlZvQkVGVVVwbzNwQWNES3N0bEloSWQxNzlBMUhjQ0h3cFFYeEVTb3E3aUpOUkJvbmg3cmtoU2hVQjFfR050U3RaemtBOXF1Q3B5U0twNXhOcEFZdlJaOXlod2JhZzZfSkJMZXRiT3ZIVmtQT1lqSTFheFlVWm9YMGhaRHZFc2lFcHVoNjJGUDNqc3ZDMGFQRUFNdjhhb0ZXQ1h0UF9VYlp6NE1xZC1mbnA2S09YYlNBeDVDTDR1emloTHI4RndUZkxCMXhxSlEwR0cxNG9qSnlCQ2M5WjhmN3NrcmFOWlpXNU5wRkRSdU0zTWZCUmQxU3N5Z0xuNXZkZnlRajFtXy0xTUtpY0lQSDJROWQ3eVhNWnE4N0lJMDBlNnczVVFIUGxUd25WUnNWSDFkRGg0TWhvdGdkakRqWC0tbGhGMmhCZTVFbHgycURkN3FEM05TTGNnVFRnSW9JRXhWMkg5OHNpUVBjeHc2RDIyYzZfTndtYlNtLU9XeGhaLUVZSkJ4c25NQjV0UFNWTkUxY2dGZnBRSE5KN1R3bVA0T2JCV1dmR2VDZjlEbU1DOXJuVi1GX2k1RTMzWUhpXzNVbWdEM29aZXhDOHJjVmFPbGdtc3pWQnUySVR2aEJabXc0S3ZKc2MzeTYwSDB3N1RSbzNFWXpTbnpmWVc0ajQtOU9GRmljMjU1SzFzdURVbmpkLU81alJkd3NaNk4yOU16MWFFeS1uTTdiTm1aNl9TQ0NxMFJLdi14MVhfVW5TQUNIVGJNVUFNTFhHNkhRaVlYZGtqUHNtMk9YTUF1cXB1VDBqWUJsTWVmMEIweEJQVE5QWXlxcG5DRXRxcmRIWTBxdER5TzRQTmU2dHpOYWxUSTBPVk1qN2NZTmhxQ3pqQW14OEk0QTd2TkcwMlR2TE9sSVlTZXVTN2R4dHFUemtPNVEwaVJxMVVwdUFJemJjOElwV1EzZkU4eDZva1ZJOHBWZFpocGcwbF8xakxCNE5FZExMMlFOVEVSZUtyUzc0SDlONE1hTFlEY0VtU2JScTFVM3JZQTNhZy1JNGxaQXEzVmNjdHp2WVZnY1l3MGM3U1E3NEo0eWd4OERYZDA5S00yMmpiZHdvYkRyWms4Y3I5aTJkd3lfRzlEU2d3XzZOSS1wbklDVGtkVU9IdlN3b0w4R01JYmd5LTl0UGtwSE9CRXBDaHFzaUpVRXU1VG05b0lwM0wtR0FzeTVjZ0ZHMmxUV1R3dGlzRUU4aXZsNlNXWjVVSHMzZ2JKTjcxUExMbkw5cUlneW5Zem1YckdvSkdkT1lkZnVqVWthT3RCNmJSWWpnZnVJSlZoN3lSUVlfOVpJVGczVEZTMTlFYzFNOVR1WVlaZzU3ZjhHWEJUXzFMSkZDd09JMmJ1SEh1cDNiYU9XbWhLWEswVm1NNGF0OXp5SzJiS21oSHRVLWNLb3VudEtUTVVtTmFNU05ObnJGRzlmZ0FiLVNMTjJROHBwZnpGOFJYajlTM0lIVmJfSldFNmY4dng0MDRvY1R2VEpUZFpvWGxwamtKdjd1d3Q0QVZldVhmZ1VqT0c0dkk2SmZMTnJMNEVhU0pEQmViR2Fnc0xXOHlkR2F0dnRnem9zYXpRUUhydWdKS2U2a2IxRWNtSEZCcDh2azlqWGtSY1JsekVZSktCMVdGejRvYmhPTllLbEp1YlF3Y3Z1Q0xqM1NmVDBVMldYSFhJWjNMQU5UczJkekFabWNXaEwtbTVUdWpsR1BQUXg3aVgtVXlSZWhPc1BEVXA5WnFYVmdQV1ZWOVdNOHlXeVpRTmx2MGxkdml3aHljd0hSTElEX25lcEg3NlBSeThiWUlGWUZGRHh0dXNadjlqRXA2d19YQWZiQzNRNzctaWRGQ24yaUxLbHZGbkdiVGxCajd3RlFJaDVLaWFEX0JDOW9hVGJTZE5jajVPNmRtMG5QVFB4T3pNTEt3clNxSHF3dWY4Um9SZVg5d1VDR3hmWE5jNkF3UjhheHJwWXlQUmhZZUJxdWtRSFFaYVFQclhMYkNWNUZxblRNM2tsUm8zNHJ5R1hHMnBweDFKNldBWmRFc084d2x2U3NUUjU5S3h4Q2FKMEExckJQblFxUUNsR1ZnZ0dsM3VjRjBDdTItdXBGTWtleGRTOWJ3T3gxZDN6SFJncmtWVks4eE9XRGNvMl80OWpHVnlGT1hQQkI2a0hPcWR2d28tYXRKTDFZUmFTSUEtbkxPbmF5bXBsMlZzZDhrd2lnQ21SV2R4a1FUME9kSFBSQUtZbFBKNkREU3RubVBIeWFpWDlCbUZ0TVh2cWNMeG1mdE4yTzBaZ09mdUV3bkRXZFNUdGhCVUxSNjd6czJkZExwXzYwSVlNSEpRZDFsSHQxbl93akV6TFlOU253T2NGdG1xQkQ0T05ib3lmWGNtVEhwc0c5T1l1SC1uODVNMWF3UEFRaGRZWURWY2lOdTJhRlRPYXcyM0FSbXNYQTNtQlpjNU1LcS1rZ2N6R1VnMlIyTjQzbUVVZFpoWXV6Y3NMSEhkdXA5Z092N19iZk5rcmxMWEl6Z3NoMERRMjZHTnhVNHd4aUZGRms3a09xYV8tR1NOcWRDejdfUUl1QUFiaXhZd29MZU1rRXllVHVzZnN2b2tjMURUTUJGT2otSkx3VGdiVzZFcHhZeldZTDVNZzFhc1ZjRTBncVhUSnlSSHJhWE85RjRMMTNNclQ3TThSTnJEQy1Td2pkLUhzdWVpamVYbmVLSTREOTlEUUhGUnpVVmFWNUNuT3BHSktYOUtELTR0T0g5eS1HdHIzQ3VTWkhXRjRxeFFPYURTWFBrYm1idTJ5NGoxcHQ0VnIyWERJd2IxeGphdVVtLXVvUDJickg0a0Rkbm9wS0MyZmNfdVpwR1VCcEpfMDJNM0NSajVGQ1F5UFpQUTMwdlpybFllaE9RZnNSOHJ0c0phSnUzWDRNUTFRX0JLeGotNWlXbGNjMHJEVDUwYWNkN096elZtREI4RDg0QlNKdmwxNjFQeUxUN0FjcURRODNOZUFoX2RCeE5MQV80WklPMUlTc2Z0d0VjMlRNNDlMWXJ3NDhia2hTTU1qWjF0T0lrMEs4R3JOYzVPM2V6VDYtTUVPWnZralctV2F5N215aHJ5V0Rxc2ZCaTc1bTQwbm1qUUFMeEVBZ3ZMRUs5M29GbmJpY1l3NlpNNmJ5V0ptUkpucmxjNldpOW9DbWkxTFhCTlRIQndhMFFJSURvcXFHSTlmdGE5Qld4WE81VWQ5RXVlZkE5blNNUWw5WVZQa0szejVJeTd4TEQtY2NReHZyYUFrYi0ybHNkUVpJbDVGYzJFRjBUTVlBT3RSMWJBMXZXU2tEblkxNXg4bnpoZVFLTmUzdk5FMHhvWXp2Nnh0TldrV0pjU3NzUkw3Mmp0UnAtajh4OEZIaGhGQ0VvVGRsVTB5RnUxcXdmQjdfXzkzeTMyWUhSZ1V3dTFVUWZIMklLYnZVbjhZN2pkTDNSX0xUUEQ2d1JIS3l4SzNQajFNbi1YaFEzTW9SZFJIQ09xN2w3djVoVllhZF95SnpjMUhVcGxjSTVvb0VBUkU1TW1rSl9abm9sbmZ3aEVPZFB6TTFXVXRYMl84SzFoNHlGRUNaNThWdHRyaG42NTVrXy1MTHNoYk1KUVNKT2tkLTd2YS1od1R1eFliRHd6NElwVTZqRUo5eU5fSHdYQy1wemdCTkRkbXNYOTJndnI2MjFtZ1p6UTgyQmRjWHM1MWhNMHhfWUl4WkkyUVctTk5nNVNWNG1KNVdsbWFjcEYwNUFxUnFST2JLbndpNEthMmhFUWg4TWhDcDB5VDVCc0Y1V1pCOVNRWW5vVERCcHEyamYtNGRIeUIzUkFFNktwODdKbE9STE5TaFFqcEwyVzgzRV93RWRuOVdDaGpyTG96bnhVbUttRXp1alE1VG9rNE1yZ1VwdjZHdlBVbm9PWVdHV2pEZ3BGZTlxYmtWcUpQZGpiUkNIUkczTEQ1OXZOMFVIaml5U0FxcXJzQ2RMSXVJdzRWcVZNa3ZjQS1ROEhfNjBwMDBfNWZld29EeWc4NHpkVlNqeW95cjZ1ZlZWa3kyMjBLQnhnQ3h0OFhRUlNONDN1Yk1ZV3lmUXFXTUN2MmxKQkhIMklJblZPQTY2QVAyX1ktZ2NwcTBqQzJNLUE0YUx0LWVDLU4wazRTdWRZQUFxejhHWDVvMUZnVkZXbjFLQXB6N1RwaTJQcnUzOEY5aFJGaHRacTRHVWpCeVp5M1E2QlpEVkxBNG5UN09Ka19DUFVOZ1pXY25RdTFIUW1za2JQczRiRkk5Mnh0Z2R4N1hfZlNQajB1RnAxNzBzYlBHTk1Db0NBQlRXSFBfRjNLMlJObjdrS3ZDRWVqMnRLMGZRcUZjWWVLa1piWGxpUzVGN2d3dWFkLWhxdFg4SmlNNmVqcnlTeEFGRGREYTNwWG8zX3NBbVhIaHZqUDlfbzBNNVNoV0k3OFVMUTY0V0pIVTAyZWhuTVFDdGlIUDg5RkZWRE5QaXhJRm9wdEdrY2FnNkl5QjFHbDZaMGVtOUdURVU0YndZODZ3Z2l0dThEaER0ZmhxemJUSXpKeENkTGxwTWVjQk9EVEFNTmZmUXR2am15STBSR3NXLTFzZDBKNzBKcmR4aldQSVNhN3h3V0E1cVZreEllMzZlQ3Jkb0JDQTlTeThDWEVIaFJXS3J4QXNwb2k5UWc5WjRnR0RsdDVlTGdpYk9UNnNDWTdpcFlZT29NVlI3RS15Vk9ydUJDemF1d1BBMXhqRFRsNTRwNGo2ZFhoTkZNVmJhQlRseGtyUmJUeGlYSkNEYlA0ZWpxWHpkTmEzOFU1LXRQdW5Bb3p4TFRwZnBrQ3pReUF0SnZfM3liZ19QeTV0d015MHhzLVE5c3pMUXpQS010VHZsNjc4VXJ5VUhwVFgxUmp5RFVKN2p3R3NNdEt5ZXVIdWlpaEx3N2VieDF1QUxNeUxQV2Zmc3FhcjBCRnpGdS1lMTlPM0d4R0ozMm9iNFBDd3VUVWROYVRtWUJmaTdqMmNHNGY1LWk0SlQ5UDQwNmd3cTUzcWdwSUtGSWlTME1SLTJ1MzRXXzRVdjNVVTUtSGNkekg5bjlIMVpxTGdINlVmSW5pTDU4b2RMX0dxc3dEUFE5SGdUZDRyemxHLWFqOWMyUHI3XzJYbGptSjdQcWlzck5TYklmVzBESFliZ05vY1ctRm00X3lUcUpMMkpJc0NCWFVwcV9nZUlObTFpalIyRW5mMmJUaThyUG1SVXk4cEtfcXdOTkhrVk9OWl9tQjBfYTBCOFpLOHcyZ1VwbTk0ZWxPTHloWFhKb1pmQ2hiM3I4QnNvZDRzc2twQVVlYXUtTGZMSDRFOVBzTjRNd1ZhWXpycHItTGtlYy1XUVlWLXpxOG1rN0xsd3dTdnVhNnliWHBJWGRmM0ZpVDVqT3c4WlVZN2ZSSG5nU1dBNGdPSC1jQ3pxdVRveS1SLVBZZnE4WktHWUZjWE1XVWlBVzRXbTZidkhZemFXMUN2RVlITkt5SVpfZGJzNjBRY2pTUmdDMzhfdmw4emNIU1I5NEJUYUlES3hBcm5ncy05RVUxVC1KaG9zODJMV3NsN0I2dlV2dGlsZXZEOXI5bnRpM2IzY3BlM3hHYXliWkxYLTRaa3BFSXJraWV2TC0zcnBNSzBhQk4wbWE2dGViOUJlNldWSVJqSFdRa0x4dkNFc2xSVlItWTVSR0VjUUdPN0h6bmRxT2dKSE1ncEZjUXI2QW4yMHZBc2FmZ1ltYVFNdi13REZlZWlNZWdGUFloNENpcU1STmcyUXRuSzJHdDlLTmFYZFQ0NnU2LTBBanlpLXlmLVg5Y1d0U0ZsSUVaU2JOcWJldHptUGZ0OHNXTEV1OWZoZzZLZzdwRDdiZlYzNVZxdE1McENGYndQZHoybHREZUQ1Yl9uMFdKYnozRUlXZ095ck5zNFptdTBlU3YxOXRoMklGVmlsZ0czZmtZNklYMlBQbkxKa2dWSHNpZTRrMDdpcUFteUI5SFM1WExzbnkzZmUtTzF0cmFFRU0tS1FoRTlrdkJaYlNmWnBmQ3B0aHIxYkdLaXZZdjg3R190WlB3R3ZySTJKTG9NaHJIcURzSmhNZjNma25aTFRoZTVUQzdPbnhOdTMtbkpRa0lrR3NJLVNJZFZzTDRyV25NYW4xNWowZ0Exbmd5Z0VPQkJqUU9hR2ZtLUxYOUREVVJFYnNjQmJheGNwZHBtOHZCMU5KRTRza3psbVI3NV9yb2wwMFdDeTJ1RXZscV9pTGF1dkp0RzZoYUhjbm5oVC1XSjdNMUJZZHdpbFp6VHdkUE5PVkhBMlRjQ3U4MEhrTkZPcVMwemhha29CU09VOTBPTDBfSkltbTdHcko2V3AyRmFGTDVvQWNYUVhOTEtKc2E4dXRpcHR2SG1IbGhNYkRQRHBiMDVEWGw4cXNKMGx4TmN0NUpwclpFdDgwaWMzdC1xYWNHR0U4UFd3ZENpczUwd2pHRXZCeVgwT1dXUmt1TE5hMVAyOW9KVl9FYlFZcEMzV0hkaFNxMnFBZnRtU1FmTDlzY2k1emdCZnBBdXRsQlpWS2xJQ0UxM0FoeVdnX1RGby05bTBLVVp2cmh3ZncxWlpobWZZNlJsTk9aUTJ1SWl3WFpRZ0t6bnpEZFY0UnZuSjhZM2sydjNFY2wxQnBPbllGZUpyT2ZJTVhoMnFVZEdZVmxCY1RkdGFaTDROeTNzY3k1dkhHN2l5bWI3N1Z5bjdUU3RscTg3U0c2c2ZvcXdqUVRqdFVHVzh1ODhfYUpTNmpsQ3loeTFnUVNZTU5keGhvUHowV0tJU29SUW1ZWG1aVDJVTGJtUjZZZ1RJUU9YZUpUMkEzZ2RLb3NOZjZqNERCYUVFTmdwODZGVk1DQ1c2Z2h5TS1VRmZuSU54WVhqZHZoQmZfOXJTRDI5bFRWRzNGeEktdkR4cHhKd094dmFxNUpMUjVrdmpuRXE1Z29zYzM2eGZKakFyU2NNTng0ajFmajUxNEdtNnZBcVhoMXBsb2lXS3NoVkNwaW1OSS1nQWxJVEJidGlDc2lINWFURVltdEp4U0ZrSUhhaHJzOG1GZWY4Nmhjc2tCc3N2UWhmazlRaFhPbGpJalpETzBJbm5EUUpEcnhnZzZqUzc3UlhGNUM4eGpZNGtEMVFiV2o2bUJweS1HMi1RU0pqcmtWZURYUkFHSDdsU3QxUHM5ajlLZGF1NWtfQ2ZPSEFvbkU0dFBadVV0ZDBxTzY3a2ZoNmozN1lweHV1MU16VnJQem9aS2tpenZuS2pTNmRZZThPZnExZlZHU01qbWd6R1hyRENFeDhjZEIwc1B2Qnh3VHVWczRPc3ZNNWlteEg5X0FyQnRNTGY0ckJoZUJkOVRiVkpjZ1Y3aVlWMlhDTi1wdVRSTVkwRzJmUDd0azR3a1J1OUdhLUkyd2JVcHFhcTdBdkhXSnpYa3FNZlM3N3B1ODM3RGJZWWtWODE2U2FIU2lnMEdPX0RhcEFrZG1PMzFrWHYxbTlYWExxMU4wMDN1NW9TTHAwSTJMcXI0NF9sLTJBZjJOQWFBbWhiYXllVzZLWms4MldpWTZnNUJGY3BPdl8ta0J6ZGJmSi1CeWU2X1lUcER3dkk0emtuZkp1M2J0RjNfckVQM3ROVFhkZ0xyMEFHay1SZklJejJ0SkR0bWE3NzNZSm9OQjJ0X1VEMGV6RXgtaTQ4QW9jbF9yLXVnOXlPbEp1bGFSVnNZQVIwOF9yMXdfVThVRjNrOXBJc3hVU1NsNUswWmEyS3FmYnJZVXlwVW40QkZuWlpQQl9QNGlWaXctTWVFTWt5c1cxR3BYamtOblhWVzc4SWFxd0ZPWWpybUJzdGszcDREM3ZUMS1MdE1hRDliUTBoTFExUWVvQ2kzQXF5amt5ejdXUlVJTmZRa2U0M2t1R09YQTBfbVhXWkFndHlwd01qY05lR3NZVDI1Y1N6cHFwMzR4eDktNnU3UjdoTGxOWElieTdZTHdoa2NlSTV1T3NmNlNpcFBwTVYtQVhQdmM3UTdQSjlZOXY3TEVUY2V6T2xyMldvdE43WHFfUjF2N0MtQjhlSFVhTjQxQTZVbkVNV2M3dEtza1gxSFBuaVNWblBFZ0dsYktRYkFibU4wdmxLZUVCQWdQQ0diZ0dCUlhQcG9kaEJpcUUtYkd0eFBkNURYMmRxakRpcnMxOFg2ZXlNanpaM3JGNU5xUFJ4aVp1TlQ3TEV0a2VaNFd3TjdRUWtrM3ZIQ1MzbkJiZUNjd1hlWHptZk4zRmVSWGxyWjBhRDVCdmNXZVllaG5aYXFQc0tEZHVxSDNhZ1F3Uk9qSXd4ckxkN2xwbkpKZk91OXFDRFl4VVhOaVdxS3BZcHk4NURrOGFqcUt5XzN3c1NRVGJQVmFmZng2R2o5cUVTc0g5QUd5dTNBVndSdXpSaElHVm5BQkF4VDBSY3lLNlVEWV8xd01vRnhyNHdVUjhPejVldUJUSTBycEtnQ1lUcG00NlhVTVA2OWFncDdXRU83QkZkNWNzOHd0SFJsbzhvVmtDN0FQTjJvak5GRXZ5NWpaX0tPbmdRYk5wUXZaZ0ZBcGFNZVI1MVRwMkRXRWp1UnZUTEVWc0xMbFV1ZVdVSVVwbTFuaDhBdkVVUkpUYzZaZjBxUExva0p5UVZ0TDFUXzRmRnlHTHlUaHphTDFiMUVkOWRqZE55YXV2WDdhT0IyMF9ONThlazNXakVfcEtaNk9paVY1bTBqMS1RenZrdDZNVWlxeXM2cnZYRlFIb2xodEYyc0JEMFRxSGhGMlE0Y3ZJWEZEdHo2dzZrNENaMmZyMVlCaThFS0xOZzRoUUIwNjZfWGtyUUM4bmE0T0VUakhxMlI5Z2xMZGVvNWZlZ2paTzk0eVJiUXpsQnRIM3Y0TG0tOS1TYXJ6Rm1fYVhlbmFZajFtTUhwMFNjZWlidy1oeHVkZkc4b0tJTk5EN2ViUG9RbnRNQ1dPbnR3LXZRWW5uUjRZQU55ZEk3aW5wY2NJNVJQUENtVmh1UFBuSVBoX2VUWFp0N1hORVY0bldyRUFmRlBGbUUzR2JYakwxV3RKZ3hxQ1E0Rk55dWFaa1ZtMnFXeVp6dlA1aUpVY3BpNExrLUhJTU1iZUQ2X25FaGJ0NHNYS096dFZ2ZDUwVUx1Wnp6M1Bsa1NBUktIUXVoQmI4US1NSzQwMFpaX1NhZkZKdEZ5QkpIckUxLVp1Z3JpbjYtX1pabk1zLUZWanJKTEtMUGNoOVg3Q2R6dGhLYXJqOEhKaTNNMTF5Z3BBU25TM3NndDRvMURtTDhCRGpnTUx6Ul9kekNPeHpRRFJhU192Nk5jbzRGbXZPUzliSS1xSHlIRWVEOGQ2cTZMbER3WlVkZFZhcE81ajl2RklHT3BSRWowLUZrbXFncVBMSkNESXBTQldQU18xVExPYkFLVnlBb1NzcXdvODlnY2ltTHhLQkFiN1EzaWNIalNrV3gwbDBGSDBwOU5hUDJoczZVT3pxUERJYXhDZjIwRFZLNGRQeVlhT3FFY2V2NVkwTmtXUU03dlNkTHJhVXVYZ2tiM3Y2NlRBZFV2cTAtZ2NGR2l6d2RrX2tldzN3am92MFloMy1PY0thdzJtTW5kSVJoWnBpRG9UcjdIX3ZQSWs5Q1Q5TlFyMDViVm5TOERaQU4xVHU3QzJORDU4ZzEwa21tTEFWZEhQT1FFMFYwLVFlOTNVNTdDX1hQSjZ5UlpwOV9UbTlaajlBWFRQNHZUN05sejY3clZ5SmlqUml1aVdib09VckdPWFRubjBHUmxrN0V2UlJvUHNuNXFmSU54OVNVczUybW1JaG9hTGVPWnduV3FYWjd4bmhoT0dxQldFRzNaQVpURm5kN1MzV3QtNjgwWGhoWVZCSHBIdUZfRFhrTVlkbXJhSDRUVXNaMDVJVUthOGxPbHVLWFVnT09TX2N5OWphN1F3VDUxNm1RQUFtcUI4NDdEc29ldUx6elBLdFFkckl0UkpxRHJNbHdWREtTYUV4eDItbzkwZU16RURDNTNFdzRJb1d0N3hOVks3MVEtbWpSQUY0d295WDh3TWJsWlZRSFVpSVNNNWRqdmRfTU5GeVhqTTUycDRNbDd3NlNlQndnSmxRYjdQRldiX19pZGhFRFNWY0FEdHNiLWt1UEZMOFE3T05adGc5ZkxZRzNxX3pROG4xWERIR2xjdjJDell0MnY0WUVDQ00yZ1lkelhyVktmdHJrRWxFRDZCZDNwWkdOb21lVjI1cG5VcnVxekxnamh3U1BmMmlhamgzeUd6X0NwdmRtQVEwdTY5eGNMZEhtNEpQdTZyaEh2eWRBb2lvUktOVkZqT1NwTDBRMXZPaWNuUVR0Wi1XN20xdm85N0tGZEN2OVZtS005cjRidUZLa2xvMjRac0JXaHRCYmxvQktkUmE0eE9sZTVMTHdiOUM1MnY4dm81cWxITkNKem9fTGNHcFBNM1JKNkVrdmlNRFA3cEJ3cE95ZHZRSzJDT1lSaDdBbmZYcEtMOEM0YTBKWHlueWpYRDJWdXNONWhSTVN2bDM0ZW55b09EVmRwam40bFFNRzMtZWtZOEFDV1ZnVUJLYVdueGx1SDBROHdKS19YVTJFdWZ4aDRGMEhucXN5R2oyTEphaU82dWRqdnRjTkFGTS0tN2hmQzNMMGstMFJmWVE0blNHcVpaclp6MzE0c0R2bmF1NV8wWXhPVXVBLThRZmJGZTZiWXFpeWxoU2Rza21kaGlBbzg3NW5DZXhjZnlrSVpCdnlIYXlaYVo0VXkwZDhvSE9RblNsR1p2Zm4wcVlHaV81TVhCMmFFZXp0ZmprUmYyVHVheHlYenhvYkh1LTJwT1JraTFZa2Q1TFAzX1ZTbzlnbXp3cERjdWdycHM5cHZPeFdZOGY0bU1KMThiWVM0TzBvQ0ZLa29ieFkxc0xnLWxCYmxFMU1zbllfR1cwSm14M2RLSzJUYlNoRmNGTUJPNUh1WURvcVdyM0JILUJIS0lPbHk5U0xnS25sTkZGSFUyTTFEV3pCTWhLb0pkM1hTSzZ0bndEWkpGby51dVRVYXZaQndQbHJ0VWNGWHc5LWdoZm9kaDE5b2pPbmJkX1gtUFlHMzBn\",\n\"lastused_at\": \"19700101T000000Z\",\n\"group_id\": \"929a4dab-363d-4f1c-a197-46fc8c0c1251\",\n\"kid\": \"037bef5e-9a2d-4820-b120-02b9b036996d\",\n\"never_exportable\": false,\n\"name\": \"B7E2D3C7D1041342\",\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"bef7866f-194b-452d-83c9-1c2bffe01a3b\"\n}\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n### Recover Key operation\n\nThis operation will recover a deleted key of Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `recover`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"recover\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n[\n{\n\"attributes\": {\n\"created\": 1593587492,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KeyType\": \"BYOK\",\n\"KMS\": \"SDKMS\"\n},\n\"key\": {\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\"\n}\n}\n]\n```\n\n### Restore Key operation\n\nThis operation will restore a key in Azure key vault from its backup blob value.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `kid`: Response `kid` of `backup` operation\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"restore\",\n\"backup_key_name\": \"backup_key_name\",\n\"key_name\": \"key_name\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"key\": {\n\"kid\": \"https://kv-sdk-test.vault-int.azure-int.net/keys/KeyBackupRestoreTest/d7a019f5da8843aea30722a7edcc37f7\",\n\"kty\": \"RSA\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"v6XXEveP0G4tVvtszozRrSSo6zYDOScH8YBVBBY1CR2MCXBk-iMnKgzUyePi9_ofP3AmOxXx-2AsLC8rxi6n3jQNbGtIvQ4oMdUEhWVcVkmwdl0XyOouofEmIHeSxRg6wXFG4tYAKLmKsO9HqmU5n7ebdDlYngcobc1xHsP0u8e0ltntlgWBlSthmY8AMKW9Sb_teEYhilbkvt_ALr00G_4XHmfq7hSOZePWbGSWQW6yC7__9MrlDfzaSlHyBIyLppPEB7u6Zewrl_eNJWoUVrouIGA32qNETIOr_wxXRVGKoerTt-wFC-CXPn30W_6CmKSxoFBNvnzijg5hAU9V0w\",\n\"e\": \"AQAB\"\n},\n\"attributes\": {\n\"enabled\": false,\n\"nbf\": 1262332800,\n\"exp\": 1893484800,\n\"created\": 1493938217,\n\"updated\": 1493938217,\n\"recoveryLevel\": \"Recoverable+Purgeable\"\n}\n}\n```\n\n### Purge Key operation\n\nThis operation will purge a key in Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `purge`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"purge\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n\n```\n{\n\"body\": \"\",\n\"headers\": {\n\"X-Content-Type-Options\": \"nosniff\",\n\"Date\": \"Fri, 14 Aug 2020 08:01:39 GMT\",\n\"Strict-Transport-Security\": \"max-age=31536000;includeSubDomains\",\n\"x-ms-request-id\": \"e9851042-6210-474d-b9b0-706f600aa5d4\",\n\"Pragma\": \"no-cache\",\n\"x-ms-keyvault-service-version\": \"1.1.31.4\",\n\"Expires\": \"-1\",\n\"Cache-Control\": \"no-cache\",\n\"x-ms-keyvault-network-info\": \"conn_type=Ipv4;addr=216.218.139.205;act_addr_fam=InterNetwork;\",\n\"X-AspNet-Version\": \"4.0.30319\",\n\"X-Powered-By\": \"ASP.NET\",\n\"x-ms-keyvault-region\": \"eastus\"\n},\n\"status\": 204\n}\n```\n\n### References\n- [Azure BYOK](https://docs.microsoft.com/en-us/azure/information-protection/byok-price-restrictions)\n\n### Release Notes\nAdded key_size parameter to import (previously set to 1024 only)\nImproved the pem_to_jwk conversion",
                "commit": "a842905d6f28ad74000cfcba813e4c201d22deb2"
            },
            "2.1": {
                "path": "azure/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n### ## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure key vault\n- List Azure BYOK key\n- Rotate key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n- Backup Azure key vault key\n- Recover Azure key vault key\n- Restore Azure key vault key\n- Purge Azure key vault key\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS.\n- Create a Key vault in Azure\n- Add the above app in the `Access Policy` of the above key vault\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create Key operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and in Azure key vault and return a key ID.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `exp`: Key expiration time. Accepted format is Unix time.\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"exp\": 1596240000,\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"updated\": 1593587162,\n\"exp\": 1596240000,\n\"enabled\": true,\n\"created\": 1593587161\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/12860b1156e448dda3a5a3fba9b19a4d\",\n\"key_ops\": [\n\"sign\",\n\"verify\"\n],\n\"n\": \"AOWMCffn25U5JFX7M8zW-ncjOOaVuVPBFSI6Ae_N6Nl9Uzn_2Y_DfJX4gjaPRNcercZ8Fib7WzF_UwZPU486D7lqB8_YxP8F9WyM8cOYgT1KL4KdRh-6-dstQ9MmVp06FmvV2E8T7njY-Ds218gHW4eXA4UWeu2GXrClKmD7ADkD\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\"\n}\n}\n}\n```\n\n### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Rotate Key operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"e\": \"AQAB\",\n\"kty\": \"RSA\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n}\n```\n\n\n### Backup Key operation\n\nThis operation will return encrypted Azure key vault key.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `backup`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"backup\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"activation_date\": \"20200814T075259Z\",\n\"key_ops\": [\n\"EXPORT\"\n],\n\"created_at\": \"20200814T075259Z\",\n\"acct_id\": \"d97b7540-052d-422b-a6a9-017517f221e9\",\n\"origin\": \"External\",\n\"key_size\": 75000,\n\"compliant_with_policies\": true,\n\"public_only\": false,\n\"enabled\": true,\n\"obj_type\": \"OPAQUE\",\n\"value\": \"\",\n\"lastused_at\": \"19700101T000000Z\",\n\"group_id\": \"929a4dab-363d-4f1c-a197-46fc8c0c1251\",\n\"kid\": \"037bef5e-9a2d-4820-b120-02b9b036996d\",\n\"never_exportable\": false,\n\"name\": \"B7E2D3C7D1041342\",\n\"state\": \"Active\",\n\"creator\": {\n\"plugin\": \"bef7866f-194b-452d-83c9-1c2bffe01a3b\"\n}\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n### Recover Key operation\n\nThis operation will recover a deleted key of Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `recover`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"recover\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n[\n{\n\"attributes\": {\n\"created\": 1593587492,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587492\n},\n\"tags\": {\n\"KeyType\": \"BYOK\",\n\"KMS\": \"SDKMS\"\n},\n\"key\": {\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kid\": \"https://test-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\"\n}\n}\n]\n```\n\n### Restore Key operation\n\nThis operation will restore a key in Azure key vault from its backup blob value.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `kid`: Response `kid` of `backup` operation\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"restore\",\n\"backup_key_name\": \"backup_key_name\",\n\"key_name\": \"key_name\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"key\": {\n\"kid\": \"https://kv-sdk-test.vault-int.azure-int.net/keys/KeyBackupRestoreTest/d7a019f5da8843aea30722a7edcc37f7\",\n\"kty\": \"RSA\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"n\": \"v6XXEveP0G4tVvtszozRrSSo6zYDOScH8YBVBBY1CR2MCXBk-iMnKgzUyePi9_ofP3AmOxXx-2AsLC8rxi6n3jQNbGtIvQ4oMdUEhWVcVkmwdl0XyOouofEmIHeSxRg6wXFG4tYAKLmKsO9HqmU5n7ebdDlYngcobc1xHsP0u8e0ltntlgWBlSthmY8AMKW9Sb_teEYhilbkvt_ALr00G_4XHmfq7hSOZePWbGSWQW6yC7__9MrlDfzaSlHyBIyLppPEB7u6Zewrl_eNJWoUVrouIGA32qNETIOr_wxXRVGKoerTt-wFC-CXPn30W_6CmKSxoFBNvnzijg5hAU9V0w\",\n\"e\": \"AQAB\"\n},\n\"attributes\": {\n\"enabled\": false,\n\"nbf\": 1262332800,\n\"exp\": 1893484800,\n\"created\": 1493938217,\n\"updated\": 1493938217,\n\"recoveryLevel\": \"Recoverable+Purgeable\"\n}\n}\n```\n\n### Purge Key operation\n\nThis operation will purge a key in Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `purge`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"purge\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n\n```\n{\n\"body\": \"\",\n\"headers\": {\n\"X-Content-Type-Options\": \"nosniff\",\n\"Date\": \"Fri, 14 Aug 2020 08:01:39 GMT\",\n\"Strict-Transport-Security\": \"max-age=31536000;includeSubDomains\",\n\"x-ms-request-id\": \"e9851042-6210-474d-b9b0-706f600aa5d4\",\n\"Pragma\": \"no-cache\",\n\"x-ms-keyvault-service-version\": \"1.1.31.4\",\n\"Expires\": \"-1\",\n\"Cache-Control\": \"no-cache\",\n\"x-ms-keyvault-network-info\": \"conn_type=Ipv4;addr=216.218.139.205;act_addr_fam=InterNetwork;\",\n\"X-AspNet-Version\": \"4.0.30319\",\n\"X-Powered-By\": \"ASP.NET\",\n\"x-ms-keyvault-region\": \"eastus\"\n},\n\"status\": 204\n}\n```\n\n### References\n- [Azure BYOK](https://docs.microsoft.com/en-us/azure/information-protection/byok-price-restrictions)\n\n### Release Notes\nAdded key_size parameter to import (previously set to 1024 only)\nImproved the pem_to_jwk conversion\nMake sure err is checked in azure plugins after network requests are made",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Self-Defending KMS-Azure Bring Your Own Key (BYOK) HSM",
        "versions": {
            "1.0": {
                "path": "azure-hsm/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n\n## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and impot it in Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n### Release Notes\n- Initial release",
                "commit": "73ccaa59d918732a4d5dc092d657cdf44ba3a1d9"
            },
            "1.1": {
                "path": "azure-hsm/plugin.lua",
                "description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and impot it in Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n- Initial release\n- Better error handling",
                "commit": "a842905d6f28ad74000cfcba813e4c201d22deb2"
            },
            "1.2": {
                "path": "azure-hsm/plugin.lua",
                "description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and impot it in Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n- Initial release\n- Better error handling",
                "commit": "3585d5caaadf026a485d9792d882a7983af193f1"
            },
            "1.3": {
                "path": "azure-hsm/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS-AZURE BRING YOUR OWN KEY (BYOK) HSM PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix DSM key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix DSM and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix DSM\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n* `credential_group_id`: This is the group ID of DSM group where Azure credential will be stored. This field is optional. If not provide, default group ID of the plugin is used\n\n#### Example\n\nInput JSON\n```\n{ \n   \"operation\": \"configure\",\n   \"tenant_id\": \"de7becae...88ae6\",\n   \"client_id\": \"f8d7741...6abb6\",\n   \"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create and copy operation\n\nCreate operation will create an RSA key in Fortanix DSM and import it in Azure key vault. Copy operation will take an existing RSA key in Fortanix DSM and import it into Azure Key vault\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. Valid values are `create` or `copy`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation. \n* `source_group_id`: This is the group ID of DSM group where key will be created in case of create operation. This field is optional. If not provide, default group ID of the plugin is used\n* `rotate_key_in_azure` : This field is optional and valid values are `true` or `false`. This is applicable in case of `copy` operation. If its value is true, then the copy operation will create a new version of the key in Azure\n\nInput JSON\n```\n{\n  \"operation\": \"create\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"key\": {\n      \"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ],\n      \"e\": \"AAEAAQ\",\n      \"kty\": \"RSA-HSM\",\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n    },\n    \"attributes\": {\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"enabled\": true,\n      \"updated\": 1593584773,\n      \"created\": 1593584773\n    }\n  }\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"list\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"value\": [\n      {\n        \"attributes\": {\n          \"recoveryLevel\": \"Recoverable+Purgeable\",\n          \"enabled\": true,\n          \"updated\": 1593587162,\n          \"created\": 1593587161,\n          \"exp\": 1596240000\n        },\n        \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n        \"tags\": {\n          \"KMS\": \"SDKMS\",\n          \"KeyType\": \"BYOK\"\n        }\n      }\n    ],\n    \"nextLink\": null\n  }\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix DSM as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\nInput JSON\n```\n{\n  \"operation\": \"delete\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"scheduledPurgeDate\": 1601363625,\n    \"tags\": {\n      \"KMS\": \"SDKMS\",\n      \"KeyType\": \"BYOK\"\n    },\n    \"deletedDate\": 1593587625,\n    \"key\": {\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n      \"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n      \"kty\": \"RSA\",\n      \"e\": \"AQAB\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ]\n    },\n    \"attributes\": {\n      \"enabled\": true,\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"created\": 1593587492,\n      \"updated\": 1593587492\n    },\n    \"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n  }\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n Initial release",
                "short_description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.",
                "release_notes": [
                    "Better error handling"
                ],
                "commit": "7dd46098acb08cf07539784e92271a8c0be08d00"
            },
            "1.4": {
                "path": "azure-hsm/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS-AZURE BRING YOUR OWN KEY (BYOK) HSM PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix DSM key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix DSM and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix DSM\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n* `credential_group_id`: This is the group ID of DSM group where Azure credential will be stored. This field is optional. If not provide, default group ID of the plugin is used\n\n#### Example\n\nInput JSON\n```\n{ \n   \"operation\": \"configure\",\n   \"tenant_id\": \"de7becae...88ae6\",\n   \"client_id\": \"f8d7741...6abb6\",\n   \"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create and copy operation\n\nCreate operation will create an RSA key in Fortanix DSM and import it in Azure key vault.\nCopy operation will take an existing RSA key in Fortanix DSM and import it into Azure Key vault.\nAzure key blob backup is downloaded into an Opaque key in DSM with `<key-name>_azure_backup` name,\nwhich can later be used in the `restore` operation. \nIf an exsisting backup is found, then that Opaque key will be renmaed to include the\nazure version in the fortmat `<key-name>_azure_backup_version_<azure-key-id>`\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. Valid values are `create` or `copy`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation. \n* `source_group_id`: This is the group ID of DSM group where key will be created in case of create operation. This field is optional. If not provide, default group ID of the plugin is used\n* `rotate_key_in_azure` : This field is optional and valid values are `true` or `false`. This is applicable in case of `copy` operation. If its value is true, then the copy operation will create a new version of the key in Azure\n\nInput JSON\n```\n{\n  \"operation\": \"create\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"key\": {\n      \"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ],\n      \"e\": \"AAEAAQ\",\n      \"kty\": \"RSA-HSM\",\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n    },\n    \"attributes\": {\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"enabled\": true,\n      \"updated\": 1593584773,\n      \"created\": 1593584773\n    }\n  }\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"list\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"value\": [\n      {\n        \"attributes\": {\n          \"recoveryLevel\": \"Recoverable+Purgeable\",\n          \"enabled\": true,\n          \"updated\": 1593587162,\n          \"created\": 1593587161,\n          \"exp\": 1596240000\n        },\n        \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n        \"tags\": {\n          \"KMS\": \"SDKMS\",\n          \"KeyType\": \"BYOK\"\n        }\n      }\n    ],\n    \"nextLink\": null\n  }\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix DSM as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\nInput JSON\n```\n{\n  \"operation\": \"delete\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"scheduledPurgeDate\": 1601363625,\n    \"tags\": {\n      \"KMS\": \"SDKMS\",\n      \"KeyType\": \"BYOK\"\n    },\n    \"deletedDate\": 1593587625,\n    \"key\": {\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n      \"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n      \"kty\": \"RSA\",\n      \"e\": \"AQAB\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ]\n    },\n    \"attributes\": {\n      \"enabled\": true,\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"created\": 1593587492,\n      \"updated\": 1593587492\n    },\n    \"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n  }\n}\n```\n\n### Restore Key operation\n\nThis operation will restore a key in Azure key vault.\n`<key-name>_azure_backup` , which was created during create/copy, is used to\nperform this restore operation. Azure allows restore only if the key is completely\ndeleted (i.e. it should be purged in Azure).\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\nInput JSON\n```\n{\n  \"operation\": \"restore\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"status\": 200\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n Initial release",
                "short_description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.",
                "release_notes": [
                    "Better error handling"
                ],
                "commit": "5848942dfe995d9546eeda872527e8738b91d459"
            },
            "1.5": {
                "path": "azure-hsm/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS-AZURE BRING YOUR OWN KEY (BYOK) HSM PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix DSM key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix DSM and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix DSM\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n* `credential_group_id`: This is the group ID of DSM group where Azure credential will be stored. This field is optional. If not provide, default group ID of the plugin is used\n\n#### Example\n\nInput JSON\n```\n{ \n   \"operation\": \"configure\",\n   \"tenant_id\": \"de7becae...88ae6\",\n   \"client_id\": \"f8d7741...6abb6\",\n   \"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create and copy operation\n\nCreate operation will create an RSA key in Fortanix DSM and import it in Azure key vault.\nCopy operation will take an existing RSA key in Fortanix DSM and import it into Azure Key vault.\nAzure key blob backup is downloaded into an Opaque key in DSM with `<key-name>_azure_backup` name,\nwhich can later be used in the `restore` operation. \nIf an exsisting backup is found, then that Opaque key will be renmaed to include the\nazure version in the fortmat `<key-name>_azure_backup_version_<azure-key-id>`\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. Valid values are `create` or `copy`\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation. \n* `source_group_id`: This is the group ID of DSM group where key will be created in case of create operation. This field is optional. If not provide, default group ID of the plugin is used\n* `rotate_key_in_azure` : This field is optional and valid values are `true` or `false`. This is applicable in case of `copy` operation. If its value is true, then the copy operation will create a new version of the key in Azure\n* `kek_size` : This field is optional. If not specified KEK size is assumed to be 2048. If KEK specified by `kek_key_kid` is of a different size, then this field must be set with correct KEK size. Allowed KEK size values are 2048, 3072 and 4096\n* `key_size` : This field is optional. If not specified targtet key size is assumed to be 2048. If target key of a different size is needed, then this field must be set with the require target key size in bits.\n* `generate_kek` : This field is optional and valid values are `true` or `false`. This can be set to `true` if plugin should generate KEK in Azure KeyVault. When this field is specified and set to `true`, then `kek_key_id` should not be specified\n\nInput JSON - Using an existing KEK\n```\n{\n  \"operation\": \"create\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"key\": {\n      \"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ],\n      \"e\": \"AAEAAQ\",\n      \"kty\": \"RSA-HSM\",\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n    },\n    \"attributes\": {\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"enabled\": true,\n      \"updated\": 1593584773,\n      \"created\": 1593584773\n    }\n  }\n```\n\nInput JSON - Automatically generating KEK and using a different KEK and target key size\n```\n{\n  \"operation\": \"create\",\n  \"key_name\": \"test-key2\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"kek_size\": 4096,\n  \"key_size\": 4096,\n  \"generate_kek\": true,\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"key\": {\n      \"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ],\n      \"e\": \"AAEAAQ\",\n      \"kty\": \"RSA-HSM\",\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key2/21dc7692b9184c1ba8e643db8b142356\"\n    },\n    \"attributes\": {\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"enabled\": true,\n      \"updated\": 1593584773,\n      \"created\": 1593584773\n    }\n  }\n```\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"list\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"value\": [\n      {\n        \"attributes\": {\n          \"recoveryLevel\": \"Recoverable+Purgeable\",\n          \"enabled\": true,\n          \"updated\": 1593587162,\n          \"created\": 1593587161,\n          \"exp\": 1596240000\n        },\n        \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n        \"tags\": {\n          \"KMS\": \"SDKMS\",\n          \"KeyType\": \"BYOK\"\n        }\n      }\n    ],\n    \"nextLink\": null\n  }\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix DSM as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\nInput JSON\n```\n{\n  \"operation\": \"delete\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"scheduledPurgeDate\": 1601363625,\n    \"tags\": {\n      \"KMS\": \"SDKMS\",\n      \"KeyType\": \"BYOK\"\n    },\n    \"deletedDate\": 1593587625,\n    \"key\": {\n      \"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n      \"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n      \"kty\": \"RSA\",\n      \"e\": \"AQAB\",\n      \"key_ops\": [\n        \"encrypt\",\n        \"decrypt\",\n        \"sign\",\n        \"verify\",\n        \"wrapKey\",\n        \"unwrapKey\"\n      ]\n    },\n    \"attributes\": {\n      \"enabled\": true,\n      \"recoveryLevel\": \"Recoverable+Purgeable\",\n      \"created\": 1593587492,\n      \"updated\": 1593587492\n    },\n    \"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n  }\n}\n```\n\n### Restore Key operation\n\nThis operation will restore a key in Azure key vault.\n`<key-name>_azure_backup` , which was created during create/copy, is used to\nperform this restore operation. Azure allows restore only if the key is completely\ndeleted (i.e. it should be purged in Azure).\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation. \n\nInput JSON\n```\n{\n  \"operation\": \"restore\",\n  \"key_name\": \"test-key\",\n  \"key_vault\": \"test-hsm-keyvault\",\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n  \"status\": 200\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n Initial release",
                "short_description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.",
                "release_notes": [
                    "Better error handling"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Cache-only BYOK for Salesforce Cloud",
        "versions": {
            "1.0": {
                "path": "salesforce/plugin.lua",
                "description": "## Short Description\nFortanix Self-Defending KMS can be used as HSM backed Software-as-a-service(SAAS) for Fortanix - Salesforce Cache only BYOK solution. This plugin can be used to securely generate encryption keys and configure in Salesforce\u2019s Shield Platform.\n### ## Introduction\nSalesforce's Shield Platform Encryption is introducing a new pilot feature called Cache-Only Keys. This capability enhances the existing Bring Your Own Key (BYOK) capability by allowing customers to host their key material in a wrapped format which Salesforce will fetch as required. While this will be cached in an encrypted form, Salesforce will not retain or persist the key material in any system of record or backups.\n\n## Use cases\n\n1. Generate encryption keys\n2. use Fortanix Self-Defending KMS key in Salesforce as Cache-only Key at runtime\n\n## Fortanix Self-Defending KMS Setup\n\n1. Log in to Fortanix Self-Defending KMS (https://sdkms.fortanix.com)\n2. Create an account in Fortanix Self-Defending KMS\n3. Create a group in Fortanix Self-Defending KMS\n4. Create an app in Fortanix Self-Defending KMS. Copy the value of App username and password. This would be required while setting up Named Credential in Salesforce.\n5. Create a plugin in Fortanix Self-Defending KMS\n\n## Configure Salesforce import Certificate in Fortanix Self-Defending KMS\n\nGenerate and Download a Self Signed Certificate in Salesforce and import it in fortanix Self-Defending KMS\n\n1. Log in to Salesforce. Go to \"Setup\"\n2. Create a (Self Signed) certificate under Security >> Certificate and Key Management with key size 4096.\n3. Disable the check box \"Exportable Private Key\"\n4. Select the check box to \"Use Platform Encryption\"\n5. Once the certificate is created, please download it\n\nImport the Certificate to Fortanix Self-Defending KMS.\n\n1. Log in to Fortanix Self-Defending KMS\n2. Select an account and Click the left navigation bar to navigate to the \"Security Objects\" tab\n3. Click the IMPORT button\n4. Choose value format as \u201cBASE 64\u201d.\n5. Choose Security Object type as \u201cCertificate\u201d.\n6. Click the Upload a file button to upload the converted certificate at Step 5.\n7. Click the IMPORT button to import the certificate into Fortanix Self-Defending KMS as a security object.\n\n## Salesforce Setup\n\nDefine Named Credential in Salesforce.\n\n1. Log in to Salesforce. Go to \"Setup\"\n2. Click the \u201cNamed Credentials\u201d item under the Security menu in the left navigation bar\n3. Click the button New Named Credential. It will open a screen to create a Named Credential\n4. Enter the details for named credential\n4.1 Enter Label & Name of your choice\n4.2 Enter the plugin URL as in example (UUID: UUID of the plugin created in the section Fortanix Self-Defending KMS Setup Step 3 ). Example: https://www.sdkms.fortanix.com/sys/v1/plugins/invoke/<plugin-uuid>\n4.3 Select the Identity Type as \u201cNamed Principal\u201d and Authentication Protocol as \u201cPassword Authentication\u201d\n4.4 Enter the username and password of Fortanix Self-Defending KMS app and then click Save\n\n## Steps to generate encryption keys and import to Salesforce\n\nGenerate JWE Token (BYOK Cache only KEY) using the plugin.\n\n1. Go to plugin created in Step 5 of section Fortanix Self-Defending KMS Setup.\n2. Click ADD TEST INPUT on the right-hand side.\n3. Enter the following payload in the text box.\n\n```\n{\n\"cert\": <uuid of certificate imported in SDKMS>,\n\"name\": \"<unique name of key eg: salesforce_ency_key_v1>\"\n}\n```\n\n4. RUN TEST\n\nThe plugin generates security objects (AES encryption key and meta information) in Fortanix Self-Defending KMS and returns their UUID.\n\n1. dek: is UUID of AES encryption key generated by the plugin and stored securely in Fortanix Self-Defending KMS. Salesforce will use it as a data encryption key.\n2. opq_key_identifier: Fortanix Self-Defending KMS plugin also generates a security object of type \u201cOPAQUE\u201d. It contains meta-information to generate a response (JWE Token) required by Salesforce. Meta-information has the following information:\n\nCopy the value of \u201copq_key_identifier\u201d field in the response body. This would be required while setting up BYOK in Salesforce.\n\nWhen Salesforce platform calls Fortanix Self-Defending KMS plugin to fetch encryption keys. The plugin reads meta information from opaque object and processes \"dek\" key material and certificate used (while generating meta info and AES initially) to generate JWE token. The same is returned to Salesforce in the desired JSON format.\n\nRefer salesforce documentation for more info on JWE token.\n\n\"dek\u201d value is AES encryption key which is generated by the plugin and the key is stored in Fortanix Self-Defending KMS. The key material would be securely transferred to Salesforce as part of JWE token.\n\nGo to the Security Objects screen to see the newly created object.\n\n## Configure Salesforce to use Fortanix Self-Defending KMS to fetch Cache-only Key at runtime.\n\n1. Go to Setup >> Security >> Platform Encryption >> Key Management\n2. Click the Bring Your Own Key button\n3. Select the desired certificate to be used (it should be same as the one used while executing plugin to generate an encryption key and meta information)\n4. Select Use a Cache-Only Key radio button.\n5. Select Named Credential created with Fortanix Self-Defending KMS endpoint.\n6. Enter BYOK ID (opq_key_identifier) generated by the Fortanix Self-Defending KMS plugin in Step 1.\n7. Click Save.\n8. Once the configuration is saved, Salesforce will call Fortanix Self-Defending KMS to fetch JWE token and decrypt it with the private key of the certificate.\n9. You can see the newly imported key on the \u201cKey Management\u201d screen\n\nVerify the Key Import in the Fortanix Self-Defending KMS Event logs.\n\n1. Logs are generated in Fortanix Self-Defending KMS while fetching encryption keys during setup (after step 2i).\n2. Go to Event Logs in Fortanix Self-Defending KMS to verify (refer below screenshot).\n3. Logs are also generated later when Salesforce calls Fortanix Self-Defending KMS to fetch the encryption keys at runtime.\n\n## Reference\n\n- Fortanix support (https://support.fortanix.com/hc/en-us/articles/360040488931-Exporting-Fortanix-Self-Defending-KMS-keys-to-Cloud-Providers-for-BYOK-Salesforce)\n### Release Notes\n- Initial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Automated BYOK for Salesforce Cloud",
        "versions": {
            "1.0": {
                "path": "salesforce-automated/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for Salesforce. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use Shield Platform Encryption features of Salesforce.\n### ## Introduction\n## Use cases\n\nThe plugin can be used to\n\n- Upload a key from Fortanix Self-Defending KMS to Salesforce\n- Search tenant secrets (Salesforce encryption keys) using Salesforce Sobject Query Language (SSQL)\n- Check current status of any key or key version\n- Destroy the archived keys in Salesforce\n- Restore a previously destroyed key\n\n## Fortanix Self-Defending KMS Setup\n\n1. Log in to Fortanix Self-Defending KMS (https://sdkms.fortanix.com)\n2. Create an account in Fortanix Self-Defending KMS\n3. Create a group in Fortanix Self-Defending KMS\n4. Create a plugin in Fortanix Self-Defending KMS\n\n## Configure Salesforce\n\n1. Create a New Profile under Setup >> Profiles.\nNote: Select \u201cManage Encryption Keys\u201d under \u201cAdministrative Permissions\"\n2. Create a New User under Setup >> Users with these inputs \u2013\nName: arbitrarily input\nProfiles: choose the KMS role created in previous step\nNote the credentials to securely import into Self-Defending KMS secret\n3. Create a Connected App under \u201cApps >> App Manager\u201d with the following inputs \u2013\nLabel: arbitrarily input\nCheck the \u201cEnable OAuth Settings\u201d\nCheck the \u201cEnable Device Flow\u201d for automated access\nNote the credentials to securely import into Self-Defending KMS secret\n4. Whitelist the Fortanix Self-Defending KMS application IP range (CIDR)\n5. Create a Certificate under \u201cSetup >> Certificate and Key Management\u201d \u2013\nLabel: arbitrarily input, but note it for later use\nUncheck the \u201cExportable Private Key\u201d\nCheck the option to \"Use Platform Encryption\"\n6. Verify the Salesforce credentials\nClient/Consumer Key  (Created in step 3)\nClient/Consumer Secret (Created in step 3)\nOAuth username (Created in step 2)\nOAuth password (Created in step 2)\nTenant URI\nAPI version (Fortanix Plugin tested against version 50.0\n\n## Input/Output JSON object format\n\n### ### Configure operation\n\nThis operation configures Salesforce credentials in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `consumer_key`: Consumer Key of the connected app\n* `consumer_secret`: Consumer Secret of the connected app\n* `username`: OAuth username\n* `password`: OAuth password\n* `tenant`: Salesforce tenant URI\n* `version`: API version (Fortanix Plugin tested against version 50.0)\n* `name`: Name of the sobject. This sobject will be created in fortanix self-Defending KMS and will have Salesforce credential information\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"consumer_key\": \"CBK...................D\",\n\"consumer_secret\": \"DMV................D\",\n\"username\" : \"ft......x@<your company domain>\",\n\"password\" : \"fy....K\",\n\"tenant\"   : \"<Salesforce tenant URI>\",\n\"version\"  : \"v50.0\",\n\"name\"    : \"Salesforce NamedCred Dev\"\n}\n```\nOutput\n```\n\"3968218b-72c3-4ada-922a-8a917323f27d\"\n```\n\n\n### ### Check operation\n\nThis operation is to test whether plugin can import wrapping certificate from salesforce into Fortanix self-Defending KMS. (This certificate is required by plugin to authenticate itself to salesforce)\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `check`\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\": \"check\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"  : \"SFBYOK_FTX_Wrapper\"\n}\n```\nOutput JSON\n```\n{\n\"group_id\": \"ff2............................c\",\n\"public_only\": true,\n\"key_ops\": [\n\"VERIFY\",\n\"ENCRYPT\",\n\"WRAPKEY\",\n\"EXPORT\"\n],\n\"enabled\": true,\n\"rsa\": {\n\"signature_policy\": [\n{\n\"padding\": null\n}\n],\n\"encryption_policy\": [\n{\n\"padding\": {\n\"OAEP\": {\n\"mgf\": null\n}\n}\n}\n],\n\"key_size\": 4096\n},\n\"state\": \"Active\",\n\"created_at\": \"20201229T183553Z\",\n\"key_size\": 4096,\n\"kid\": \"6de........................4\",\n\"origin\": \"External\",\n\"lastused_at\": \"19700101T000000Z\",\n\"obj_type\": \"CERTIFICATE\",\n\"name\": \"SFBYOK_FTX_Wrapper\",\n\"acct_id\": \"ec9.......................7\",\n\"compliant_with_policies\": true,\n\"creator\": {\n\"plugin\": \"654.......................1\"\n},\n\"value\": \"MII........................9\",\n\"activation_date\": \"20201229T183553Z\",\n\"pub_key\": \"MII......................8\",\n\"never_exportable\": false\n}\n```\n\n\n### ### Query operation\n\nThis operation allows you to search tenant secrets (Salesforce encryption keys) using Salesforce Sobject Query Language (SSQL)\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `query` or `search`\n* `secret_id`: The response of `configuration` operation\n* `query`: SSQL query\n* `tooling`:\n* `sandbox`:   To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\": \"search\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"query\"   : \"select Id, Status, Version from TenantSecret where Type = `Data`\",\n\"tooling\"  : false,\n\"sandbox\"  : false\n}\n```\nOutput JSON\n```\n{\n\"done\": true,\n\"totalSize\": 5,\n\"records\": [\n{\n\"attributes\": {\n\"type\": \"TenantSecret\",\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G..........O\"\n},\n\"Status\": \"ARCHIVED\",\n\"Id\": \"02G.............D\",\n\"Version\": 3\n},\n{\n\"Version\": 1,\n\"attributes\": {\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G...........W\",\n\"type\": \"TenantSecret\"\n},\n\"Id\": \"02G...........W\",\n\"Status\": \"ARCHIVED\"\n},\n{\n\"Version\": 2,\n\"Id\": \"02G..........O\",\n\"attributes\": {\n\"type\": \"TenantSecret\",\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G............O\"\n},\n\"Status\": \"ARCHIVED\"\n},\n{\n\"Id\": \"02G...........4\",\n\"attributes\": {\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G...........4\",\n\"type\": \"TenantSecret\"\n},\n\"Version\": 4,\n\"Status\": \"DESTROYED\"\n},\n{\n\"attributes\": {\n\"type\": \"TenantSecret\",\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G............O\"\n},\n\"Id\": \"02G..........O\",\n\"Version\": 5,\n\"Status\": \"ACTIVE\"\n}\n]\n}\n```\n\n### ### Upload operation\n\nThis operation allows you to create a key material in Fortanix self-Defending KMS and upload to salesforce\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `upload`.\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n* `type`: A valid values are `Data|EventBus|SearchIndex`\n* `mode`: Key derivation mode. It can be blank which defaults to \u201cPBKDF2\u201d or can also be \"NONE\" to disable key derivation in Salesforce.\n* `name`: Prefix of the name\n* `sandbox`:  To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\": \"upload\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"  : \"SFBYOK_FTX_Wrapper\",\n\"type\"     : \"Data\",\n\"mode\"     :  \"\",\n\"name\"     : \"Salesforce Data Key\",\n\"sandbox\"  : false\n}\n\n```\nOutput JSON\n```\n{\n\"obj_type\": \"AES\",\n\"custom_metadata\": {\n\"SF_HASH\": \"ESP.......................=\",\n\"SF_UPLOAD\": \"EDF.....................=\",\n\"SF_WRAPPER\": \"SFBYOK_FTX_Wrapper\",\n\"SF_MODE\": \"\",\n\"SF_KID\": \"02G...........O\",\n\"SF_TYPE\": \"Data\"\n},\n\"acct_id\": \"ec9...................7\",\n\"creator\": {\n\"plugin\": \"654....................1\"\n},\n\"public_only\": false,\n\"origin\": \"Transient\",\n\"kid\": \"bb7................3\",\n\"lastused_at\": \"19700101T000000Z\",\n\"activation_date\": \"20201229T185549Z\",\n\"key_size\": 256,\n\"kcv\": \"b5...9\",\n\"name\": \"Salesforce Data Key 20201229T185546Z\",\n\"state\": \"Active\",\n\"enabled\": true,\n\"key_ops\": [\n\"EXPORT\"\n],\n\"compliant_with_policies\": true,\n\"created_at\": \"20201229T185549Z\",\n\"aes\": {\n\"tag_length\": null,\n\"key_sizes\": null,\n\"random_iv\": null,\n\"fpe\": null,\n\"iv_length\": null,\n\"cipher_mode\": null\n},\n\"never_exportable\": false,\n\"group_id\": \"ff2..............b\"\n}\n```\n\n### ### Status operation\n\nThis operation allows you to obtain current status of a salesforce key\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `status`.\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n* `name`: \"name of corresponding sobject in fotanix self-Defending KMS\"\n* `sandbox`:   To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\" : \"status\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"   : \"SFBYOK_FTX_Wrapper\",\n\"name\"      : \"Salesforce Data Key 20201229T185546Z\",\n\"sandbox\"   : false\n}\n```\nOutput JSON\n```\n{\n\"RemoteKeyIdentifier\": null,\n\"CreatedDate\": \"2020-12-29T18:55:49.000+0000\",\n\"SecretValueHash\": \"ESP........................=\",\n\"CreatedById\": \"005..........2\",\n\"KeyDerivationMode\": \"PBKDF2\",\n\"attributes\": {\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G..........O\",\n\"type\": \"TenantSecret\"\n},\n\"LastModifiedDate\": \"2020-12-29T18:55:49.000+0000\",\n\"IsDeleted\": false,\n\"SecretValue\": \"CgM.............................=\",\n\"SecretValueCertificate\": null,\n\"Type\": \"Data\",\n\"RemoteKeyServiceId\": null,\n\"Version\": 6,\n\"Id\": \"02G..........O\",\n\"Status\": \"ACTIVE\",\n\"SystemModstamp\": \"2020-12-29T18:55:49.000+0000\",\n\"RemoteKeyCertificate\": null,\n\"Source\": \"UPLOADED\",\n\"Description\": \"Salesforce Data Key 20201229T185546Z\",\n\"LastModifiedById\": \"005............2\"\n}\n```\n### ### Sync operation\n\nThis operation allows you to sync Fortanix self-Defending key object with salesforce key.\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `sync`.\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n* `name`: \"name of corresponding sobject in fotanix self-Defending KMS\"\n* `sandbox`:   To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\" : \"sync\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"   : \"SFBYOK_FTX_Wrapper\",\n\"name\"      : \"Salesforce Data Key 20201229T185546Z\",\n\"sandbox\"   : false\n}\n```\nOutput JSON\n```\n{\n\"RemoteKeyCertificate\": null,\n\"IsDeleted\": false,\n\"CreatedById\": \"005..............2\",\n\"Status\": \"ACTIVE\",\n\"Type\": \"Data\",\n\"LastModifiedById\": \"005............2\",\n\"CreatedDate\": \"2020-12-29T18:55:49.000+0000\",\n\"SystemModstamp\": \"2020-12-29T18:55:49.000+0000\",\n\"Source\": \"UPLOADED\",\n\"SecretValueHash\": \"ESP.................c\",\n\"LastModifiedDate\": \"2020-12-29T18:55:49.000+0000\",\n\"Version\": 6,\n\"RemoteKeyServiceId\": null,\n\"RemoteKeyIdentifier\": null,\n\"attributes\": {\n\"type\": \"TenantSecret\",\n\"url\": \"/services/data/v50.0/sobjects/TenantSecret/02G............O\"\n},\n\"KeyDerivationMode\": \"PBKDF2\",\n\"Id\": \"02G...........O\",\n\"SecretValueCertificate\": null,\n\"Description\": \"Salesforce Data Key 20201229T185546Z\",\n\"SecretValue\": \"CgM........................M\"\n}\n```\n### ### Destroy operation\n\nThis operation allows you to destroy an archived salesforce key.\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `destroy`.\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n* `name`: \"name of corresponding sobject in fotanix self-Defending KMS\"\n* `sandbox`:   To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\" : \"destroy\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"   : \"SFBYOK_FTX_Wrapper\",\n\"name\"      : \"Salesforce Data Key 20201229T185546Z\",\n\"sandbox\"   : false\n}\n```\nOutput\n```\noutput is empty, with http status indicating success.\n```\n### ### Restore operation\n\nThis operation allows you to restore a destroyed salesforce key.\n\n### ### parameters\n\n* `operation`: The operation which you want to perform. A valid value is `restore`.\n* `secret_id`: The response of `configuration` operation\n* `wrapper`: Name of the wrapping certificate in salesforce\n* `name`: \"name of corresponding sobject in fotanix self-Defending KMS\"\n* `sandbox`:   To indicate, whether to use test or production tenant.\n\n### ### Example\n\nInput JSON\n```\n{\n\"operation\" : \"restore\",\n\"secret_id\": \"3968218b-72c3-4ada-922a-8a917323f27d\",\n\"wrapper\"   : \"SFBYOK_FTX_Wrapper\",\n\"name\"      : \"Salesforce Data Key 20201229T185546Z\",\n\"sandbox\"   : false\n}\n```\nOutput\n```\noutput is empty, with http status indicating success.\n```\n\n### Release Notes\n- Initial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Google Cloud BYOK",
        "versions": {
            "1.0": {
                "path": "gcp/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) model for Google cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Google Cloud KMS.\n### ## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Google cloud BYOK model.\n## Requirement\nFortanix Self-Defending KMS Version >= 3.17.1330\n## Use cases\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Google Cloud KMS\n- List Fortanix Self-Defending KMS Google Cloud BYOK key\n- Rotate Fortanix Self-Defending KMS Google Cloud BYOK key\n- Disable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Enable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Delete Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to Google Cloud CMK\n\n\n## Setup\n\n- Log in to Google Cloud portal\n- Create Google Cloud KMS Service Account and Secret Key\n- Create Google Cloud IAM Role for Cloud KMS Admin\n- Attach IAM Role to Service Account\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Google Cloud Service Account secret Key in Fortanix Self-Defending KMS and returns a UUID. -- You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: Google Cloud secret key containing the type, project, client_email and private_key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"location\": \"us-east1\",\n\"key_ring\": \"gcp-keyring\",\n\"secret_key\": {\n\"type\": \"service_account\",\n\"project_id\": \"project-id-102203\",\n\"client_email\": \"sdkms-byok@project-id-102203.iam.gserviceaccount.com\",\n\"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkggSiAgEAAdIk2bywgHRaKg==\\n-----END PRIVATE KEY-----\\n\"\n}\n}\n```\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in Google Cloud KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation.\n* `location`: Optional. Region or location. Example: global or us-east1.\n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n\n```\n{\n\"operation\": \"create\",\n\"name\": \"test-key\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n\"labels\": { \"source\": \"fortanix-byok\" }\n}\n```\n\nOutput JSON\n```\n{\n\"creator\": {\n\"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n},\n\"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n\"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n\"custom_metadata\": {\n\"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n\"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n\"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/-- cryptoKeyVersions/1\",\n\"GCP_UPDATED\": \"2020-09-21T20:52:12.282941162Z\"\n},\n\"aes\": {\n\"random_iv\": null,\n\"key_sizes\": null,\n\"cipher_mode\": null,\n\"fpe\": null,\n\"iv_length\": null,\n\"tag_length\": null\n},\n\"kcv\": \"a90519\",\n\"activation_date\": \"20200921T215621Z\",\n\"key_size\": 256,\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n\"lastused_at\": \"19700101T000000Z\",\n\"never_exportable\": false,\n\"obj_type\": \"AES\",\n\"enabled\": true,\n\"compliant_with_policies\": true,\n\"origin\": \"FortanixHSM\",\n\"name\": \"test-key\",\n\"created_at\": \"20200921T215621Z\",\n\"public_only\": false,\n\"state\": \"Active\"\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from a Google Cloud KMS key ring.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n\"\n{\n\"operation\": \"list\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n\"cryptoKeys\": [\n{\n\"createTime\": \"2020-09-21T02:26:48.718637503Z\",\n\"versionTemplate\": {\n\"protectionLevel\": \"SOFTWARE\",\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n},\n\"purpose\": \"ENCRYPT_DECRYPT\",\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/Fortanix-GCP-BYOKey\",\n\"labels\": {\n\"source\": \"fortanix-byok\"\n}\n},\n{\n\"labels\": {\n\"source\": \"fortanix-byok\"\n},\n\"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n\"primary\": {\n\"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n\"protectionLevel\": \"SOFTWARE\",\n\"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/-- byok-ftx-plugin-1600721534\",\n\"state\": \"ENABLED\",\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n\"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n},\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n\"purpose\": \"ENCRYPT_DECRYPT\",\n\"versionTemplate\": {\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n\"protectionLevel\": \"SOFTWARE\"\n}\n}\n],\n\"totalSize\": 2\n}\n```\n\n### Get operation\n\nThis operation will retrieve a specific BYOK key from Google Cloud KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `get`.\n* `secret_id`: The response of `configuration` operation.\n* `name`: Name of the key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"get\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n\"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n\"primary\": {\n\"protectionLevel\": \"SOFTWARE\",\n\"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n\"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n\"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n\"state\": \"ENABLED\"\n},\n\"labels\": {\n\"source\": \"fortanix-byok\"\n},\n\"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n\"purpose\": \"ENCRYPT_DECRYPT\",\n\"versionTemplate\": {\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n\"protectionLevel\": \"SOFTWARE\"\n},\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\"\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in Google Cloud KMS.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `secret_id`: The response of `configuration` operation.\n* `name`: Name of the key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"rotate\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n\"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n\"creator\": {\n\"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n},\n\"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n\"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n\"custom_metadata\": {\n\"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n\"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n\"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/-- cryptoKeyVersions/2\",\n\"GCP_UPDATED\": \"2020-09-21T21:56:22.663641162Z\"\n},\n\"aes\": {\n\"random_iv\": null,\n\"key_sizes\": null,\n\"cipher_mode\": null,\n\"fpe\": null,\n\"iv_length\": null,\n\"tag_length\": null\n},\n\"kcv\": \"a90519\",\n\"activation_date\": \"20200921T215621Z\",\n\"key_size\": 256,\n\"key_ops\": [\n\"ENCRYPT\",\n\"DECRYPT\",\n\"EXPORT\",\n\"APPMANAGEABLE\"\n],\n\"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n\"lastused_at\": \"19700101T000000Z\",\n\"never_exportable\": false,\n\"obj_type\": \"AES\",\n\"enabled\": true,\n\"compliant_with_policies\": true,\n\"origin\": \"FortanixHSM\",\n\"name\": \"test-key\",\n\"created_at\": \"20200921T215621Z\",\n\"public_only\": false,\n\"state\": \"Active\"\n}\n```\n\n### Disable operation\n\nThis operation will disable a Google Cloud KMS key.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `secret_id`: The response of `configuration` operation.\n* `name`: Name of the key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"disable\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n\"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n\"protectionLevel\": \"SOFTWARE\",\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n\"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n\"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n\"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n\"state\": \"DISABLED\"\n}\n```\n\n### Enable operation\n\nThis operation will enable a Google Cloud KMS key that's disabled.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation.\n* `name`: Name of the key\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"enable\",\n\"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n\"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n\"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n\"protectionLevel\": \"SOFTWARE\",\n\"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n\"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n\"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n\"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n\"state\": \"ENABLED\"\n}\n```\n### Release Notes\n- Initial Release",
                "commit": "6b6130e80c6454ed745d978db85e8b329990bd7f"
            },
            "1.2": {
                "path": "gcp/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS Google Cloud KMS BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Google cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Google Cloud KMS\n- List Fortanix Self-Defending KMS Google Cloud BYOK key\n- Rotate Fortanix Self-Defending KMS Google Cloud BYOK key\n- Disable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Enable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Delete Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to Google Cloud CMK\n\n\n## Setup\n\n- Log in to Google Cloud portal\n- Create Google Cloud KMS Service Account and Secret Key\n- Create Google Cloud IAM Role for Cloud KMS Admin\n- Attach IAM Role to Service Account\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Google Cloud Service Account secret Key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: Google Cloud secret key containing the type, project, client_email and private_key\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"configure\",\n  \"location\": \"us-east1\",\n  \"key_ring\": \"gcp-keyring\",\n  \"secret_key\": {\n    \"type\": \"service_account\",\n    \"project_id\": \"project-id-102203\",\n    \"client_email\": \"sdkms-byok@project-id-102203.iam.gserviceaccount.com\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkggSiAgEAAdIk2bywgHRaKg==\\n-----END PRIVATE KEY-----\\n\"\n  }\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation. \n* `location`: Optional. Region or location. Example: global or us-east1.\n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n\n```\n{\n  \"operation\": \"create\", \n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"labels\": { \"source\": \"fortanix-byok\" }\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/1\",\n    \"GCP_UPDATED\": \"2020-09-21T20:52:12.282941162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from a Google Cloud KMS key ring.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n\"\n{\n  \"operation\": \"list\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n  \"cryptoKeys\": [\n    {\n      \"createTime\": \"2020-09-21T02:26:48.718637503Z\",\n      \"versionTemplate\": {\n        \"protectionLevel\": \"SOFTWARE\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/Fortanix-GCP-BYOKey\",\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      }\n    },\n    {\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      },\n      \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n      \"primary\": {\n        \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n        \"protectionLevel\": \"SOFTWARE\",\n        \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n        \"state\": \"ENABLED\",\n        \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n        \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"versionTemplate\": {\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n        \"protectionLevel\": \"SOFTWARE\"\n      }\n    }\n  ],\n  \"totalSize\": 2\n}\n```\n\n### Get operation\n\nThis operation will retrieve a specific BYOK key from Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `get`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"get\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"primary\": {\n    \"protectionLevel\": \"SOFTWARE\",\n    \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n    \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n    \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n    \"state\": \"ENABLED\"\n  },\n  \"labels\": {\n    \"source\": \"fortanix-byok\"\n  },\n  \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n  \"purpose\": \"ENCRYPT_DECRYPT\",\n  \"versionTemplate\": {\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"protectionLevel\": \"SOFTWARE\"\n  },\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\"\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: Optional. true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/2\",\n    \"GCP_UPDATED\": \"2020-09-21T21:56:22.663641162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### Disable operation\n\nThis operation will disable a Google Cloud KMS key.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"disable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"protectionLevel\": \"SOFTWARE\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"state\": \"DISABLED\"\n}\n```\n\n### Enable operation\n\nThis operation will enable a Google Cloud KMS key that's disabled.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"enable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"protectionLevel\": \"SOFTWARE\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"state\": \"ENABLED\"\n}\n```",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Google cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Google Cloud KMS.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "7bd4e59feaed0e399615047ea6a2f14e24402890"
            },
            "1.3": {
                "path": "gcp/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS Google Cloud KMS BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Google cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Google Cloud KMS\n- List Fortanix Self-Defending KMS Google Cloud BYOK key\n- Rotate Fortanix Self-Defending KMS Google Cloud BYOK key\n- Disable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Enable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Delete Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to Google Cloud CMK\n\n\n## Setup\n\n- Log in to Google Cloud portal\n- Create Google Cloud KMS Service Account and Secret Key\n- Create Google Cloud IAM Role for Cloud KMS Admin\n- Attach IAM Role to Service Account\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Google Cloud Service Account secret Key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: Google Cloud secret key containing the type, project, client_email and private_key\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"configure\",\n  \"location\": \"us-east1\",\n  \"key_ring\": \"gcp-keyring\",\n  \"secret_key\": {\n    \"type\": \"service_account\",\n    \"project_id\": \"project-id-102203\",\n    \"client_email\": \"sdkms-byok@project-id-102203.iam.gserviceaccount.com\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkggSiAgEAAdIk2bywgHRaKg==\\n-----END PRIVATE KEY-----\\n\"\n  }\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation. \n* `location`: Optional. Region or location. Example: global or us-east1.\n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n\n```\n{\n  \"operation\": \"create\", \n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"labels\": { \"source\": \"fortanix-byok\" }\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/1\",\n    \"GCP_UPDATED\": \"2020-09-21T20:52:12.282941162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from a Google Cloud KMS key ring.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n\"\n{\n  \"operation\": \"list\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n  \"cryptoKeys\": [\n    {\n      \"createTime\": \"2020-09-21T02:26:48.718637503Z\",\n      \"versionTemplate\": {\n        \"protectionLevel\": \"SOFTWARE\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/Fortanix-GCP-BYOKey\",\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      }\n    },\n    {\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      },\n      \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n      \"primary\": {\n        \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n        \"protectionLevel\": \"SOFTWARE\",\n        \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n        \"state\": \"ENABLED\",\n        \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n        \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"versionTemplate\": {\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n        \"protectionLevel\": \"SOFTWARE\"\n      }\n    }\n  ],\n  \"totalSize\": 2\n}\n```\n\n### Get operation\n\nThis operation will retrieve a specific BYOK key from Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `get`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"get\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"primary\": {\n    \"protectionLevel\": \"SOFTWARE\",\n    \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n    \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n    \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n    \"state\": \"ENABLED\"\n  },\n  \"labels\": {\n    \"source\": \"fortanix-byok\"\n  },\n  \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n  \"purpose\": \"ENCRYPT_DECRYPT\",\n  \"versionTemplate\": {\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"protectionLevel\": \"SOFTWARE\"\n  },\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\"\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: Optional. true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/2\",\n    \"GCP_UPDATED\": \"2020-09-21T21:56:22.663641162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### Disable operation\n\nThis operation will disable a Google Cloud KMS key.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"disable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"protectionLevel\": \"SOFTWARE\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"state\": \"DISABLED\"\n}\n```\n\n### Enable operation\n\nThis operation will enable a Google Cloud KMS key that's disabled.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"enable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"protectionLevel\": \"SOFTWARE\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"state\": \"ENABLED\"\n}\n```",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Google cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Google Cloud KMS.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Self-Defending KMS-Azure Bring Your Own Key (BYOK) Managed HSM",
        "versions": {
            "1.0": {
                "path": "azure-managed/plugin.lua",
                "description": "## Short Description\nThis plugin implements the Bring your own key (BYOK) HSM model for Azure cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Azure key vault.\n\n## Introduction\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Azure HSM key vault\n- List Azure BYOK key\n- Delete key in Fortanix Self-Defending KMS and corresponding key in Azure key vault\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix Self-Defending KMS\n- Create a premium Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --vault-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix Self-Defending KMS and impot it in Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_type`: Can be AES or RSA\n* `key_size`: The size of the key desired\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_type\": \"RSA\",\n\"key_size\": 2048,\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix Self-Defending KMS as well as Azure key vault.\n\n### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n### Release Notes\n- Initial release",
                "commit": "104d646b9014e41c9e45e1f7f0b95dc7ff3efce8"
            },
            "1.1": {
                "path": "azure-managed/plugin.lua",
                "description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure managed HSMs. Using this plugin you can keep your key inside Fortanix DSM and use BYOK features of Azure managed HSM.\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DSM Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix DSM key in Azure managed HSM key vault\n- List Azure BYOK keys\n- Delete key in Fortanix DSM and corresponding key in Azure managed HSM\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix DSM\n- Create a managed Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --hsm-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix DSM and import it in Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_type`: The type of key required\n* `key_size`: Required key size, in bits\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_type\": \"RSA\",\n\"key_size\": 2048,\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix DSM as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\nInitial release\n\n## Release Notes\n- Better error handling",
                "commit": "a842905d6f28ad74000cfcba813e4c201d22deb2"
            },
            "1.2": {
                "path": "azure-managed/plugin.lua",
                "description": "This plugin implements the Bring your own key (BYOK) HSM model for Azure managed HSMs. Using this plugin you can keep your key inside Fortanix DSM and use BYOK features of Azure managed HSM.\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Azure cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DSM Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix DSM key in Azure managed HSM key vault\n- List Azure BYOK keys\n- Delete key in Fortanix DSM and corresponding key in Azure managed HSM\n\n## Setup\n\n- Log in to https://portal.azure.com/\n- Register an app in Azure cloud (Note down the Application (client) ID, Directory (tenant) ID, and client secret of this app). We will configure this information in Fortanix DSM\n- Create a managed Azure key vault\n- Add the above app in the `Access Policy` of the above key vault\n- Create KEK key in Azure key vault\n\n```\naz keyvault key create --kty RSA-HSM --size 2048 --name <KEY-NAME> --ops import --hsm-name <KEY-VAULT-NAME>\n```\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Azure app credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `tenant_id`: Azure tenant ID\n* `client_id`: Azure app ID or client ID\n* `client_secret`: Azure app secret\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"configure\",\n\"tenant_id\": \"de7becae...88ae6\",\n\"client_id\": \"f8d7741...6abb6\",\n\"client_secret\": \"SvU...5\"\n}\n```\n\nOutput JSON\n```\n{\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### create operation\n\nThis operation will create an RSA key in Fortanix DSM and import it in Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `create`\n* `key_name`: Name of the key\n* `key_type`: The type of key required\n* `key_size`: Required key size, in bits\n* `key_vault`: Azure key vault name\n* `kek_key_kid`: Azure Key Exchange Key (KEK) ID\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"create\",\n\"key_name\": \"test-key\",\n\"key_type\": \"RSA\",\n\"key_size\": 2048,\n\"key_vault\": \"test-hsm-keyvault\",\n\"kek_key_kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-kek-key/0ffc59a57f664b9fbde6455bd0ed5dd5\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"key\": {\n\"n\": \"5FshKQ_5peJfFcer18EylSxbK94UErV0we_Z-v2EsTjcH_HZBWAUbAF0QJ_q0Qzy6nHA-u0DkAf63YTe3BhuUEU80Qek_pmZjfek4rgE53eSbrEqH7bYVxUEKSye3J_7oR-MMs4YkNqvyenBuLSv7QXZIcPu17zsNhIQrsv0MBdwV_QlewW9QQUeTPLbHUBV7m-r1gdffiINoRcGY9QvHb6dJphoOaNSzddUXm6Y21R7pwI2Lzo3MuEe2nwtOC-z_MW8jdsDNYxua4CipiGOe2Cqqg_wXsZcjpefzYqSGky2y3j7OoG1uHsafRqWatWTj_CHUPr-oII_r2_sGcxBrw\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n],\n\"e\": \"AAEAAQ\",\n\"kty\": \"RSA-HSM\",\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/21dc7692b9184c1ba8e643db8b142356\"\n},\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593584773,\n\"created\": 1593584773\n}\n}\n```\n\n#### List Key operation\n\nThis operation will list all the BYOK keys from azure.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\n#### Example\n\nInput JSON\n```\n{\n\"operation\": \"list\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"value\": [\n{\n\"attributes\": {\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"enabled\": true,\n\"updated\": 1593587162,\n\"created\": 1593587161,\n\"exp\": 1596240000\n},\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key\",\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n}\n}\n],\n\"nextLink\": null\n}\n}\n```\n\n### Delete Key operation\n\nThis operation will delete a key in Fortanix DSM as well as Azure key vault.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid value is `delete`.\n* `key_name`: Name of the key\n* `key_vault`: Azure key vault name\n* `secret_id`: The response of `configuration` operation.\n\nInput JSON\n```\n{\n\"operation\": \"delete\",\n\"key_name\": \"test-key\",\n\"key_vault\": \"test-hsm-keyvault\",\n\"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\nOutput JSON\n```\n{\n\"result\": {\n\"scheduledPurgeDate\": 1601363625,\n\"tags\": {\n\"KMS\": \"SDKMS\",\n\"KeyType\": \"BYOK\"\n},\n\"deletedDate\": 1593587625,\n\"key\": {\n\"kid\": \"https://test-hsm-keyvault.vault.azure.net/keys/test-key/e71e5af81eaa4cbd85674d8b7a76d065\",\n\"n\": \"AL2b7tdZzZugFJI3mRS39h_6x9hh4XKJ3W3UrbwFtA9bZ7kEfGWIyE1IJWQX5KGkW26WkYiAABvx1bU4J7lO1TFkVjvHYRr5cC5eAySBGC1yaxrZ-3SguE7R33EF54ja3doeqapnkCM6GK2RuhIsT4Spz3cm9P0dfknz3DapON-7\",\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"key_ops\": [\n\"encrypt\",\n\"decrypt\",\n\"sign\",\n\"verify\",\n\"wrapKey\",\n\"unwrapKey\"\n]\n},\n\"attributes\": {\n\"enabled\": true,\n\"recoveryLevel\": \"Recoverable+Purgeable\",\n\"created\": 1593587492,\n\"updated\": 1593587492\n},\n\"recoveryId\": \"https://test-hsm-keyvault.vault.azure.net/deletedkeys/test-key\"\n}\n}\n```\n\n## References\n- [Azure HSM BYOK](https://docs.microsoft.com/en-us/azure/key-vault/keys/hsm-protected-keys)\n\n## Release Notes\n- Initial release\n- Better error handling",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Snowflake External Function for FPE Tokenization",
        "versions": {
            "1.0": {
                "path": "snowflake-extfunc-fpe/plugin.lua",
                "description": "## Short Description\nUses AES keys with FF1 algorithm in Fortanix DSM to protect sensitive fields in Snowflake.\n\n### ## Introduction\nSnowflake data proection implemented through a DSM Plugin executing inside Fortanix Data Security Manager.\n\n## Use Cases\n\nSnowflake users authorized to invoke an External Function, can encrypt/tokenize or decrypt/detokenize\nindividual fields or one or more columns.\n\n## Setup\n\n### Create the DSM Plugin, FPE Tokenization Keys, and at least one DSM App\n\nImport this Plugin from the Fortanix Plugin Library. Setup the necessary tokenization key(s).\nFor example, a tokenization key with SSN format to tokenzie social security number fields.\nYou can create as many keys as necessary to tokenize or encrypt desired fields.\n\nNote: Each Tokenization Key must correspond to a single data type (or column) in Snowflake.\nUnless there's a generic Tokenization Key that accepts an arbitrary data format in a chosen\ncharacter encoding.\n\nEnsure the Plugin and Tokenization Key(s) are members of the same DSM Group.\n\nCreate a DSM App and note its API key as `FORTANIX_DSM_API_KEY`.\nFor each Snowflake External Function, a corresponding DSM App can be specified during its creation in Snowflake.\nThe DSM App(s) will need permissions to either `encrypt`, `decrypt`, or `masked decrypt` using the FPE keys in DSM.\n\n\nCopy or note the newly created Plugin's URL from DSM. It will be in the following format:\n\n```\nhttps://FORTANIX_DSM_ENDPOINT/sys/v1/plugins/PLUGIN_UUID\n```\n\n### Create the AWS API Gateway proxy\n\nAWS API Gateway REST API Endpoints may be public or private. You will need two separate resources\nfor /tokenize and /detokenize, that match separate distinct External Functions in Snowflake. Both these\nendpoints could invoke the same DSM Plugin, since we will map the headers from Snowflake to request body\nparameters that inform the DSM Plugin of `encrypt` or `decrypt`.\n\nUse the following configurations for each resource:\n\n\n- Integration type: HTTP\n- Endpoint URL:  `https://FORTANIX_DSM_ENDPOINT/sys/v1/plugins/PLUGIN_UUID`\n- Content handling: Passthrough\n- HTTP Headers: add the \u201cAuthorization\u201d header and leave the value empty as it\u2019ll be mapped from the Snowflake custom header.\n\nMapping Template:\n-  Content-Type: \u201capplication/json\u201d\n-  Request body passthrough: \u201cNever\u201d\n-  Value: see below\n\n```\nset($apikey = \"Basic $input.params('sf-custom-api-key')\")\nset($context.requestOverride.header.Authorization = $apikey)\nset($context.requestOverride.header.sf-custom-api-key = \"\")\nset($context.requestOverride.header.sf-custom-key-names = \"\")\nset($inputRoot = $input.path('$'))\n{\n\"op\": \"encrypt\",\n\"keys\":\"$input.params('sf-custom-key-names')\",\n\"data\": $input.json('$.data')\n}\n```\n\nNote: change the `op` from `encrypt` to `decrypt` based on the REST API endpoint.\n\nOptional: Test the API Gateway resource and deploy to a stage with the following:\n\nResource: /tokenize\nQuery string: empty or leave blank\nHeaders:\n\n```\nAccept:application/json\nsf-custom-api-key:FORTANIX_DSM_API_KEY\nsf-custom-key-names:Case-Sensitive,Comma-Separated,List-of-Key,Names...\n```\n\nRequest Body:\n```json\n{\"data\": [\n[0, \"Susan\"],\n[1, \"Sean\"],\n[2, \"Samual\"],\n[3, \"Hollee\"]\n]}\n```\n\nNote: the number of columns need to match the number of key names. The FPE key in this example needs to\nfinalize the AWS API Gateway integration by:\n\nCreating an AWS IAM Role and note its `SNOWFLAKE-ROLE-ID` and deploy the proxy to a stage and note the URL:\n\n```\nhttps://<<XYZ.execute-api.us-east-2>>.amazonaws.com/DEMO_STAGE/\n\n```\n\n### Create the Snowflake API Integration and External Function\n\nConfigure the AWS Gateway API Integration deployment stage and IAM Role in Snowflake.\n\n```\nCREATE OR REPLACE API INTEGRATION fortanix_plugin\nAPI_PROVIDER = aws_api_gateway\nAPI_AWS_ROLE_ARN = 'arn:aws:iam::ACCOUNT_ID:role/service-role/SNOWFLAKE-ROLE-ID'\nAPI_ALLOWED_PREFIXES = ('https://<<XYZ.execute-api.us-east-2>>.amazonaws.com/DEMO_STAGE/')\nenabled=true;\n\nDESCRIBE INTEGRATION fortanix_plugin;\n```\n\nNote: replace the ACCOUNT_ID and other relevant parameters with appropriate values in the API INTEGRATION statement.\n\nCreate External Functions for single columns, say corresponding to SSN. Similar functions can be setup\nfor other data types or multiple columns within a single External Function.\n\n```\nSingle column tokenization: SSN\nDROP FUNCTION dsm_tokenize_ssn(varchar);\n\nCREATE SECURE EXTERNAL FUNCTION dsm_tokenize_ssn(SSN_column_name varchar)\nRETURNS variant\nIMMUTABLE\nAPI_INTEGRATION = fortanix_plugin\nHEADERS = (\n'api-key'='FORTANIX_DSM_API_KEY',\n'key-names'='SSN_FPE_key_name_in_DSM'\n)\nAS 'https://<<XYZ.execute-api.us-east2>>.amazonaws.com/DEMO_STAGE/tokenize';\n\nselect dsm_tokenize_ssn('123-45-6789');\n\nSingle column detokenization: SSN\nDROP FUNCTION dsm_detokenize_ssn(varchar);\n\nCREATE EXTERNAL SECURE FUNCTION dsm_detokenize_ssn(SSN_column_name varchar)\nRETURNS variant\nIMMUTABLE\nAPI_INTEGRATION = fortanix_plugin\nHEADERS = (\n'api-key'='FORTANIX_DSM_API_KEY',\n'key-names'='SSN_FPE_key_name_in_DSM'\n)\n\nAS 'https://<<XYZ.execute-api.us-east-2>>.amazonaws.com/DEMO_STAGE/detokenize';\n\nselect dsm_detokenize_ssn('806-30-1382');\n\n```\n\nSetup a test table and test the function against it:\n\n```\nCREATE or REPLACE TABLE test_table (\nid number autoincrement start 1 increment 1,\nfname varchar,\nssn varchar,\naddr varchar,\nccn varchar\n);\n\ntest SSN tokens\ninsert into test_table (id, fname, ssn, addr, ccn) select 1, 'Franky Hou',\ndsm_tokenize_ssn('001-02-0001')[0]::text, '1 Infinity Loop', dsm_tokenize_ccn('1234123412341234')[0]::text;\ninsert into test_table (id, fname, ssn, addr, ccn) select 2, 'Joan Lucas',\ndsm_tokenize_ssn('001-02-0002')[0]::text, '918 Batman Drive', dsm_tokenize_ccn('9876987698769876')[0]::text;\ninsert into test_table (id, fname, ssn, addr, ccn) select 3, 'James Woods',\ndsm_tokenize_ssn('001-02-0003')[0]::text, '482 Woody Ave', dsm_tokenize_ccn('1849372849384723')[0]::text;\n\ntest SSN PII re-identification\nselect ssn, dsm_detokenize_ssn(ssn)[0]::text from test_table;\n\n```\n\nNote: the DSM App needs to have permissions to detokenize using the SSN tokenization key, which\nitself needs to have the permissions. Fortanix DSM allows for a very flexible RBAC model on keys, and apps.\n\n## Example Usage\n\nEach External Function signature must match the number of keys and columns or fields sent to the DSM Plugin.\nThe key names must match exactly as the input, as DSM allows creation of case sensitive key names or labels.\n\nInvoking the DSM plugin from a command line:\n```\n$ curl -H \"Authorization: Basic $FORTANIX_DSM_API_KEY\" \\\n$FORTANIX_DSM_ENDPOINT/sys/v1/plugins/$PLUGIN_UUID \\\n-d @input_examples.json # see below\n```\n\nInput example 1:\n```json\n{\n\"op\": \"encrypt\",\n\"keys\": \"AlphaNum,SSN-key,CCN-key\",\n\"data\": [\n[0, \"SUSAN\", \"001-11-0010\", \"4539943689232943\"],\n[1, \"SEAN\", \"616-21-0666\", \"349915113632714\"],\n[2, \"SAMUEL\", \"300-31-1930\", \"5929662954927004\"],\n[3, \"HOLEE\", \"021-31-0930\", \"4929662954927007\"]\n]\n}\n```\n\nInput example 2:\n```json\n{\n\"op\": \"encrypt\",\n\"keys\": \"Name_X,SSN_X,Address_X,Numeric,email-sizer,CCN_X\",\n\"data\": [\n[\n0,\n\"Karna Ugarte\",\n\"171-73-7920\",\n\"#57 Lester Road\",\n\"28510\",\n\"ugarte_57@siriusxm.com\",\n4716407329495455\n],[\n1,\n\"Matty Grand Jr.\",\n\"544-10-0225\",\n\"14 N-Williams Street\",\n\"26259\",\n\"grand_15@datawire.net\",\n5414779952385357\n]\n]\n}\n```\n\n### End-to-end Test\nExecute SQL statements in the Snowflake console or through other Snowflake ODBC queries using\nthe newly created External Functions. Verify the tokenization and de-tokenization in Fortanix DSM.\n\n\n### Known Issues\n* If Snowflake sends a cell (field value) in a floating point format, due to an internal LUA\nlimitation in Fortanix DSM, the string equivalent only captures the integral part (digits before\nthe decimal). The fractional part is not sent as input to the FPE algorithm.\n\n## References\n- <a name=\"externalfunction\"></a> [External Functions] (https://docs.snowflake.com/en/sql-reference/external-functions.html)\n- <a name=\"gide\"></a> [Using DSM With Snowflake] (https://support.fortanix.com/hc/en-us/articles/4407049792148-Using-Data-Security-Manager-with-Snowflake)\n\n\n\n### Release Notes\n- Initial release",
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Time-based One-Time Password (TOTP)",
        "versions": {
            "1.0": {
                "path": "totp/plugin.lua",
                "description": "# Time-based One-Time Password (TOTP) Plugin\n\nThis plugin can be used to verify time-based one-time passwords.\nIt implements the algorithms described in RFC 6238 (TOTP).\nThe code is adapted from https://github.com/remjey/luaotp/blob/v0.1-6/src/otp.lua\n\n## Input Commands\n\nThe plugin accepts a JSON object as input with the following mandatory fields:\n\n- `operation`: the operation to execute, see below for a list of operations,\n- `account`: a string identifying the user associated with the TOTP object,\n  e.g. an email address.\n\nSome operations require more fields in the input as noted below.\n\nThe plugin accepts the following operations:\n\n- `generate`: generates a new TOTP secret with default parameters and stores the\n  secret HMAC key in a DSM security object named `totp/<account>` where `<account>`\n  is the value specified in the input field `account`. The default parameters are:\n  - Key length: 15 bytes\n  - Hash algorithm: `SHA1`\n  - Period: 30 seconds\n  - Number of digits in passwords: 6\n  The output contains a URL that can be used to generate QR codes suitable for 2FA\n  apps. Note that this URL cannot be retrieved later on.\n\n- `verify`: verifies if the input code is valid for the specified TOTP account.\n  This operation expects a 6 digit code in a string field named `code` in the input.\n  It returns a JSON object with one boolean field `verified`.\n  Note that the security object is updated to keep track of the last code that was\n  used so that the same code cannot be used repeatedly.\n\n## Example Usage\n\nInvoke the plugin with the following input:\n\n```\n{\n  \"operation\": \"generate\",\n  \"account\": \"test@example.com\"\n}\n```\n\nIf successful, you'd see an output like this:\n\n```\n{\n  \"url\": \"otpauth://totp/Fortanix%20DSM:test%40example.com?secret=2P5VGP4VU233YA6FXXDTGTP4&issuer=Fortanix%20DSM&period=30&digits=6&algorithm=SHA1\",\n  \"security_object\": \"totp/test@example.com\"\n}\n```\n\nYou can copy the URL and use existing tools to generate a QR code that can be scanned by any 2FA app.\nFor example https://stefansundin.github.io/2fa-qr/ can be used for this purpose. Note that the URL\ncontains a shared secret and anyone with access to the URL or the QR code can generate valid one-time\npasswords. Make sure you trust the tool you use to generate the QR code.\n\nAfter registering the QR code in your favorite 2FA app, you can verify the code generated by your 2FA\napp using the following input:\n\n```\n{\n  \"operation\": \"verify\",\n  \"account\": \"test@example.com\",\n  \"code\": \"123456\"\n}\n```\n\nReplacing `123456` with the actual code of course.\n\nIf the code is correct you'd see an output like this:\n\n```\n{\n  \"verified\": true\n}\n```\n\n## Security Considerations\n\nThe plugin stores one `HMAC` key per 2FA account, this key is not exportable so that the secret can only be\naccessed when the account is created (through the `generate` operation). However, note that TOTP is a shared\nsecret scheme where the `HMAC` secret is known to both the prover and verifier parties. The verifier (in this\ncase the plugin) is executed inside Fortanix DSM and is protected with strong security mechanisms available\nin DSM. The prover, i.e. the 2FA app, and any other tools with access to the URL or QR code on the other\nhand are not protected in the same way. Care should be taken to avoid compromising the secret through such\ntools.\n\nThe plugin additionally stores some metadata with the `HMAC` key to keep track of the TOTP parameters as well\nas the last counter value (last timestamp divided by period). The counter is updated every time the plugin is\ninvoked to verify a code. Any user or application with access to the `HMAC` key can therefore find out the\ntimestamp of the last successful verification performed by the plugin for that account. Therefore it is\nrecommended to limit access to the `HMAC` key(s) used by this plugin as much as possible.",
                "short_description": "This plugin can be used to verify time-based one-time passwords. It implements the algorithms described in RFC 6238 (TOTP).",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "d34b36c9c1f6107ae21c237466077856e7006e69"
            },
            "1.2": {
                "path": "totp/plugin.lua",
                "description": "# Time-based One-Time Password (TOTP) Plugin\n\nThis plugin can be used to verify time-based one-time passwords, or as a TOTP token itself.\nIt implements the algorithms described in RFC 6238 (TOTP).\nThe code is adapted from <https://github.com/remjey/luaotp/blob/v0.1-6/src/otp.lua>, and\nuses a trimmed down copy of `basexx` library from <https://github.com/aiq/basexx>.\n\n## Input Commands\n\nThe plugin accepts a JSON object as input with the following mandatory fields:\n\n- `operation`: the operation to execute, see below for a list of operations,\n- `account`: a string identifying the user associated with the TOTP object,\n  e.g. an email address.\n\nSome operations require more fields in the input as noted below.\n\nThe plugin accepts the following operations:\n\n- `generate`: generates a new TOTP secret with default parameters and stores the\n  secret HMAC key in a DSM security object named `totp/<account>` where `<account>`\n  is the value specified in the input field `account`. The default parameters are:\n  - Key length: 15 bytes\n  - Hash algorithm: `SHA1`\n  - Period: 30 seconds\n  - Number of digits in passwords: 6\n  The output contains a URL that can be used to generate QR codes suitable for 2FA\n  apps. Note that this URL cannot be retrieved later on.\n\n- `verify`: verifies if the input code is valid for the specified TOTP account.\n  This operation expects a 6 digit code in a string field named `code` in the input.\n  It returns a JSON object with one boolean field `verified`.\n  Note that the security object is updated to keep track of the last code that was\n  used so that the same code cannot be used repeatedly.\n\n- `import`: imports a secret generated by an external TOTP validator, so that this\n  can be used to generate TOTP codes from within DSM. For this operation, the specified\n  `account` field is used as a name for the generated security object. To prevent\n  confusion, we recommend prefixing the name with \"client\", so that the resulting\n  security object is discernable from security objects used as a validator instead.\n  This operation expects the following parameters, which can be extracted from a\n  `otpauth://` TOTP URL or QR code:\n  - `digits`: the number of digits used for generated TOTP codes. Must be either 6, 7, or 8.\n  - `period`: The validity period of a TOTP code. Must be larger than 0.\n  - `secret`: The base32 encoded secret itself.\n  - `algorithm`: The hash algorithm used for this HMAC. Must be either `SHA1`, `SHA256`, or `SHA512`.\n  It returns a JSON object with one field `account`, containing the name of the generated security object.\n\n- `code`: generates a valid TOTP code for the current period for the specified account.\n  This operation takes no special parameters, and returns a JSON object with one\n  field `code`, which contains the TOTP code.\n\n## Example Usage\n\nInvoke the plugin with the following input:\n\n```json\n{\n  \"operation\": \"generate\",\n  \"account\": \"test@example.com\"\n}\n```\n\nIf successful, you'd see an output like this:\n\n```json\n{\n  \"url\": \"otpauth://totp/Fortanix%20DSM:test%40example.com?secret=2P5VGP4VU233YA6FXXDTGTP4&issuer=Fortanix%20DSM&period=30&digits=6&algorithm=SHA1\",\n  \"security_object\": \"totp/test@example.com\"\n}\n```\n\nYou can copy the URL and use existing tools to generate a QR code that can be scanned by any 2FA app.\nFor example <https://stefansundin.github.io/2fa-qr/> can be used for this purpose. Note that the URL\ncontains a shared secret and anyone with access to the URL or the QR code can generate valid one-time\npasswords. Make sure you trust the tool you use to generate the QR code.\n\nAfter registering the QR code in your favorite 2FA app, you can verify the code generated by your 2FA\napp using the following input:\n\n```json\n{\n  \"operation\": \"verify\",\n  \"account\": \"test@example.com\",\n  \"code\": \"123456\"\n}\n```\n\nReplacing `123456` with the actual code of course.\n\nIf the code is correct you'd see an output like this:\n\n```json\n{\n  \"verified\": true\n}\n```\n\nYou can also set up a TOTP token generator by importing it. Below we import the previously created validator,\nbut this time as a client.\n\n```json\n{\n  \"operation\": \"import\",\n  \"account\": \"client/test@example.com\",\n  \"digits\": 6,\n  \"period\": 30,\n  \"secret\": \"62P5VGP4VU233YA6FXXDTGTP4\",\n  \"algorithm\": \"SHA1\"\n}\n```\n\nIf successful, you should see an output like this:\n\n```json\n{\n  \"security_object\": \"totp/client/test@example.com\"\n}\n```\n\nNow, you can use this to generate TOTP codes:\n\n```json\n{\n  \"operation\": \"code\",\n  \"account\": \"client/test@example.com\"\n}\n```\n\nWhich should return an output like this:\n\n```json\n{\n  \"code\": \"123456\"\n}\n```\n\n## Security Considerations\n\nThe plugin stores one `HMAC` key per 2FA account, this key is not exportable so that the secret can only be\naccessed when the account is created (through the `generate` operation). However, note that TOTP is a shared\nsecret scheme where the `HMAC` secret is known to both the prover and verifier parties. The verifier (in this\ncase the plugin) is executed inside Fortanix DSM and is protected with strong security mechanisms available\nin DSM. The prover, i.e. the 2FA app, and any other tools with access to the URL or QR code on the other\nhand are not protected in the same way. Care should be taken to avoid compromising the secret through such\ntools.\n\nThe plugin additionally stores some metadata with the `HMAC` key to keep track of the TOTP parameters as well\nas the last counter value (last timestamp divided by period). The counter is updated every time the plugin is\ninvoked to verify a code. Any user or application with access to the `HMAC` key can therefore find out the\ntimestamp of the last successful verification performed by the plugin for that account. Therefore it is\nrecommended to limit access to the `HMAC` key(s) used by this plugin as much as possible.",
                "short_description": "This plugin can be used to verify or generate time-based one-time passwords. It implements the algorithms described in RFC 6238 (TOTP).",
                "release_notes": [
                    "Fixed an issue that prevented users from importing very short secrets"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "AWS CloudTrail sync events with DSM keys in Cloud-Data-Control",
        "versions": {
            "1.0": {
                "path": "aws-cloudtrail-sync/plugin.lua",
                "description": "# Synchronize events between Fortanix DSM and AWS CloudTrail\n\nThis plugin can be used to syncrhonize events from AWS CloudTrail with DSM Audit log\nfor keys in DSM that were brought into AWS Cloud KMS (BYOK as part of Cloud-Data-Control.\nThe merged events can be uploaded to Amazon S3.\n\n## Input Commands\n\nThe plugin accepts a JSON object as input with the following mandatory fields:\n\n- `operation`: the operation to execute, see below for a list of operations,\n- `secret_id`: a string identifying the DSM secret object containing the AWS IAM\n    credentials. This is not required and instead output from the `configure` operation.\n\nSome operations require more fields in the input as noted below.\n\nThe plugin accepts the following operations:\n\n### Configure\n- `configure`: generates a new secret with AWS IAM credentials it receives as input\n  in a DSM security object named randomly.\n\n  The input parameters are:\n  - Access Key Id: String\n  - Secret Access Key: String\n  - Region: String; defaults to `us-west-1`\n  - Session Token: (optional) String; obtained through AWS STS\n\n  The output contains a JSON object with a key called `secret_id` that is the UUID of the \n  DSM secret and will be used in all subsequent operations.\n  The AWS IAM access key needs to have permission to read CloudTrail events and also write\n  to an Amazon S3 bucket.\n\n### List DSM Keys\n- `list-dsm-keys`: fetches all AWS Cloud KMS relevant keys from Fortanix DSM groups\n  the plugin is a member of.\n\n  The input parameters are:\n  - Key: (optional) String; to filter by key name or UUID in Fortanix DSM\n\n  The output contains a JSON object array of keys that were copied to AWS Cloud KMS using \n  Fortanix Cloud Data Control, found across groups within Fortanix DSM that the plugin is \n  a member of.\n  More information regarding Cloud Data Control keys is available at [Fortanix DSM with External AWS Cloud KMS](https://support.fortanix.com/hc/en-us/articles/360055605471-User-s-Guide-AWS-External-KMS)\n\n### List DSM Events\n- `list-dsm-events`: fetches all events from Fortanix DSM relevant to the AWS Cloud KMS copied\n  keys, or events pertaining any specific keys, as per input.\n\n  The input parameters are:\n  - Key: (optional) String; to filter by key name or UUID in Fortanix DSM\n\n  The output contains a JSON object array of events in Fortanix DSM corresponding to keys\n  that were copied to AWS Cloud KMS using Fortanix Cloud Data Control, found across groups\n  within Fortanix DSM that the plugin is a member of.\n\n### List AWS Keys\n- `list-aws-keys`: fetches all keys from AWS Cloud KMS accessible to the AWS IAM credential.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n\n  The output contains a JSON object array containing of keys found in AWS Cloud KMS. The region will\n  correspond to that specified during the `configure` operation.\n\n### List AWS Events\n- `list-aws-events`: fetches all events from AWS CloudTrail, if no filters are specified.\n  More information regarding filters is available at [AWS CloudTrail LookupEvents documentation](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.htm)\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Lookup Attribute Key: String or Array\n  - Lookup Attribute Value: String or Array; if latter, sized as per the Lookup Attribute Key array.\n\n### Merge Events\n- `merge-events`: fetches all events from AWS CloudTrail, and merges with Audit log from Fortanix DSM.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Reverse Chronology: Boolean; defaults to `false`, unless set to `true`.\n\n  The output contains a JSON object array containing of events in chronological (or reverse) across both\n  AWS CloudTrail and Fortanix DSM for keys that are common across both systems.\n\n### Upload Events\n- `upload-events`: uploads a single file with output from Merge Events operation on to Amazon S3.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Bucket: String; name of the Amazon S3 bucket.\n  - Object Key: String; name of the Amazon S3 bucket object key to create or update.\n\n  The output contains a JSON object array containing of events in chronological (or reverse) across both\n  AWS CloudTrail and Fortanix DSM for keys that are common across both systems.\n\n\n## Example Usage\n\nInvoke the plugin with the following input to check for AWS Cloud KMS keys in Fortanix DSM:\n```\n{\n  \"operation\": \"list-dsm-keys\",\n  \"key\": \"55526741-7528-44d4-89de-9db3d1e93fc3\"\n}\n\n```\nIf pertinent keys are found, the output will be (an array of or) a single Security Object(s) as follows:\n```\n[\n  {\n    \"kid\": \"55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"name\": \"Master-S3-Key-Service_Copy(copied at 15-03-2022 04:04:40.542)\",\n    \"key_size\": 256,\n    \"obj_type\": \"AES\",\n    \"created_at\": \"20220315T200440Z\",\n    \"lastused_at\": \"19700101T000000Z\",\n    \"group_id\": \"04468c2b-ad54-4b3a-ba0b-6ad67b0a6bc1\",\n    \"enabled\": true,\n    \"description\": \"\",\n    \"never_exportable\": false,\n    \"state\": \"Active\",\n    \"activation_date\": \"20220315T200440Z\",\n    \"acct_id\": \"cdab6346-3b68-40ed-9a00-9057ce723486\",\n    \"origin\": \"FortanixHSM\",\n    \"key_ops\": [\n      \"APPMANAGEABLE\"\n    ],\n    \"public_only\": false,\n    \"creator\": {\n      \"user\": \"b3e23fe0-dabc-402d-a911-f109e0c96f68\"\n    },\n    \"custom_metadata\": {\n      \"aws-aliases\": \"DSM-AES-source-key1\\r\\n\",\n      \"aws-policy\": \"{\\n\\\"Version\\\":\\\"2012-10-17\\\",\\n\\\"Id\\\":\\\"key-default-1\\\",\\n \\\"Statement\\\":[{\\n\\\"Sid\\\":\\\"Enable IAM User Permissions\\\",\\n\\\"Effect\\\":\\\"Allow\\\",\\n\\\"Principal\\\":{\\n\\\"AWS\\\":\\\"arn:aws:iam::123471887489:iamusr\\\"\\n},\\n    \\\"Action\\\":\\\"kms:*\\\",\\n\\\"Resource\\\":\\\"*\\\"\\n} ]\\n}\",\n      \"aws-key-state\": \"Enabled\"\n    },\n    \"external\": {\n      \"hsm_group_id\": \"04468c2b-ad54-4b3a-ba0b-6ad67b0a6bc1\",\n      \"id\": {\n        \"key_arn\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n        \"key_id\": \"94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n      }\n    },\n    \"links\": {\n      \"copiedFrom\": \"a70fe8fb-588a-446b-aa3c-2576ec647425\"\n    },\n    \"aes\": {\n      \"key_sizes\": null,\n      \"tag_length\": null,\n      \"random_iv\": null,\n      \"fpe\": null,\n      \"iv_length\": null,\n      \"cipher_mode\": null\n    },\n    \"compliant_with_policies\": true\n  }\n]\n```\n\nNow that you have confirmed the presence of an AWS Cloud KMS key in the Fortanix DSM group that thsis Plugin\nbelongs to, you may invoke the plugin with the following input to initialize the cloud operations:\n```\n{\n  \"operation\": \"configure\",\n  \"region\": \"us-east-2\",\n  \"access_key\": \"AKRAVOI8NGDNB0426...\",\n  \"secret_key\": \"Bt2rPIGp9aXt8h2y2...\"\n}\n```\n\nIf successful, you'd see an output like this:\n```\n{\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\n\nYou can copy the JSON output key and value or just the value to substitute in latter operations.\nTo check if the AWS IAM access key is valid and has sufficient permissions, run the `list-aws-events`\nread-only operation using the `secret_id` input:\n\n```\n{\n  \"operation\": \"list-aws-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\nThe output should list all events from AWS CloudTrail, as there is no explicit lookup attribute\nspecified. However, for the `merge-events` operation, the Plugin will apply an implicit and pertinent KMS filter.\n\nAlternatively, add an explicit filter as follows:\n```\n{\n  \"operation\": \"list-aws-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"lookup_attribkey\": \"EventSource\",\n  \"lookup_attribval\": \"kms.amazonaws.com\"\n}\n```\n\nIf the `secret_id` is correct you'd see an output like this:\n```\n[\n  {\n    \"target\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"who\": \"IAMUser <123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"what\": \"EnableKey\",\n    \"ts\": 1647459645,\n    \"when\": \"2022-03-16T19:40:45Z\"\n  },\n  {\n    \"what\": \"ListResourceTags\",\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"who\": \"IAMUser <123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"target\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"ts\": 1647379036\n  }\n]\n```\n\nAnother operation to help in troubleshooting is `list-aws-keys`, which should find relevant keys in\nFortanix DSM that were copied to AWS Cloud KMS and accessible through IAM access key configured earlier.\n\nThis operation only requires the `secret_id` parameter as follows:\n```\n{\n  \"operation\": \"list-aws-keys\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\nIf the `secret_id` is correct you'd see an output like this:\n```\n{\n  \"Keys\": [\n    {\n      \"KeyArn\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n      \"KeyId\": \"94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n    },\n    {\n      \"KeyArn\": \"arn:aws:kms:us-east-2:123471887489:key/bc9ba11e-8161-4d2d-b151-58aed08d140e\",\n      \"KeyId\": \"bc9ba11e-8161-4d2d-b151-58aed08d140e\"\n    }\n  ]\n}\n```\n\nThe main operations as per the objective of this plugin are `merge-events` and `upload-events`.\nWhile `merge-events` only displays the output after synchronizing the events from AWS CloudTrail and\nFortanix DSM Audit history, the latter uploads the events to Amazon S3.\n```\n{\n  \"operation\": \"merge-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"revchrono\": true\n}\n```\nIf the `secret_id` is correct you'd see an output like this:\n```\n[\n  {\n    \"source\": \"fortanix-dsm\",\n    \"who\": \"User <b3e23fe0-dabc-402d-a911-f109e0c96f68>\",\n    \"when\": \"2022-03-16T19:44:21Z\",\n    \"target\": \"ADMINISTRATIVE/55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"ts\": 1647459861,\n    \"what\": \"User \\\"anjunas@fortanix.com\\\" updated key \\\"Master-Key\\\". Changes: custom metadata updated\"\n  },\n  {\n    \"ts\": 1647459861,\n    \"source\": \"aws-cloudtrail\",\n    \"when\": \"2022-03-16T19:44:21Z\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"what\": \"EnableKey\",\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\"\n  },\n  {\n    \"source\": \"fortanix-dsm\",\n    \"who\": \"User <b3e23fe0-dabc-402d-a911-f109e0c96f68>\",\n    \"when\": \"2022-03-16T19:40:45Z\",\n    \"ts\": 1647459645,\n    \"target\": \"ADMINISTRATIVE/55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"what\": \"User \\\"anjunas@fortanix.com\\\" updated key \\\"Master-Key\\\". Changes: state enabled\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"ts\": 1647379036,\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"DescribeKey\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n  },\n  {\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"ts\": 1647379036,\n    \"source\": \"aws-cloudtrail\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"what\": \"ImportKeyMaterial\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"GetParametersForImport\",\n    \"ts\": 1647379036,\n    \"when\": \"2022-03-15T21:17:16Z\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"ListResourceTags\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"ts\": 1647379036,\n    \"when\": \"2022-03-15T21:17:16Z\"\n  }\n]\n```\n\nThe latter operation first calls `merge-events` and then uses the specified input parameters to upload\nthe combined events in a single file to an Amazon S3 bucket object.\n```\n{\n  \"operation\": \"upload-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"bucket\": \"testbucket\",\n  \"object_key\": \"fortanix-events\"\n}\n```\nNote that the Amazon S3 object key name taken from the input is programmatically appended with a timestamp\nand .json extension, which will be output as follows:\n```\n{\n  \"key\": \"https://testbucket.s3.amazonaws.com/fortanix-events-1648160258.json\"\n}\n```\n\n## References\n\n * [Fortanix DSM Cloud Data Control with AWS Cloud KMS](https://support.fortanix.com/hc/en-us/articles/360055605471-User-s-Guide-AWS-External-KMS)\n * [Fortanix DSM Audit logs](https://support.fortanix.com/hc/en-us/articles/360016047631-User-s-Guide-Logging)\n * [AWS CloudTrail LookupEvents documentation](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.htm)",
                "short_description": "This plugin can be used to synchronize events from AWS CloudTrail against keys in Fortanix DSM",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "76b7dd157b71351fa105e1a3de0f8f00918f2056"
            },
            "1.1": {
                "path": "aws-cloudtrail-sync/plugin.lua",
                "description": "# Synchronize events between Fortanix DSM and AWS CloudTrail\n\nThis plugin can be used to syncrhonize events from AWS CloudTrail with DSM Audit log\nfor keys in DSM that were brought into AWS Cloud KMS (BYOK as part of Cloud-Data-Control.\nThe merged events can be uploaded to Amazon S3.\n\n## Input Commands\n\nThe plugin accepts a JSON object as input with the following mandatory fields:\n\n- `operation`: the operation to execute, see below for a list of operations,\n- `secret_id`: a string identifying the DSM secret object containing the AWS IAM\n    credentials. This is not required and instead output from the `configure` operation.\n\nSome operations require more fields in the input as noted below.\n\nThe plugin accepts the following operations:\n\n### Configure\n- `configure`: generates a new secret with AWS IAM credentials it receives as input\n  in a DSM security object named randomly.\n\n  The input parameters are:\n  - Access Key Id: String\n  - Secret Access Key: String\n  - Region: String; defaults to `us-west-1`\n  - Session Token: (optional) String; obtained through AWS STS\n\n  The output contains a JSON object with a key called `secret_id` that is the UUID of the \n  DSM secret and will be used in all subsequent operations.\n  The AWS IAM access key needs to have permission to read CloudTrail events and also write\n  to an Amazon S3 bucket.\n\n### List DSM Keys\n- `list-dsm-keys`: fetches all AWS Cloud KMS relevant keys from Fortanix DSM groups\n  the plugin is a member of.\n\n  The input parameters are:\n  - Key: (optional) String; to filter by key name or UUID in Fortanix DSM\n\n  The output contains a JSON object array of keys that were copied to AWS Cloud KMS using \n  Fortanix Cloud Data Control, found across groups within Fortanix DSM that the plugin is \n  a member of.\n  More information regarding Cloud Data Control keys is available at [Fortanix DSM with External AWS Cloud KMS](https://support.fortanix.com/hc/en-us/articles/360055605471-User-s-Guide-AWS-External-KMS)\n\n### List DSM Events\n- `list-dsm-events`: fetches all events from Fortanix DSM relevant to the AWS Cloud KMS copied\n  keys, or events pertaining any specific keys, as per input.\n\n  The input parameters are:\n  - Key: (optional) String; to filter by key name or UUID in Fortanix DSM\n\n  The output contains a JSON object array of events in Fortanix DSM corresponding to keys\n  that were copied to AWS Cloud KMS using Fortanix Cloud Data Control, found across groups\n  within Fortanix DSM that the plugin is a member of.\n\n### List AWS Keys\n- `list-aws-keys`: fetches all keys from AWS Cloud KMS accessible to the AWS IAM credential.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n\n  The output contains a JSON object array containing of keys found in AWS Cloud KMS. The region will\n  correspond to that specified during the `configure` operation.\n\n### List AWS Events\n- `list-aws-events`: fetches all events from AWS CloudTrail, if no filters are specified.\n  More information regarding filters is available at [AWS CloudTrail LookupEvents documentation](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.htm)\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Lookup Attribute Key: String or Array\n  - Lookup Attribute Value: String or Array; if latter, sized as per the Lookup Attribute Key array.\n\n### Merge Events\n- `merge-events`: fetches all events from AWS CloudTrail, and merges with Audit log from Fortanix DSM.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Reverse Chronology: Boolean; defaults to `false`, unless set to `true`.\n\n  The output contains a JSON object array containing of events in chronological (or reverse) across both\n  AWS CloudTrail and Fortanix DSM for keys that are common across both systems.\n\n### Upload Events\n- `upload-events`: uploads a single file with output from Merge Events operation on to Amazon S3.\n\n  The input parameters are:\n  - Secret ID: UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n  - Bucket: String; name of the Amazon S3 bucket.\n  - Object Key: String; name of the Amazon S3 bucket object key to create or update.\n\n  The output contains a JSON object array containing of events in chronological (or reverse) across both\n  AWS CloudTrail and Fortanix DSM for keys that are common across both systems.\n\n\n## Example Usage\n\nInvoke the plugin with the following input to check for AWS Cloud KMS keys in Fortanix DSM:\n```\n{\n  \"operation\": \"list-dsm-keys\",\n  \"key\": \"55526741-7528-44d4-89de-9db3d1e93fc3\"\n}\n\n```\nIf pertinent keys are found, the output will be (an array of or) a single Security Object(s) as follows:\n```\n[\n  {\n    \"kid\": \"55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"name\": \"Master-S3-Key-Service_Copy(copied at 15-03-2022 04:04:40.542)\",\n    \"key_size\": 256,\n    \"obj_type\": \"AES\",\n    \"created_at\": \"20220315T200440Z\",\n    \"lastused_at\": \"19700101T000000Z\",\n    \"group_id\": \"04468c2b-ad54-4b3a-ba0b-6ad67b0a6bc1\",\n    \"enabled\": true,\n    \"description\": \"\",\n    \"never_exportable\": false,\n    \"state\": \"Active\",\n    \"activation_date\": \"20220315T200440Z\",\n    \"acct_id\": \"cdab6346-3b68-40ed-9a00-9057ce723486\",\n    \"origin\": \"FortanixHSM\",\n    \"key_ops\": [\n      \"APPMANAGEABLE\"\n    ],\n    \"public_only\": false,\n    \"creator\": {\n      \"user\": \"b3e23fe0-dabc-402d-a911-f109e0c96f68\"\n    },\n    \"custom_metadata\": {\n      \"aws-aliases\": \"DSM-AES-source-key1\\r\\n\",\n      \"aws-policy\": \"{\\n\\\"Version\\\":\\\"2012-10-17\\\",\\n\\\"Id\\\":\\\"key-default-1\\\",\\n \\\"Statement\\\":[{\\n\\\"Sid\\\":\\\"Enable IAM User Permissions\\\",\\n\\\"Effect\\\":\\\"Allow\\\",\\n\\\"Principal\\\":{\\n\\\"AWS\\\":\\\"arn:aws:iam::123471887489:iamusr\\\"\\n},\\n    \\\"Action\\\":\\\"kms:*\\\",\\n\\\"Resource\\\":\\\"*\\\"\\n} ]\\n}\",\n      \"aws-key-state\": \"Enabled\"\n    },\n    \"external\": {\n      \"hsm_group_id\": \"04468c2b-ad54-4b3a-ba0b-6ad67b0a6bc1\",\n      \"id\": {\n        \"key_arn\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n        \"key_id\": \"94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n      }\n    },\n    \"links\": {\n      \"copiedFrom\": \"a70fe8fb-588a-446b-aa3c-2576ec647425\"\n    },\n    \"aes\": {\n      \"key_sizes\": null,\n      \"tag_length\": null,\n      \"random_iv\": null,\n      \"fpe\": null,\n      \"iv_length\": null,\n      \"cipher_mode\": null\n    },\n    \"compliant_with_policies\": true\n  }\n]\n```\n\nNow that you have confirmed the presence of an AWS Cloud KMS key in the Fortanix DSM group that thsis Plugin\nbelongs to, you may invoke the plugin with the following input to initialize the cloud operations:\n```\n{\n  \"operation\": \"configure\",\n  \"region\": \"us-east-2\",\n  \"access_key\": \"AKRAVOI8NGDNB0426...\",\n  \"secret_key\": \"Bt2rPIGp9aXt8h2y2...\"\n}\n```\n\nIf successful, you'd see an output like this:\n```\n{\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\n\nYou can copy the JSON output key and value or just the value to substitute in latter operations.\nTo check if the AWS IAM access key is valid and has sufficient permissions, run the `list-aws-events`\nread-only operation using the `secret_id` input:\n\n```\n{\n  \"operation\": \"list-aws-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\nThe output should list all events from AWS CloudTrail, as there is no explicit lookup attribute\nspecified. However, for the `merge-events` operation, the Plugin will apply an implicit and pertinent KMS filter.\n\nAlternatively, add an explicit filter as follows:\n```\n{\n  \"operation\": \"list-aws-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"lookup_attribkey\": \"EventSource\",\n  \"lookup_attribval\": \"kms.amazonaws.com\"\n}\n```\n\nIf the `secret_id` is correct you'd see an output like this:\n```\n[\n  {\n    \"target\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"who\": \"IAMUser <123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"what\": \"EnableKey\",\n    \"ts\": 1647459645,\n    \"when\": \"2022-03-16T19:40:45Z\"\n  },\n  {\n    \"what\": \"ListResourceTags\",\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"who\": \"IAMUser <123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"target\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"ts\": 1647379036\n  }\n]\n```\n\nAnother operation to help in troubleshooting is `list-aws-keys`, which should find relevant keys in\nFortanix DSM that were copied to AWS Cloud KMS and accessible through IAM access key configured earlier.\n\nThis operation only requires the `secret_id` parameter as follows:\n```\n{\n  \"operation\": \"list-aws-keys\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\nIf the `secret_id` is correct you'd see an output like this:\n```\n{\n  \"Keys\": [\n    {\n      \"KeyArn\": \"arn:aws:kms:us-east-2:123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n      \"KeyId\": \"94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n    },\n    {\n      \"KeyArn\": \"arn:aws:kms:us-east-2:123471887489:key/bc9ba11e-8161-4d2d-b151-58aed08d140e\",\n      \"KeyId\": \"bc9ba11e-8161-4d2d-b151-58aed08d140e\"\n    }\n  ]\n}\n```\n\nThe main operations as per the objective of this plugin are `merge-events` and `upload-events`.\nWhile `merge-events` only displays the output after synchronizing the events from AWS CloudTrail and\nFortanix DSM Audit history, the latter uploads the events to Amazon S3.\n```\n{\n  \"operation\": \"merge-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"revchrono\": true\n}\n```\nIf the `secret_id` is correct you'd see an output like this:\n```\n[\n  {\n    \"source\": \"fortanix-dsm\",\n    \"who\": \"User <b3e23fe0-dabc-402d-a911-f109e0c96f68>\",\n    \"when\": \"2022-03-16T19:44:21Z\",\n    \"target\": \"ADMINISTRATIVE/55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"ts\": 1647459861,\n    \"what\": \"User \\\"anjunas@fortanix.com\\\" updated key \\\"Master-Key\\\". Changes: custom metadata updated\"\n  },\n  {\n    \"ts\": 1647459861,\n    \"source\": \"aws-cloudtrail\",\n    \"when\": \"2022-03-16T19:44:21Z\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"what\": \"EnableKey\",\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\"\n  },\n  {\n    \"source\": \"fortanix-dsm\",\n    \"who\": \"User <b3e23fe0-dabc-402d-a911-f109e0c96f68>\",\n    \"when\": \"2022-03-16T19:40:45Z\",\n    \"ts\": 1647459645,\n    \"target\": \"ADMINISTRATIVE/55526741-7528-44d4-89de-9db3d1e93fc3\",\n    \"what\": \"User \\\"anjunas@fortanix.com\\\" updated key \\\"Master-Key\\\". Changes: state enabled\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"ts\": 1647379036,\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"DescribeKey\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\"\n  },\n  {\n    \"when\": \"2022-03-15T21:17:16Z\",\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"ts\": 1647379036,\n    \"source\": \"aws-cloudtrail\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"what\": \"ImportKeyMaterial\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"GetParametersForImport\",\n    \"ts\": 1647379036,\n    \"when\": \"2022-03-15T21:17:16Z\"\n  },\n  {\n    \"who\": \"IAMUser <[123471887489/sdkmsusr/AKIA3DQTYPR7TLMRXTCS>\",\n    \"source\": \"aws-cloudtrail\",\n    \"what\": \"ListResourceTags\",\n    \"target\": \"arn:aws:kms:us-east-2:[123471887489:key/94c76869-d14f-4ca9-9980-a88be78f8f7b\",\n    \"ts\": 1647379036,\n    \"when\": \"2022-03-15T21:17:16Z\"\n  }\n]\n```\n\nThe latter operation first calls `merge-events` and then uses the specified input parameters to upload\nthe combined events in a single file to an Amazon S3 bucket object.\n```\n{\n  \"operation\": \"upload-events\",\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\",\n  \"bucket\": \"testbucket\",\n  \"object_key\": \"fortanix-events\"\n}\n```\nNote that the Amazon S3 object key name taken from the input is programmatically appended with a timestamp\nand .json extension, which will be output as follows:\n```\n{\n  \"key\": \"https://testbucket.s3.amazonaws.com/fortanix-events-1648160258.json\"\n}\n```\n\n## References\n\n * [Fortanix DSM Cloud Data Control with AWS Cloud KMS](https://support.fortanix.com/hc/en-us/articles/360055605471-User-s-Guide-AWS-External-KMS)\n * [Fortanix DSM Audit logs](https://support.fortanix.com/hc/en-us/articles/360016047631-User-s-Guide-Logging)\n * [AWS CloudTrail LookupEvents documentation](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.htm)",
                "short_description": "This plugin can be used to synchronize events from AWS CloudTrail against keys in Fortanix DSM",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "TOTP Ethereum Signer",
        "versions": {
            "1.0": {
                "path": "totp-eth-signer/plugin.lua",
                "description": "# TOTP Ethereum Signer\r\n\r\nThis plugin implements an Ethereum Signer. Each Ethereum Signer is paired with a `MASTER_KEY`. Several wallets can be added to each Ethereum Signer. Several keys can be added to each wallet.\r\n\r\nA wallet can optionally be registered to support 2FA using Time-based One-Time Passwords (TOTP).\r\n\r\nTo support TOTP, this plugin implements the algorithms described in RFC 6238 (TOTP). The code is adapted from https://github.com/remjey/luaotp/blob/v0.1-6/src/otp.lua\r\n\r\nCustomers of B2C crypto-currency wallet providers can register with the secure 2FA service provided via this plugin. This provides them with additional security. Specifically, a customers assets cannot be spent without their explicit involvement in the transaction.\r\n\r\n## Use cases\r\n\r\nThe plugin can be used to:\r\n\r\n - Optionally Register a user for 2FA using TOTP\r\n - Derive public key\r\n - Sign data or Ethereum transaction\r\n\r\n## Setup\r\n\r\n - Generate master key manually\r\n\r\n - **Example Master Key:** `xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U`\r\n\r\n - Import master key in SDKMS as secret raw key and name it as `MASTER_KEY`.\r\n\r\n## Register a user for 2FA using TOTP\r\n\r\n **Input Format**\r\n\r\n```\r\n{\r\n  \"operation\": \"register\",\r\n  \"walletName\": \"string, e.g., alice@acme.com\"\r\n}\r\n```\r\n\r\n**Output Format**\r\n\r\n```\r\n{\r\n  \"url\": \"otpauth url\",\r\n  \"security_object\": \"security object\"\r\n}\r\n```\r\n\r\n**Example Input**\r\n\r\n```\r\n{\r\n  \"operation\": \"register\",\r\n  \"walletName\": \"alice@acme.com\"\r\n}\r\n```\r\n\r\n**Example Output**\r\n\r\n```\r\n{\r\n  \"url\": \"otpauth://totp/Fortanix%20DSM:alice%40acme.com?secret=4RWQ3LFNQEWIBZZYGIYYXAU7&issuer=Fortanix%20DSM&period=30&digits=6&algorithm=SHA1\",\r\n  \"security_object\": \"totp/alice@acme.com\"\r\n}\r\n```\r\n\r\n\r\n## Derive public key\r\n\r\n **Input Format**\r\n\r\n```\r\n{\r\n  \"operation\": \"getPubKey\",\r\n  \"walletName\": \"string\",\r\n  \"keyIndex\": \"number as string\"\r\n}\r\n```\r\n\r\n\r\n**Output Format**\r\n\r\n```\r\n{\r\n  \"xpub\": \"public key\"\r\n}\r\n```\r\n\r\n**Example Input**\r\n\r\n```\r\n{\r\n  \"operation\": \"getPubKey\",\r\n  \"walletName\": \"alice@example.com\",\r\n  \"keyIndex\": \"0\"\r\n}\r\n```\r\n\r\n **Example Output**\r\n\r\n```\r\n{\r\n  \"xpub\": \"02c04c4e03921809fcbef9a26da2d62b19b2b4eb383b3e6cfaaef6370e75144774\"\r\n}\r\n```\r\n\r\n## Sign data or Ethereum transaction\r\n\r\n **Input Format**\r\n\r\n```\r\n{\r\n  \"operation\": \"sign\",\r\n  \"walletName\": \"string\",\r\n  \"keyIndex\": \"number as string\",\r\n  \"msgHash\": \"<32-Byte-Message-Hash>\"\r\n  \"code\": \"number as string\" // code to be provided only if wallet is registered for 2FA.\r\n}\r\n```\r\n\r\n\r\n**Output Format**\r\n\r\n```\r\n{\r\n  \"r\": \"r-value of signature\",\r\n  \"s\": \"s-value of signature\",\r\n  \"xpub\": \"public key\"\r\n}\r\n```\r\n\r\n\r\n**Example Input**\r\n\r\n```\r\n{\r\n  \"operation\": \"sign\",\r\n  \"walletName\": \"alice@acme.com\",\r\n  \"keyIndex\": \"0\",\r\n  \"msgHash\": \"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\",\r\n  \"code\": \"583824\"  // code to be provided only if wallet is registered for 2FA.\r\n}\r\n```\r\n\r\n**Example Output**\r\n\r\n```\r\n{\r\n  \"xpub\": \"036b3c4b464c34d0478341a43f1af9fa93234e99acc175494e94321af4527ef14c\",\r\n  \"s\": \"060647fae5f8a755fc7d6adb3b87bfb025fbdd0b777001d69a32de0c6cabc414\",\r\n  \"r\": \"a5f4c06a3fffca8cdf44b34451bc87e36d9ff23cc9c1e26c7e2e9165b35b55be\"\r\n}\r\n```\r\n\r\n\r\n## Security Considerations\r\n\r\nThe plugin stores one `HMAC` key per 2FA account, this key is not exportable so that the secret can only be accessed when the account is created (through the `register` operation). However, note that TOTP is a shared secret scheme where the `HMAC` secret is known to both the prover and verifier parties. The verifier (in this case the plugin) is executed inside Fortanix DSM and is protected with strong security mechanisms available in DSM. The prover, i.e. the 2FA app, and any other tools with access to the URL or QR code on the other hand are not protected in the same way. Care should be taken to avoid compromising the secret through such tools.\r\n\r\nThe plugin additionally stores some metadata with the `HMAC` key to keep track of the TOTP parameters as well as the last counter value (last timestamp divided by period). The counter is updated every time the plugin is invoked to verify a code. Any user or application with access to the `HMAC` key can therefore find out the timestamp of the last successful verification performed by the plugin for that account. Therefore it is recommended to limit access to the `HMAC` key(s) used by this plugin as much as possible.",
                "short_description": "This plugin implements an Ethereum Signer. A wallet can optionally be registered to support 2FA using Time-based One Time Passwords (TOTP).",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Tendermint One Time Signer",
        "versions": {
            "1.0": {
                "path": "tendermint-one-time-signer/plugin.lua",
                "description": "# Tendermint One Time Signer\r\n\r\nThis plugin implements a one-time signer for Tendermint based blockchains.  As an overview, the Tendermint One Time Signer keeps track of certain state which it uses to determine whether to sign a message or not during the consensus process. The objective is to avoid double-signing, which can be harmful to the blockchain network.\r\n\r\nThe Tendermint One Time Signer implements the double sign prevention logic described here: https://docs.tendermint.com/master/spec/consensus/signing.html.\r\n\r\n## Use cases\r\n\r\nThe plugin can be used to\r\n\r\n- Sign blockchain consensus messages of types: Prevote (1), Precommit (2) and Proposal (32).\r\n\r\n## Setup\r\n\r\n\r\n - Create a new group.\r\n\r\n - For the newly created group, update the key metadata policy to include the following custom attributes as **required**:\r\n\r\n\t   - Attribute name: height\r\n\t   - Attribute name: round\r\n\t   - Attribute name: type\r\n\r\n - Convert tendermint key to DER format. You can use the script provided below to do so.\r\n\r\n - Import the private key to DSM manually. Use type as **EC** and format as **Raw**.\r\n\r\n \t\t- Add the following three attributes to the key:\r\n\r\n       \t- Attribute name: height, value: -1\r\n\t   \t\t- Attribute name: round, value: -1\r\n\t   \t\t- Attribute name: type, value: -1\r\n\r\n \t\t- The name of the key should be `consensus-key`.\r\n\r\n\r\n## Script to Convert Tendermint key to DER format\r\n\r\n```\r\n#!/bin/bash\r\n# Usage: tendermint-ed25519.sh <input-tendermint> <output-private-p8der> <output-public-p8der>\r\n\r\ngokey=$(jq -r .priv_key.value $1 | base64 -d| xxd -p -c 64)\r\necho 302e 0201 0030 0506 032b 6570 0422 0420 \"${gokey:0:64}\" | xxd -p -r > $2\r\necho 302a 3005 0603 2b65 7003 2100 \"${gokey:64}\" | xxd -p -r > $3\r\n```\r\n\r\n## Example Tendermint Key\r\n\r\n```\r\n{\r\n  \"last_step\" : 0,\r\n  \"last_round\" : \"0\",\r\n  \"address\" : \"B788DEDE4F50AD8BC9462DE76741CCAFF87D51E2\",\r\n  \"pub_key\" : {\r\n    \"value\" : \"h3hk+QE8c6QLTySp8TcfzclJw/BG79ziGB/pIA+DfPE=\",\r\n    \"type\" : \"tendermint/PubKeyEd25519\"\r\n  },\r\n  \"last_height\" : \"0\",\r\n  \"priv_key\" : {\r\n    \"value\" : \"JPivl82x+LfVkp8i3ztoTjY6c6GJ4pBxQexErOCyhwqHeGT5ATxzpAtPJKnxNx/NyUnD8Ebv3OIYH+kgD4N88Q==\",\r\n    \"type\" : \"tendermint/PrivKeyEd25519\"\r\n  }\r\n}\r\n```\r\n\r\n## Input/Output JSON object format\r\n\r\n### Message Type: Prevote (1)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n \"type\": 1, // `integer`\r\n \"height\": `integer`,\r\n \"round\": `integer`,\r\n \"data\": `base64`,\r\n \"blockId_hash\": `hex`,\r\n \"blockId_parts_hash\": `hex`,\r\n \"blockId_parts_total\": `integer`\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": `base64`\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"message\": `string`,\r\n  \"status\": `integer`\r\n}\r\n```\r\n\r\n### Message Type: Precommit (2)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n \"type\": 2, // `integer`\r\n \"height\": `integer`,\r\n \"round\": `integer`,\r\n \"data\": `base64`\r\n \"blockId_hash\": `hex`,\r\n \"blockId_parts_hash\": `hex`,\r\n \"blockId_parts_total\": `integer`\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": `base64`\r\n}\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n{\r\n  \"message\": `string`,\r\n  \"status\": `integer`\r\n}\r\n```\r\n\r\n### Message Type: Proposal (32)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n \"type\": 32, // `integer`\r\n \"height\": `integer`,\r\n \"round\": `integer`,\r\n \"data\": `base64`,\r\n \"blockId_hash\": `hex`,\r\n \"blockId_parts_hash\": `hex`,\r\n \"blockId_parts_total\": `integer`\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": `base64`\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"message\": `string`,\r\n  \"status\": `integer`\r\n}\r\n```\r\n\r\n## Sample Input\r\n\r\n### Message Type: Prevote (1)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n   \"type\": 1,\r\n   \"round\": 1,\r\n   \"height\": 1,\r\n   \"blockId_hash\":\"C70B62CB6647F7F160B0C44F0A8E21F978CA986E0ACB51E125AE33AD717CBC0D\",\r\n   \"blockId_parts_hash\":\"D12E6344822FA80ED9CFBCFA4DB3BB9B5D69655C702588E333D3BE86C9308B2C\",\r\n   \"data\":\"bAgBEQEAAAAAAAAAIkgKIHzK9toM6l0SqKkh+CJEMAONkYT64oYm2U+w8JKm27cdEiQIARIgLwiMygrMYMoq33+bwI60pF4WBOPPyaqpAtszzZiH9RwqDAiRxuKTBhC9zIqhAzIHdGVzdGh1Yg==\",\r\n   \"blockId_parts_total\": 1\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": \"SgGG8XxAavBhrDn600vPfCBuS/LDrJfh/ujBCw54l1T3M924IhPWNOnyPhPAEqVhXsXutcJe6rtt97VpQ7vVDg==\"\r\n}\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n{\r\n  \"message\": \"Double sign prevented.\",\r\n  \"status\": 500\r\n}\r\n```\r\n\r\n### Message Type: Precommit (2)\r\n\r\n**Input**\r\n\r\n```\r\n{\r\n   \"type\": 2,\r\n   \"round\": 1,\r\n   \"height\": 2,\r\n   \"blockId_hash\":\"C70B62CB6647F7F160B0C44F0A8E21F978CA986E0ACB51E125AE33AD717CBC0D\",\r\n   \"blockId_parts_hash\":\"D12E6344822FA80ED9CFBCFA4DB3BB9B5D69655C702588E333D3BE86C9308B2C\",\r\n   \"data\":\"bAgBEQEAAAAAAAAAIkgKIHzK9toM6l0SqKkh+CJEMAONkYT64oYm2U+w8JKm27cdEiQIARIgLwiMygrMYMoq33+bwI60pF4WBOPPyaqpAtszzZiH9RwqDAiRxuKTBhC9zIqhAzIHdGVzdGh1Yg==\",\r\n   \"blockId_parts_total\": 1\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": \"SgGG8XxAavBhrDn600vPfCBuS/LDrJfh/ujBCw54l1T3M924IhPWNOnyPhPAEqVhXsXutcJe6rtt97VpQ7vVDg==\"\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"message\": \"Double sign prevented.\",\r\n  \"status\": 500\r\n}\r\n```\r\n\r\n### Message Type: Proposal (32)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n   \"type\": 32,\r\n   \"round\": 1,\r\n   \"height\": 3,\r\n   \"blockId_hash\":\"C70B62CB6647F7F160B0C44F0A8E21F978CA986E0ACB51E125AE33AD717CBC0D\",\r\n   \"blockId_parts_hash\":\"D12E6344822FA80ED9CFBCFA4DB3BB9B5D69655C702588E333D3BE86C9308B2C\",\r\n   \"data\":\"bAgBEQEAAAAAAAAAIkgKIHzK9toM6l0SqKkh+CJEMAONkYT64oYm2U+w8JKm27cdEiQIARIgLwiMygrMYMoq33+bwI60pF4WBOPPyaqpAtszzZiH9RwqDAiRxuKTBhC9zIqhAzIHdGVzdGh1Yg==\",\r\n   \"blockId_parts_total\": 1\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"signature\": \"SgGG8XxAavBhrDn600vPfCBuS/LDrJfh/ujBCw54l1T3M924IhPWNOnyPhPAEqVhXsXutcJe6rtt97VpQ7vVDg==\"\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"message\": \"Double sign prevented.\",\r\n  \"status\": 500\r\n}\r\n```\r",
                "short_description": "The Tendermint One Time Signer plugin keeps track of certain state which it uses to determine whether to sign a message or not during the consensus process. The objective is to avoid double-signing, which can be harmful to the blockchain network.",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "b9ccc11c52d265272b799f4b1dc64b2e5be65e1d"
            },
            "1.1": {
                "path": "tendermint-one-time-signer/plugin.lua",
                "description": "# Tendermint One Time Signer\r\n\r\nThis plugin implements a one-time signer for Tendermint based blockchains.  As an overview, the Tendermint One Time Signer keeps track of certain state which it uses to determine whether to sign a message or not during the consensus process. The objective is to avoid double-signing, which can be harmful to the blockchain network.\r\n\r\nThe Tendermint One Time Signer implements the double sign prevention logic described here: https://docs.tendermint.com/master/spec/consensus/signing.html.\r\n\r\n## Use cases\r\n\r\nThe plugin can be used to\r\n\r\n- Sign blockchain consensus messages of types: Prevote (1), Precommit (2) and Proposal (32).\r\n\r\n## Setup\r\n\r\n\r\n - Create a new group.\r\n\r\n - For the newly created group, update the key metadata policy to include the following custom attributes as **required**:\r\n\r\n\t   - Attribute name: height\r\n\t   - Attribute name: round\r\n\t   - Attribute name: type\r\n\r\n - Convert tendermint key to DER format. You can use the script provided below to do so.\r\n\r\n - Import the private key to DSM manually. Use type as **EC** and format as **Raw**.\r\n\r\n \t\t- Add the following three attributes to the key:\r\n\r\n       \t- Attribute name: height, value: -1\r\n\t   \t\t- Attribute name: round, value: -1\r\n\t   \t\t- Attribute name: type, value: -1\r\n\r\n \t\t- The name of the key should be `consensus-key`.\r\n\r\n\r\n## Script to Convert Tendermint key to DER format\r\n\r\n```\r\n#!/bin/bash\r\n# Usage: tendermint-ed25519.sh <input-tendermint> <output-private-p8der> <output-public-p8der>\r\n\r\ngokey=$(jq -r .priv_key.value $1 | base64 -d| xxd -p -c 64)\r\necho 302e 0201 0030 0506 032b 6570 0422 0420 \"${gokey:0:64}\" | xxd -p -r > $2\r\necho 302a 3005 0603 2b65 7003 2100 \"${gokey:64}\" | xxd -p -r > $3\r\n```\r\n\r\n## Example Tendermint Key\r\n\r\n```\r\n{\r\n  \"last_step\" : 0,\r\n  \"last_round\" : \"0\",\r\n  \"address\" : \"B788DEDE4F50AD8BC9462DE76741CCAFF87D51E2\",\r\n  \"pub_key\" : {\r\n    \"value\" : \"h3hk+QE8c6QLTySp8TcfzclJw/BG79ziGB/pIA+DfPE=\",\r\n    \"type\" : \"tendermint/PubKeyEd25519\"\r\n  },\r\n  \"last_height\" : \"0\",\r\n  \"priv_key\" : {\r\n    \"value\" : \"JPivl82x+LfVkp8i3ztoTjY6c6GJ4pBxQexErOCyhwqHeGT5ATxzpAtPJKnxNx/NyUnD8Ebv3OIYH+kgD4N88Q==\",\r\n    \"type\" : \"tendermint/PrivKeyEd25519\"\r\n  }\r\n}\r\n```\r\n\r\n## Sample Input\r\n\r\n### Message Type: Prevote (1)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n  \"block_id\": {\r\n    \"hash\": \"7CCAF6DA0CEA5D12A8A921F8224430038D9184FAE28626D94FB0F092A6DBB71D\",\r\n    \"part_set_header\": {\r\n      \"hash\": \"2F088CCA0ACC60CA2ADF7F9BC08EB4A45E1604E3CFC9AAA902DB33CD9887F51C\",\r\n      \"total\": 1\r\n    }\r\n  },\r\n  \"data\": \"bAgBEQEAAAAAAAAAIkgKIHzK9toM6l0SqKkh+CJEMAONkYT64oYm2U+w8JKm27cdEiQIARIgLwiMygrMYMoq33+bwI60pF4WBOPPyaqpAtszzZiH9RwqDAiRxuKTBhC9zIqhAzIHdGVzdGh1Yg==\",\r\n  \"height\": 1,\r\n  \"kid\": \"\",\r\n  \"pol_round\": -99,\r\n  \"req_type\": 1,\r\n  \"round\": 0,\r\n  \"step\": 1\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"status\": 200,\r\n  \"signature\": \"rCsFAhVoyhe5dr0/xjOPYDCD62FtsrNa98QJsjRrbfwlmwHUpPM3L8CfB+wI6uSKxYU8gtp9g1bVm7EDAXxqDA==\"\r\n}\r\n```\r\n\r\n**Error**\r\n\r\n```\r\n{\r\n  \"message\": \"Double sign prevented.\",\r\n  \"status\": 500\r\n}\r\n```\r\n\r\n### Message Type: Precommit (2)\r\n\r\n**Input**\r\n\r\n```\r\n{\r\n  \"block_id\": null,\r\n  \"data\": \"bAgBEQEAAAAAAAAAIkgKIHzK9toM6l0SqKkh+CJEMAONkYT64oYm2U+w8JKm27cdEiQIARIgLwiMygrMYMoq33+bwI60pF4WBOPPyaqpAtszzZiH9RwqDAiRxuKTBhC9zIqhAzIHdGVzdGh1Yg==\",\r\n  \"height\": 10,\r\n  \"kid\": \"\",\r\n  \"pol_round\": -99,\r\n  \"req_type\": 2,\r\n  \"round\": 0,\r\n  \"step\": 1\r\n}\r\n\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"status\": 200,\r\n  \"signature\": \"rCsFAhVoyhe5dr0/xjOPYDCD62FtsrNa98QJsjRrbfwlmwHUpPM3L8CfB+wI6uSKxYU8gtp9g1bVm7EDAXxqDA==\"\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"message\": \"Double sign prevented.\",\r\n  \"status\": 500\r\n}\r\n```\r\n\r\n### Message Type: Proposal (32)\r\n\r\n **Input**\r\n\r\n```\r\n{\r\n  \"block_id\": {\r\n    \"hash\": \"7CCAF6DA0CEA5D12A8A921F8224430038D9184FAE28626D94FB0F092A6DBB71D\",\r\n    \"part_set_header\": {\r\n      \"hash\": \"2F088CCA0ACC60CA2ADF7F9BC08EB4A45E1604E3CFC9AAA902DB33CD9887F51C\",\r\n      \"total\": 1\r\n    }\r\n  },\r\n  \"data\": \"dwggEQEAAAAAAAAAIP///////////wEqSAogfMr22gzqXRKoqSH4IkQwA42RhPrihibZT7Dwkqbbtx0SJAgBEiAvCIzKCsxgyirff5vAjrSkXhYE48/JqqkC2zPNmIf1HDIMCI/G4pMGEN3f17kDOgd0ZXN0aHVi\",\r\n  \"height\": 100,\r\n  \"kid\": \"\",\r\n  \"pol_round\": -99,\r\n  \"req_type\": 32,\r\n  \"round\": 0,\r\n  \"step\": 0\r\n}\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n{\r\n  \"status\": 200,\r\n  \"signature\": \"rCsFAhVoyhe5dr0/xjOPYDCD62FtsrNa98QJsjRrbfwlmwHUpPM3L8CfB+wI6uSKxYU8gtp9g1bVm7EDAXxqDA==\"\r\n}\r\n```\r\n\r\n**Error**\r\n```\r\n{\r\n  \"status\": 500,\r\n  \"message\": \"Double sign prevented.\"\r\n}\r\n```\r",
                "short_description": "The Tendermint One Time Signer plugin keeps track of certain state which it uses to determine whether to sign a message or not during the consensus process. The objective is to avoid double-signing, which can be harmful to the blockchain network.",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Data Custodian Bring Your Own Key (BYOK)",
        "versions": {
            "1.0": {
                "path": "datacustodian/plugin.lua",
                "description": "# FORTANIX DSM DATA CUSTODIAN BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Data Custodian BYOK model.\n\n## Requirenment\n\n- Fortanix DMS Version >= 4.2.1528\n\n## Use cases\n\nThe plugin can be used to\n\n- Import a Fortanix DSM key (AES or RSA) into Data Custodian\n- Rotate a key in Fortanix DSM and import the new key version of an existing key into Data Custodian\n\n## Setup\n\n- Create a technical user in data custodian and obtain API Key and Secret for this user\n- Create KEK key in Data Custodian and get its Key Id and Version number\n- Obtain group id of the group in Data Custodian where you want to import keys\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Data Custodian Technical User credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `base_url`: Base URL for your Data Custodian instance\n* `api_key`: API key for technical user in Data Custodian\n* `secret`: Secret for technical user in Data Custodian. Please note you should have activated technical user's credential and use acticated crendential here\n\n#### Example\n\nInput JSON\n```\n{\n   \"operation\": \"configure\",\n   \"base_url\": \"https://api-kms-v2-preprod.datacustodian.cloud.sap\",\n   \"api_key\": \"eyJjcmVkZ.....VkNzkzNjEifQ==\",\n   \"secret\": \"EIVa......CYa8\"\n}\n```\n\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Import operation\n\nCreate operation will create a new key (RSA or AES) in Fortanix DSM and import it into Data Custodian. The key with the name provided should not already exist in DSM.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid values is `import`\n* `secret_id`: The response of `configuration` operation\n* `is_exportable`: Whether the imported key in Data Custodian should be exportable or not. Valif values for this are true or false\n* `datacustodian_role`: This is an optional parameter. This specified the Data Custodian role that should be given to the imported key. If not specified, role is set as UNSPECIFIED. For a complete list of value for role, please check Data Custodian documentation\n* `datacustodian_group_id`: Group Id of the group in Data Custodian where this key will be imported\n* `target_key_type`: Key type of the target key that you want to generate in DSM and import into Data Custodian. Valid values are RSA and AES\n* `target_key_name` : Name of the target key. This name will be used for the key in DSM and in Data Custodian\n* `target_key_description`: Description of the key. This description will be added to the imported key in Data Custodian\n* `target_key_size`: Size of target key. For RSA key type valid values are 2048, 3072, 4096 and for AES key type valid values are 128, 192 and 256\n* `target_key_version`: Version number of the target key. This version number will be used for the imported key in Data Custodian\n* `kek_key_id`: Id of the KEK in Data custodian. This key must exist in Data Custodian. BYOK process will download the public key from Data Custodian and import into DSM for wrapping key material\n* `kek_key_version`: Version number of the KEK in Data Custodian\n* `target_key_operations`: This is an optional parameter. If not specified, default values for the key type are used. Valid values for RSA key type are \"ENCRYPT\", \"DECRYPT\", \"SIGN\", \"VERIFY\", \"WRAP\", \"UNWRAP\" and valid values for AES key type are \"ENCRYPT\", \"DECRYPT\", \"WRAP\", \"UNWRAP\"\n\n#### Example\n\nInput JSON without specifying key operations (use default key operations)\n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"is_exportable\": false,\n  \"datacustodian_group_id\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n  \"target_key_type\" : \"RSA\",\n  \"target_key_name\": \"test-imported-key-20220517-01\",\n  \"target_key_description\": \"Test - This is a test key for BYOK from DSM\",\n  \"target_key_size\": 2048,\n  \"target_key_version\": 0,\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nInput JSON with specific key operations\n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"is_exportable\": true,\n  \"datacustodian_group_id\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n  \"target_key_type\" : \"RSA\",\n  \"target_key_name\": \"test-imported-key-20220517-20\",\n  \"target_key_description\": \"Test - This is a test key for BYOK from DSM\",\n  \"target_key_size\": 2048,\n  \"target_key_version\": 0,\n  \"target_key_operations\": [\"SIGN\", \"VERIFY\"],\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"exportable\": true,\n    \"id\": \"e89b3f06-0cf0-4e40-ba31-1237e638cc56\",\n    \"name\": \"test-imported-key-20220517-20\",\n    \"keystoreContext\": {\n      \"customerHeld\": false\n    },\n    \"role\": \"UNSPECIFIED\",\n    \"enabled\": true,\n    \"groupId\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n    \"meta\": {\n      \"primaryVersion\": 0,\n      \"beingRestored\": false,\n      \"templateGenerated\": false,\n      \"lastUsed\": null,\n      \"creatorName\": \"Txxx@service.datacustodian.cloud.sap\",\n      \"creatorId\": \"7a869e8c-3b19-4e10-8db8-c0864ed79361\",\n      \"imported\": true,\n      \"created\": \"2022-05-17T04:42:13.151180\",\n      \"totalVersions\": 1\n    },\n    \"size\": 2048,\n    \"description\": \"This is a test key for BYOK from DSM\",\n    \"type\": \"RSA\",\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\",\n      \"SIGN\",\n      \"UNWRAP\",\n      \"VERIFY\",\n      \"WRAP\"\n    ]\n  }\n}\n```\n\n### Rotate operation\n\nRotate operation will rotate an existing key (RSA or AES) in Fortanix DSM and import the new key into Data Custodian.  For rotate operation the key specified by target_key_name must already exist in DSM and the key specified by datacustodian_key_id must already exist in Data custodian.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid values is `rotate`\n* `secret_id`: The response of `configuration` operation\n* `datacustodian_key_id`: Key Id of key in Data Custodian which needs to be rotated \n* `target_key_name` : Name of the target key. This name will be used for the key in DSM and in Data Custodian\n* `target_key_version`: Version number of the target key. This version number will be used for the imported key in Data Custodian\n* `kek_key_id`: Id of the KEK in Data custodian. This key must exist in Data Custodian. BYOK process will download the public key from Data Custodian and import into DSM for wrapping key material\n* `kek_key_version`: Version number of the KEK in Data Custodian\n\n#### Example\n\nInput JSON \n```\n{\n  \"operation\": \"rotate\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"datacustodian_key_id\": \"2504681e-cfd2-44ee-ad63-66211560cc62\",\n  \"target_key_name\": \"test-imported-key-20220517-aes-01\",\n  \"target_key_version\": 0,\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\",\n      \"UNWRAP\",\n      \"WRAP\"\n    ],\n    \"meta\": {\n      \"totalVersions\": 3,\n      \"creatorId\": \"7a869e8c-3b19-4e10-8db8-c0864ed79361\",\n      \"templateGenerated\": false,\n      \"primaryVersion\": 2,\n      \"created\": \"2022-05-18T00:09:58\",\n      \"imported\": true,\n      \"lastUsed\": null,\n      \"beingRestored\": false,\n      \"creatorName\": \"Txxxx@service.datacustodian.cloud.sap\"\n    },\n    \"groupId\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n    \"name\": \"test-imported-key-20220517-aes-01\",\n    \"type\": \"AES\",\n    \"description\": \"This is a test key for BYOK from DSM\",\n    \"id\": \"2504681e-cfd2-44ee-ad63-66211560cc62\",\n    \"keystoreContext\": {\n      \"customerHeld\": false\n    },\n    \"size\": 256,\n    \"exportable\": true,\n    \"enabled\": true,\n    \"role\": \"UNSPECIFIED\"\n  }\n}\n```\n\n## References\n* [Data Custodian REST API](https://api-kms-v2-preprod.datacustodian.cloud.sap/kms/v2/ui/)\n\n## Release Notes\n Initial release",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Data Custodian. Using this plugin you can generate and export your key from Fortanix DSM in a wrapped form then use BYOK features of Data Custodian to import the key into Data Custodian.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "d06ad499fef8535684dd6b3a3796f8c9de570006"
            },
            "2.0": {
                "path": "datacustodian/plugin.lua",
                "description": "# FORTANIX DSM DATA CUSTODIAN BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Data Custodian BYOK model.\n\n## Requirement\n\n- Fortanix DSM Version >= 4.2.1528\n\n## Use cases\n\nThe plugin can be used to\n\n- Import a Fortanix DSM key (AES or RSA) into Data Custodian\n- Rotate a key in Fortanix DSM and import the new key version of an existing key into Data Custodian\n\nFortanix DSM keys (AES and RSA) can be imported into Data Custodian groups or rotated (if already imported) in both AWS and non-AWS keystore providers.\n\n## Setup\n\n- Create a technical user in data custodian and obtain API Key and Secret for this user\n- Create KEK key in Data Custodian and get its Key Id and Version number for Non AWS keystore provider.\n- Obtain group id of the group in Data Custodian where you want to import keys\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Data Custodian Technical User credential in Fortanix DSM and returns a UUID. You need to pass this UUID for other operations. This is a one time process. Configure operation is common for both Non AWS and AWS KMS keystore provider\n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `base_url`: Base URL for your Data Custodian instance. Base URL must not contain `/kms/v2/`.\n* `api_key`: API key for technical user in Data Custodian\n* `secret`: Secret for technical user in Data Custodian. Please note you should `not` have activated technical user's credential and use non activated credential here\n\n#### Example\n\nInput JSON\n```\n{\n   \"operation\": \"configure\",\n   \"base_url\": \"https://api-kms-v2-preprod.datacustodian.cloud.sap\",\n   \"api_key\": \"eyJjcmVkZ.....VkNzkzNjEifQ==\",\n   \"secret\": \"EIVa......CYa8\"\n}\n```\n\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Import operation\n\nImport operation will create a new key (RSA or AES) in Fortanix DSM and import it into Data Custodian. The key with the name provided should not already exist in DSM.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid values is `import`\n* `secret_id`: The response of `configuration` operation\n* `is_exportable`: Whether the imported key in Data Custodian should be exportable or not. Valid values for this are true or false. This parameter applies to non-AWS KMS keystore provider\n* `datacustodian_role`: This is an optional parameter. This specified the Data Custodian role that should be given to the imported key. If not specified, role is set as UNSPECIFIED. For a complete list of value for role, please check Data Custodian documentation\n* `datacustodian_group_id`: Group Id of the group in Data Custodian where this key will be imported.This is required to determine the provider of the target key in Data Custodian.\n* `target_key_type`: Key type of the target key that you want to generate in DSM and import into Data Custodian. Valid values are RSA and AES\n* `target_key_name` : Name of the target key. This name will be used for the key in DSM and in Data Custodian\n* `target_key_description`: Description of the key. This description will be added to the imported key in Data Custodian\n* `target_key_size`: Size of target key. For RSA key type valid values are 2048, 3072, 4096 and for AES key type valid values are 128, 192 and 256\n* `kek_key_id`: Id of the KEK in Data custodian. This key must exist in Data Custodian. BYOK process will download the public key from Data Custodian and import into DSM for wrapping key material. This parameter applies to non-AWS KMS keystore providers\n* `kek_key_version`: Version number of the KEK in Data Custodian. This parameter applies to non-AWS KMS keystore providers\n* `target_key_operations`: This is an optional parameter for Non AWS keystore provider. If not specified, default values for the key type are used. Valid values for RSA key type are \"ENCRYPT\", \"DECRYPT\", \"SIGN\", \"VERIFY\", \"WRAP\", \"UNWRAP\" and valid values for AES key type are \"ENCRYPT\", \"DECRYPT\", \"WRAP\", \"UNWRAP\". This is a required parameter for AWS KMS keystore provider. The valid values for RSA key type are [\"ENCRYPT\", \"DECRYPT\"] and [\"SIGN\", \"VERIFY\"] and valid values for AES key type are [\"ENCRYPT\", \"DECRYPT\"].\n* `kek_key_size` : The wrapping key size is required to create wrapping keys for target keys in the AWS KMS keystore provider. Valid values are 3072 and 4096. RSA wrapping key is generated for the target key created in the AWS KMS keystore provider.\n\n#### Example for Non AWS keystore provider\n\nInput JSON without specifying key operations (use default key operations)\n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"is_exportable\": false,\n  \"datacustodian_group_id\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n  \"target_key_type\" : \"RSA\",\n  \"target_key_name\": \"test-imported-key-20220517-01\",\n  \"target_key_description\": \"Test - This is a test key for BYOK from DSM\",\n  \"target_key_size\": 2048,\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nInput JSON with specific key operations\n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"is_exportable\": true,\n  \"datacustodian_group_id\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n  \"target_key_type\" : \"RSA\",\n  \"target_key_name\": \"test-imported-key-20220517-20\",\n  \"target_key_description\": \"Test - This is a test key for BYOK from DSM\",\n  \"target_key_size\": 2048,\n  \"target_key_operations\": [\"SIGN\", \"VERIFY\"],\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"exportable\": true,\n    \"id\": \"e89b3f06-0cf0-4e40-ba31-1237e638cc56\",\n    \"name\": \"test-imported-key-20220517-20\",\n    \"keystoreContext\": {\n      \"customerHeld\": false\n    },\n    \"role\": \"UNSPECIFIED\",\n    \"enabled\": true,\n    \"groupId\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n    \"meta\": {\n      \"primaryVersion\": 0,\n      \"beingRestored\": false,\n      \"templateGenerated\": false,\n      \"lastUsed\": null,\n      \"creatorName\": \"Txxx@service.datacustodian.cloud.sap\",\n      \"creatorId\": \"7a869e8c-3b19-4e10-8db8-c0864ed79361\",\n      \"imported\": true,\n      \"created\": \"2022-05-17T04:42:13.151180\",\n      \"totalVersions\": 1\n    },\n    \"size\": 2048,\n    \"description\": \"This is a test key for BYOK from DSM\",\n    \"type\": \"RSA\",\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\",\n      \"SIGN\",\n      \"UNWRAP\",\n      \"VERIFY\",\n      \"WRAP\"\n    ]\n  }\n}\n```\n\n#### Example for AWS keystore provider\n\nInput JSON \n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"a1b2c3d4-e5f6-7890-ab12-cd34ef56gh78\",\n  \"datacustodian_group_id\": \"12ab34cd-56ef-78gh-90ij-klmn123op456\",\n  \"target_key_type\" : \"RSA\",\n  \"target_key_name\": \"test-imported-key-20250313-01\",\n  \"target_key_description\": \"Test - This is a test key for BYOK from DSM\",\n  \"target_key_size\": 3072,\n  \"target_key_operations\": [\"ENCRYPT\", \"DECRYPT\"],\n  \"kek_key_size\" : 4096\n}\n```\nOutput JSON\n```\n{\n  \"kek_key_id\": \"abcd5678-ef90-1234-gh56-ijkl7890mnop\",\n  \"result\": {\n    \"id\": \"9f8e7d6c-5b4a-3210-9876-5432abcd1234\",\n    \"name\": \"test-imported-key-20250313-01\",\n    \"type\": \"RSA\",\n    \"keystoreContext\": {\n      \"customerHeld\": false,\n      \"nativeId\": \"arn:aws:kms:xxxxxxxxx:xxxxxxxxx:alias/xxxxxxxxxxxxxxx\"\n    },\n    \"size\": 3072,\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\"\n    ],\n    \"role\": \"UNSPECIFIED\",\n    \"enabled\": true,\n    \"description\": \"Test - This is a test key for BYOK from DSM\",\n    \"meta\": {\n      \"templateGenerated\": false,\n      \"imported\": true,\n      \"totalVersions\": 1,\n      \"created\": \"2025-03-12T23:03:04\",\n      \"expired\": false,\n      \"lastModified\": \"2025-03-12T23:03:08\",\n      \"beingRestored\": false,\n      \"primaryVersion\": 0\n    },\n    \"exportable\": false,\n    \"groupId\": \"12ab34cd-56ef-78gh-90ij-klmn123op456\",\n    \"state\": \"ENABLED\"\n  }\n}\n```\nThe returned result includes the successful API response for importing the key from Fortanix DSM to Data Custodian, along with the id of the wrapping key created for the target key in the AWS KMS keystore provider required as a parameter in rotate operation.\n\n### Rotate operation\n\nRotate operation will rotate an existing key (RSA or AES) in Fortanix DSM and import the new key into Data Custodian. For rotate operation the key specified by target_key_name must already exist in DSM and the key specified by datacustodian_key_id must already exist in Data custodian.\n\n#### Parameters\n\n* `operation`: The operation which you want to perform. A valid values is `rotate`\n* `secret_id`: The response of `configuration` operation\n* `datacustodian_key_id`: Key Id of key in Data Custodian which needs to be rotated \n* `datacustodian_group_id`: The Group ID of the Data Custodian group where the target key will be rotated and the newly rotated key will be imported. This is required to determine the provider of the target key in Data Custodian.\n* `target_key_name` : Name of the target key. This name will be used for the key in DSM and in Data Custodian\n* `kek_key_id`: Id of the KEK in Data custodian. This key must exist in Data Custodian. BYOK process will download the public key from Data Custodian and import into DSM for wrapping key material. For target key created in AWS KMS keystore provider the KEK will be rotated with a new version as the public key blob is only valid for 24 hours per AWS\u2019s policy.\n* `kek_key_version`: Version number of the KEK in Data Custodian. This parameter applies to non AWS KMS keystore provider \n\n#### Example for Non AWS KMS keystore provider\n\nInput JSON \n```\n{\n  \"operation\": \"rotate\",\n  \"secret_id\": \"2b4a35dc-511d-4d1c-ad30-29e57cae7686\",\n  \"datacustodian_key_id\": \"2504681e-cfd2-44ee-ad63-66211560cc62\",\n  \"target_key_name\": \"test-imported-key-20220517-aes-01\",\n  \"kek_key_id\": \"a58860d9-e832-433d-9c33-d310dd201adc\",\n  \"kek_key_version\": 0\n}\n```\n\nOutput JSON\n```\n{\n  \"result\": {\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\",\n      \"UNWRAP\",\n      \"WRAP\"\n    ],\n    \"meta\": {\n      \"totalVersions\": 3,\n      \"creatorId\": \"7a869e8c-3b19-4e10-8db8-c0864ed79361\",\n      \"templateGenerated\": false,\n      \"primaryVersion\": 2,\n      \"created\": \"2022-05-18T00:09:58\",\n      \"imported\": true,\n      \"lastUsed\": null,\n      \"beingRestored\": false,\n      \"creatorName\": \"Txxxx@service.datacustodian.cloud.sap\"\n    },\n    \"groupId\": \"5069b28d-a01c-4bc0-97ce-c19064d056c0\",\n    \"name\": \"test-imported-key-20220517-aes-01\",\n    \"type\": \"AES\",\n    \"description\": \"This is a test key for BYOK from DSM\",\n    \"id\": \"2504681e-cfd2-44ee-ad63-66211560cc62\",\n    \"keystoreContext\": {\n      \"customerHeld\": false\n    },\n    \"size\": 256,\n    \"exportable\": true,\n    \"enabled\": true,\n    \"role\": \"UNSPECIFIED\"\n  }\n}\n```\n#### Example for AWS KMS keystore provider\n\nInput JSON \n```\n{\n  \"operation\": \"rotate\",\n  \"secret_id\": \"a1b2c3d4-e5f6-7890-ab12-cd34ef56gh78\",\n  \"datacustodian_key_id\": \"9f8e7d6c-5b4a-3210-9876-5432abcd1234\",\n  \"datacustodian_group_id\": \"12ab34cd-56ef-78gh-90ij-klmn123op456\",\n  \"target_key_name\": \"test-imported-key-20250313-01\",\n  \"kek_key_id\": \"abcd5678-ef90-1234-gh56-ijkl7890mnop\"\n}\n```\nOutput JSON\n```\n{\n  \"result\": {\n    \"operations\": [\n      \"DECRYPT\",\n      \"ENCRYPT\"\n    ],\n    \"meta\": {\n      \"lastModified\": \"2025-03-12T23:03:08\",\n      \"imported\": true,\n      \"beingRestored\": false,\n      \"created\": \"2025-03-12T23:03:04\",\n      \"expired\": false,\n      \"templateGenerated\": false,\n      \"totalVersions\": 2,\n      \"primaryVersion\": 1\n    },\n    \"type\": \"RSA\",\n    \"keystoreContext\": {\n      \"nativeId\": \"arn:aws:kms:xxxxxxxxx:xxxxxxxxx:alias/xxxxxxxxxxxxxxx\",\n      \"customerHeld\": false\n    },\n    \"name\": \"test-imported-key-20250313-01\",\n    \"exportable\": false,\n    \"groupId\": \"12ab34cd-56ef-78gh-90ij-klmn123op456\",\n    \"description\": \"Test - This is a test key for BYOK from DSM\",\n    \"role\": \"UNSPECIFIED\",\n    \"enabled\": true,\n    \"state\": \"ENABLED\",\n    \"id\": \"9f8e7d6c-5b4a-3210-9876-5432abcd1234\",\n    \"size\": 3072\n  }\n}\n```\n## References\n* [Data Custodian REST API](https://api.sap.com/api/CentralKeyManagement/overview)\n\n## Release Notes\n - Initial release\n - Added Activation step of secret credential to configure operation, enhanced validation and error decoding, improved parameter handling,and  provided better clarity in the key import process.\n   Added support to import Fortanix DSM keys (AES and RSA) into Data Custodian groups or rotate the keys (AES and RSA) (if already imported) in `AWS KMS` keystore providers.",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Data Custodian. Using this plugin you can generate and export your key from Fortanix DSM in a wrapped form then use BYOK features of Data Custodian to import the key into Data Custodian.",
                "release_notes": [
                    "Initial Release",
                    "Added Activation step of secret credential to configure operation, enhanced validation and error decoding, improved parameter handling,and provided better clarity in the key import process. Added support to import Fortanix DSM keys (AES and RSA) into Data Custodian groups or rotate the keys (AES and RSA) (if already imported) in AWS KMS keystore providers."
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Self-Defending KMS-GCP Bring Your Own Key (BYOK)",
        "versions": {
            "1.2": {
                "path": "gcp/plugin.lua",
                "description": "# FORTANIX SELF-DEFENDING KMS Google Cloud KMS BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Google cloud BYOK model.\n\n## Requirenment\n\n- Fortanix Self-Defending KMS Version >= 3.17.1330\n\n## Use cases\n\nThe plugin can be used to\n\n- Push Fortanix Self-Defending KMS key in Google Cloud KMS\n- List Fortanix Self-Defending KMS Google Cloud BYOK key\n- Rotate Fortanix Self-Defending KMS Google Cloud BYOK key\n- Disable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Enable Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Delete Google Cloud BYOK key from Fortanix Self-Defending KMS\n- Reimport key material from Fortanix Self-Defending KMS to Google Cloud CMK\n\n\n## Setup\n\n- Log in to Google Cloud portal\n- Create Google Cloud KMS Service Account and Secret Key\n- Create Google Cloud IAM Role for Cloud KMS Admin\n- Attach IAM Role to Service Account\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Google Cloud Service Account secret Key in Fortanix Self-Defending KMS and returns a UUID. You need to pass this UUID for other operations. This is a one time process.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: Google Cloud secret key containing the type, project, client_email and private_key\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"configure\",\n  \"location\": \"us-east1\",\n  \"key_ring\": \"gcp-keyring\",\n  \"secret_key\": {\n    \"type\": \"service_account\",\n    \"project_id\": \"project-id-102203\",\n    \"client_email\": \"sdkms-byok@project-id-102203.iam.gserviceaccount.com\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkggSiAgEAAdIk2bywgHRaKg==\\n-----END PRIVATE KEY-----\\n\"\n  }\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"90cc4fdf-db92-4c52-83a5-ffaec726b224\"\n}\n```\n\n### Create operation\n\nThis operation will create an AES-256 key in Fortanix Self-Defending KMS and import it in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `create`.\n* `name`: Name of the key\n* `secret_id`: The response of `configuration` operation. \n* `location`: Optional. Region or location. Example: global or us-east1.\n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n\n```\n{\n  \"operation\": \"create\", \n  \"name\": \"test-key\",\n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n  \"labels\": { \"source\": \"fortanix-byok\" }\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/1\",\n    \"GCP_UPDATED\": \"2020-09-21T20:52:12.282941162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### List operation\n\nThis operation will list all the BYOK keys from a Google Cloud KMS key ring.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation. \n\n#### Example\n\nInput JSON\n```\n\"\n{\n  \"operation\": \"list\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n}\n\"\n```\n\nOutput JSON\n```\n{\n  \"cryptoKeys\": [\n    {\n      \"createTime\": \"2020-09-21T02:26:48.718637503Z\",\n      \"versionTemplate\": {\n        \"protectionLevel\": \"SOFTWARE\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/Fortanix-GCP-BYOKey\",\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      }\n    },\n    {\n      \"labels\": {\n        \"source\": \"fortanix-byok\"\n      },\n      \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n      \"primary\": {\n        \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n        \"protectionLevel\": \"SOFTWARE\",\n        \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n        \"state\": \"ENABLED\",\n        \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n        \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\"\n      },\n      \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n      \"purpose\": \"ENCRYPT_DECRYPT\",\n      \"versionTemplate\": {\n        \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n        \"protectionLevel\": \"SOFTWARE\"\n      }\n    }\n  ],\n  \"totalSize\": 2\n}\n```\n\n### Get operation\n\nThis operation will retrieve a specific BYOK key from Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `get`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"get\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n  \"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n  \"primary\": {\n    \"protectionLevel\": \"SOFTWARE\",\n    \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n    \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n    \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n    \"state\": \"ENABLED\"\n  },\n  \"labels\": {\n    \"source\": \"fortanix-byok\"\n  },\n  \"createTime\": \"2020-09-21T20:58:15.849005292Z\",\n  \"purpose\": \"ENCRYPT_DECRYPT\",\n  \"versionTemplate\": {\n    \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n    \"protectionLevel\": \"SOFTWARE\"\n  },\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\"\n}\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix Self-Defending KMS as well as in Google Cloud KMS.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n* `key_ring`: Optional. Name of Google Cloud KMS key ring.\n* `disable_previous`: Optional. true|false. Previous key version state change.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\",\n  \"name\": \"test-key\"\n}\n```\n\nOutput JSON\n```\n{\n  \"creator\": {\n    \"plugin\": \"37d99d30-85cc-43fb-aa03-b12d25def766\"\n  },\n  \"kid\": \"c48db54f-075e-4500-9900-715eb74c5349\",\n  \"acct_id\": \"0491fa2d-0c59-4daf-b293-8859c7d491d0\",\n  \"custom_metadata\": {\n    \"GCP_KEY_ID\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key\",\n    \"GCP_CREATED\": \"2020-09-21T20:58:15.849005292Z\",\n    \"GCP_KEY_VERSION\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/2\",\n    \"GCP_UPDATED\": \"2020-09-21T21:56:22.663641162Z\"\n  },\n  \"aes\": {\n    \"random_iv\": null,\n    \"key_sizes\": null,\n    \"cipher_mode\": null,\n    \"fpe\": null,\n    \"iv_length\": null,\n    \"tag_length\": null\n  },\n  \"kcv\": \"a90519\",\n  \"activation_date\": \"20200921T215621Z\",\n  \"key_size\": 256,\n  \"key_ops\": [\n    \"ENCRYPT\",\n    \"DECRYPT\",\n    \"EXPORT\",\n    \"APPMANAGEABLE\"\n  ],\n  \"group_id\": \"0f1ffedd-9a23-4dc8-9a47-952e50bb1b71\",\n  \"lastused_at\": \"19700101T000000Z\",\n  \"never_exportable\": false,\n  \"obj_type\": \"AES\",\n  \"enabled\": true,\n  \"compliant_with_policies\": true,\n  \"origin\": \"FortanixHSM\",\n  \"name\": \"test-key\",\n  \"created_at\": \"20200921T215621Z\",\n  \"public_only\": false,\n  \"state\": \"Active\"\n}\n```\n\n### Disable operation\n\nThis operation will disable a Google Cloud KMS key.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"disable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n  \"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n  \"protectionLevel\": \"SOFTWARE\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"state\": \"DISABLED\"\n}\n```\n\n### Enable operation\n\nThis operation will enable a Google Cloud KMS key that's disabled.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"enable\", \n  \"secret_id\": \"e84f0b8c-485b-499c-87d5-d583f8716144\"\n  \"name\": \"test-key\",\n}\n```\n\nOutput JSON\n```\n{\n  \"importJob\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/importJobs/byok-ftx-plugin-1600721534\",\n  \"protectionLevel\": \"SOFTWARE\",\n  \"importTime\": \"2020-09-21T21:20:25.960522434Z\",\n  \"name\": \"projects/fortanix/locations/us-east1/keyRings/gcp-keyring/cryptoKeys/test-key/cryptoKeyVersions/4\",\n  \"algorithm\": \"GOOGLE_SYMMETRIC_ENCRYPTION\",\n  \"createTime\": \"2020-09-21T21:20:25.935360774Z\",\n  \"state\": \"ENABLED\"\n}\n```",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Google cloud. Using this plugin you can keep your key inside Fortanix Self-Defending KMS and use BYOK features of Google Cloud KMS.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "922fe591e34c17bb65a42e06c049e091315290eb"
            }
        }
    },
    {
        "name": "Oracle Cloud BYOK",
        "versions": {
            "1.0": {
                "path": "oracle-cloud/plugin.lua",
                "description": "# FORTANIX DSM Oracle Cloud Vault BRING YOUR OWN KEY (BYOK) PLUGIN\n\n## Introduction\n\nThe cloud services provide many advantages but the major disadvantage of cloud providers has been security because physically your data resides with the cloud provider. To keep data secure in a cloud provider environment, enterprises use encryption. So securing their encryption keys become significantly important. Bring Your Own Key (BYOK) allows enterprises to encrypt their data and retain control and management of their encryption keys. This plugin provides an implementation to use the Oracle cloud BYOK model.\n\n## Requirenment\n\n- Fortanix DSM Version >= 4.6.2045\n\n## Use cases\n\nThe plugin can be used to\n\n- List Vaults\n- List Keys in a Vault\n- Get information about a key or key version from a Vault\n- Enable or disable a key in a Vault\n- Schedule the deletion or cancel the scheduled deletion of a key or key version in a Vault\n- Import a Fortanix DSM Key into a Vault\n- Rotate the Fortanix DSM Key and import the new key version into the Vault\n\n## Setup\n\n- Log in to Oracle Cloud portal\n- In the user profile of the Oracle Cloud dashboard, create a new API Key\n- Enable user in the Oracle Cloud with permissions to operate on one or more Vaults\n\n## Input/Output JSON object format\n\n### Configure operation\n\nThis operation configures Oracle Cloud API Key in Fortanix DSM and returns a UUID. This is a one time process.\nYou need to send this UUID for other operations. \n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `configure`.\n* `secret_key`: Oracle Cloud API key containing either the base64 encoded private key or PKCS8 formatted.\n               It can also be a named reference to an existing RSA private key in Fortanix DSM.\n* `fingerprint`: MD5 hash of the private key specified in the `secret_key`.\n* `region`: Default region the API Key has access to within Oracle Cloud.\n* `ocids`: JSON structure consisting of the Oracle Cloud Tenant, User, and optionally the Compartment IDs.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"configure\",\n  \"secret_key\": \"MIIEpAIBA...FOJ2xCw==\",\n  \"fingerprint\": \"a9:d2:4f:fd:cc:10:...\",\n  \"region\": \"us-phoenix-1\",\n  \"ocids\": {\n    \"tenant\": \"ocid1.tenancy.oc1..aaaaaaaaeipivgd4...\",\n    \"user\": \"ocid1.user.oc1..aaaaaaaavcjkzwa7ipydz...\",\n    \"compartment\": \"ocid1.tenancy.oc1..aaaaaaaaeipivgd43...\"\n  }\n}\n```\nOutput JSON\n```\n{\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\"\n}\n```\n\n### Check operation\n\nThis operation will list Oracle Cloud Vaults\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `check`.\n* `secret_id`: The response of `configuration` operation. \n* `compartment`: Optional. If specified, it will be used instead of the one\n        configured previously for the query.\n\n#### Example\n\nInput JSON\n\n```\n{\n  \"operation\": \"check\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"compartment\": \"ocid1.compartment.oc1..aaaaaaaag6kmml...\"\n}\n```\n\nOutput JSON\n```\n[\n  {\n    \"id\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga42...\"\n    \"replicaDetails\": null,\n    \"isPrimary\": true,\n    \"wrappingkeyId\": \"\",\n    \"freeformTags\": {\n      \"FX_PURPOSE\": \"engineering-plugin\",\n      \"FX_USER\": \"daervveilnodp\"\n    },\n    \"cryptoEndpoint\": \"https://bzrgvxubaadcw-crypto.kms.us-phoenix-1.oraclecloud.com\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmml...\"\n    \"vaultType\": \"DEFAULT\",\n    \"lifecycleState\": \"ACTIVE\",\n    \"displayName\": \"byoktest\",\n    \"definedTags\": {},\n    \"timeCreated\": \"2022-04-28T18:35:45.723Z\",\n    \"restoredFromVaultId\": null,\n    \"externalVendorMetadata\": null,\n    \"managementEndpoint\": \"https://bzrgvxubaadcw-management.kms.us-phoenix-1.oraclecloud.com\",\n    \"timeOfDeletion\": null\n  }\n]\n```\n\n### Import operation\n\nThis operation will create an AES key in Fortanix DSM and import it into an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `import`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `name`: Name of the key to be exported from Fortanix DSM.\n* `type`: AES is supported as of now. RSA is not yet and ECDSA is not supported.\n* `size`: 128, 192, or 256 in bit length.\n* `protection`: Valid values are `SOFTWARE` or `HSM`.\n* `free_tags`: arbitrary key-value pairs expressed in JSON.\n\n#### Example\n\nInput JSON\n\n```\n{\n  \"operation\": \"import\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"name\": \"dsm_oci_key1\",\n  \"type\": \"AES\",\n  \"size\": 256,\n  \"protection\": \"SOFTWARE\",\n  \"free_tags\": {\"ftnxtag\": \"dsm\"}\n}\n```\n\nOutput JSON\n```\n{\n  \"displayName\": \"dsm_oci_key1\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj56wyiaa.abyhqljst4...\",\n  \"externalKeyReference\": null,\n  \"timeOfDeletion\": null,\n  \"autoKeyRotationSchedule\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"timeCreated\": \"2022-05-11T16:59:13.756Z\",\n  \"keyShape\": {\n    \"algorithm\": \"AES\",\n    \"length\": 16,\n    \"curveId\": null\n  },\n  \"definedTags\": {},\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xg...\",\n  \"lifecycleState\": \"CREATING\",\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie...\",\n  \"protectionMode\": \"SOFTWARE\",\n  \"restoredFromKeyId\": null,\n  \"autoKeyRotationStatus\": null,\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"isPrimary\": true,\n  \"replicaDetails\": null\n}\n```\n\n### List operation\n\nThis operation will list all the keys from an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `list`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"list\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\"\n}\n```\n\nOutput JSON\n```\n[\n  {\n    \"protectionMode\": \"SOFTWARE\",\n    \"definedTags\": {},\n    \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob...\",\n    \"lifecycleState\": \"ENABLED\",\n    \"algorithm\": \"AES\",\n    \"freeformTags\": {\n      \"ftnxtag\": \"dsm\"\n    },\n    \"displayName\": \"dsm_oci_key1\",\n    \"timeCreated\": \"2022-05-11T15:22:16.334Z\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n    \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7x...\"\n  },\n  {\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n    \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljr5h6pykvyh...\",\n    \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7x...\",\n    \"lifecycleState\": \"ENABLED\",\n    \"algorithm\": \"AES\",\n    \"timeCreated\": \"2022-05-11T15:23:59.576Z\",\n    \"freeformTags\": {\n      \"ftnxtag\": \"dsm\"\n    },\n    \"definedTags\": {},\n    \"protectionMode\": \"HSM\",\n    \"displayName\": \"dsm_oci_key2\"\n }\n]\n```\n\n### Get operation\n\nThis operation will retrieve a specific key from an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `get`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `name`: Name of the key\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"get | enable | disable\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljtay66z3uj4q...\"\n}\n```\n\nOutput JSON\n```\n{\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"autoKeyRotationSchedule\": null,\n  \"isPrimary\": true,\n  \"timeCreated\": \"2022-05-11T15:22:16.334Z\",\n  \"externalKeyReference\": null,\n  \"keyShape\": {\n    \"length\": 16,\n    \"curveId\": null,\n    \"algorithm\": \"AES\"\n  },\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob...\",\n  \"timeOfDeletion\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"lifecycleState\": \"ENABLED\",\n  \"definedTags\": {},\n  \"displayName\": \"dsm_oci_key1\",\n  \"autoKeyRotationStatus\": null,\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj55jkaaa.abyhqljsipc...\",\n  \"replicaDetails\": null,\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7...\",\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"restoredFromKeyId\": null\n}\n```\n\n### Disable operation\n\nThis operation will disable a key in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `disable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"disable\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob...\"\n}\n```\n\nOutput JSON\n```\n{\n  \"isPrimary\": true,\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob...\",\n  \"replicaDetails\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"definedTags\": {},\n  \"externalKeyReference\": null,\n  \"lifecycleState\": \"DISABLING\",\n  \"restoredFromKeyId\": null,\n  \"autoKeyRotationSchedule\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj55jkaaa.abyhqljsipc2...\",\n  \"timeOfDeletion\": null,\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7...\",\n  \"timeCreated\": \"2022-05-11T15:22:16.334Z\",\n  \"displayName\": \"dsm_oci_key1\",\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"keyShape\": {\n    \"curveId\": null,\n    \"length\": 16,\n    \"algorithm\": \"AES\"\n  },\n  \"autoKeyRotationStatus\": null\n}\n```\n\n### Enable operation\n\nThis operation will enable a key in an Oracle Cloud Vault that was disabled.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `name`: Name of the key  \n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"enable\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob7cn4vy6u7yzmqlryzsz4lbmjs5b5qrel6r2ymwkdekopkwq\"\n}\n```\n\nOutput JSON\n```\n{\n  \"isPrimary\": true,\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljslgbob...\",\n  \"replicaDetails\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"definedTags\": {},\n  \"externalKeyReference\": null,\n  \"lifecycleState\": \"ENABLING\",\n  \"restoredFromKeyId\": null,\n  \"autoKeyRotationSchedule\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj55jkaaa.abyhqljsipc2...\",\n  \"timeOfDeletion\": null,\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7...\",\n  \"timeCreated\": \"2022-05-11T15:22:16.334Z\",\n  \"displayName\": \"dsm_oci_key1\",\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"keyShape\": {\n    \"curveId\": null,\n    \"length\": 16,\n    \"algorithm\": \"AES\"\n  },\n  \"autoKeyRotationStatus\": null\n}\n```\n\n### Delete operation\n\nThis operation will schedule a key deletion in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n* `expiry`: Number of days to schedule the deletion. Specify between 7, and 30.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"delete\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljr5h6p...\",\n  \"expiry \": \"21\"\n}\n```\n\nOutput JSON\n```\n{\n  \"autoKeyRotationStatus\": null,\n  \"keyShape\": {\n    \"curveId\": null,\n    \"length\": 32,\n    \"algorithm\": \"AES\"\n  },\n  \"autoKeyRotationSchedule\": null,\n  \"definedTags\": {},\n  \"replicaDetails\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"displayName\": \"dsm_oci_key2\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aeydmj55zhqaa.abyhqljtfdqe...\",\n  \"externalKeyReference\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423...\",\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"restoredFromKeyId\": null,\n  \"timeCreated\": \"2022-05-11T15:23:59.576Z\",\n  \"timeOfDeletion\": \"2022-05-18T17:47:45.000Z\",\n  \"lifecycleState\": \"SCHEDULING_DELETION\",\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljr5h6p...\",\n  \"isPrimary\": true\n}\n```\n\n### Undelete operation\n\nThis operation will cancel the scheduled key deletion in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"undelete\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljr5h6p...\"\n}\n```\n\nOutput JSON\n```\n{\n  \"protectionMode\": \"SOFTWARE\",\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljr5h6p...\",\n  \"timeOfDeletion\": \"2022-05-18T17:47:45.000Z\",\n  \"isPrimary\": true,\n  \"lifecycleState\": \"CANCELLING_DELETION\",\n  \"keyShape\": {\n    \"length\": 32,\n    \"algorithm\": \"AES\",\n    \"curveId\": null\n  },\n  \"restoredFromKeyId\": null,\n  \"externalKeyReference\": null,\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aeydmj55zhqaa.abyhqljtfdqe...\",\n  \"autoKeyRotationSchedule\": null,\n  \"replicaDetails\": null,\n  \"timeCreated\": \"2022-05-11T15:23:59.576Z\",\n  \"displayName\": \"dsm_oci_key2\",\n  \"autoKeyRotationStatus\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423...\",\n  \"definedTags\": {},\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  }\n}\n```\n\n### GetVersions operation\n\nThis operation will list key version in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key to list versions for.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"getversions\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljrwxn4...\"\n}\n```\n\nOutput JSON\n```\n[\n  {\n    \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga4...\",\n    \"lifecycleState\": \"PENDING_DELETION\",\n    \"id\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aeebmj554diaa.abyhqljrakwdql4...\",\n    \"timeCreated\": \"2022-05-11T16:02:22.066Z\",\n    \"origin\": \"EXTERNAL\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlkj...\",\n    \"timeOfDeletion\": \"2022-05-18T16:21:05.000Z\",\n    \"keyId\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljrwxn4...\"\n  },\n  {\n    \"timeOfDeletion\": \"2022-05-18T16:21:05.000Z\",\n    \"origin\": \"EXTERNAL\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n    \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7x...\",\n    \"id\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aeinmj553siaa.abyhqljrauadk...\",\n    \"timeCreated\": \"2022-05-11T16:01:13.687Z\",\n    \"keyId\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljrwxn4c...\",\n    \"lifecycleState\": \"PENDING_DELETION\"\n  }\n]\n```\n\n### Rotate operation\n\nThis operation will rotate a key in Fortanix DSM and import the rekeyed material\nas a new key version in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `rotate`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n* `name`: Name of the DSM key to rotate. Will create if not found.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6v...\",\n  \"name \": \"dsm_oci_key4\"\n}\n```\n\nOutput JSON\n```\n{\n  \"id\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw4rfji2mcvcdcikfck4ibm2yyyhzjsljshdcs7ke3z2wp3a\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423iq7q2ugk266uldexjdmzstpepbbuchhudk53pzkgzh35q\",\n  \"origin\": \"EXTERNAL\",\n  \"timeOfDeletion\": null,\n  \"replicaDetails\": {\n    \"replicationId\": null\n  },\n  \"restoredFromKeyVersionId\": null,\n  \"lifecycleState\": \"CREATING\",\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlkj5cz6aqf37zlf5mi3boxkcp3iri2drazwcqtgssnyqwya\",\n  \"keyId\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrxncbjurjddtuuymtuclg3io3zxzng2rhnkgdpdhimxdcqdq\",\n  \"isPrimary\": true,\n  \"timeCreated\": \"2022-05-11T18:17:55.363Z\",\n  \"publicKey\": null\n}\n```\n\n### Import Version operation\n\nThis operation will import an existing key from Fortanix DSM as a new key version in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `importversion`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n* `name`: Name of the existing DSM key to import. Will create if not found.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"rotate\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6v...\",\n  \"name \": \"dsm_oci_key4\"\n}\n```\n\nOutput JSON\n```\n{\n  \"id\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw4rfji2mcvcdcikfck4ibm2yyyhzjsljshdcs7ke3z2wp3a\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423iq7q2ugk266uldexjdmzstpepbbuchhudk53pzkgzh35q\",\n  \"origin\": \"EXTERNAL\",\n  \"timeOfDeletion\": null,\n  \"replicaDetails\": {\n    \"replicationId\": null\n  },\n  \"restoredFromKeyVersionId\": null,\n  \"lifecycleState\": \"CREATING\",\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlkj5cz6aqf37zlf5mi3boxkcp3iri2drazwcqtgssnyqwya\",\n  \"keyId\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrxncbjurjddtuuymtuclg3io3zxzng2rhnkgdpdhimxdcqdq\",\n  \"isPrimary\": true,\n  \"timeCreated\": \"2022-05-11T18:17:55.363Z\",\n  \"publicKey\": null\n}\n```\n\n### Delete version operation\n\nThis operation will schedule a key version deletion in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n* `version`: Oracle Cloud ID of the key version.\n* `expiry`: Number of days to schedule the deletion. Specify between 7, and 30.\n\n#### Example\n\nInpua JSON\n```\n{\n  \"operation\": \"deleteversion\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrx...\",\n  \"version\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw...\",\n  \"expiry \": 18\n}\n```\n\nOutput JSON\n```\n{\n  \"timeOfDeletion\": \"2022-05-29T18:19:52.000Z\",\n  \"lifecycleState\": \"SCHEDULING_DELETION\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423...\",\n  \"autoKeyRotationStatus\": null,\n  \"definedTags\": {},\n  \"displayName\": \"dsm_oci_key4\",\n  \"timeCreated\": \"2022-05-11T16:59:13.756Z\",\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrx...\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw...\",\n  \"keyShape\": {\n    \"length\": 16,\n    \"curveId\": null,\n    \"algorithm\": \"AES\"\n  },\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlkj5cz6...\",\n  \"restoredFromKeyId\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"isPrimary\": true,\n  \"autoKeyRotationSchedule\": null,\n  \"replicaDetails\": null,\n  \"externalKeyReference\": null\n}\n```\n\n### Undelete version operation\n\nThis operation will cancel the scheduled key version deletion in an Oracle Cloud Vault.\n\n#### Parameters \n\n* `operation`: The operation which you want to perform. A valid value is `enable`.\n* `secret_id`: The response of `configuration` operation. \n* `vault`: Prefix of the Vault endpoint obtained from the `check` operation.\n* `key`: Oracle Cloud ID of the key.\n* `version`: Oracle Cloud ID of the key version.\n\n#### Example\n\nInput JSON\n```\n{\n  \"operation\": \"undeleteversion\",\n  \"secret_id\": \"988d97f4-d1a7-4300-858e-76bbbcdf792a\",\n  \"vault\": \"bzrgvxubaadcw\",\n  \"key\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrx...\",\n  \"version\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw...\"\n}\n```\n\nOutput JSON\n```\n{\n  \"externalKeyReference\": null,\n  \"isPrimary\": true,\n  \"id\": \"ocid1.key.oc1.phx.bzrgvxubaadcw.abyhqljsie6vrx...\",\n  \"freeformTags\": {\n    \"ftnxtag\": \"dsm\"\n  },\n  \"replicaDetails\": null,\n  \"definedTags\": {},\n  \"restoredFromKeyId\": null,\n  \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaag6kmmlk...\",\n  \"autoKeyRotationStatus\": null,\n  \"timeOfDeletion\": \"2022-05-29T18:19:52.000Z\",\n  \"keyShape\": {\n    \"length\": 16,\n    \"algorithm\": \"AES\",\n    \"curveId\": null\n  },\n  \"autoKeyRotationSchedule\": null,\n  \"protectionMode\": \"SOFTWARE\",\n  \"vaultId\": \"ocid1.vault.oc1.phx.bzrgvxubaadcw.abyhqljr7xga423...\",\n  \"displayName\": \"dsm_oci_key4\",\n  \"currentKeyVersion\": \"ocid1.keyversion.oc1.phx.bzrgvxubaadcw.aememj573uyaa.abyhqljsun3dkw4r...\",\n  \"timeCreated\": \"2022-05-11T16:59:13.756Z\",\n  \"lifecycleState\": \"CANCELLING_DELETION\"\n}\n```\n\n## References\n\n * [Oracle Cloud REST API](https://docs.oracle.com/en-us/iaas/api/#/en/key/release/Vault/)\n * [Oracle Cloud API signature v1](https://docs.oracle.com/en-us/iaas/Content/API/Concepts/signingrequests.htm)",
                "short_description": "This plugin implements the Bring your own key (BYOK) model for Oracle Cloud Infrastructure. Using this plugin you can generate and export your key from Fortanix DSM and use BYOK features of Oracle Cloud Infrastructure Key Vaults.",
                "release_notes": [
                    "List Vaults",
                    "List Keys in a Vault",
                    "Get a key or key version from a Vault",
                    "Enable or Disable a key from a Vault",
                    "Schedule the deletion or Cancel the scheduled deletion of a key or key version from a Vault",
                    "Import a Fortanix DSM Key into a Vault",
                    "Rotate the Fortanix DSM Key and correspondingly perform the same in the Vault"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "PKCS #10 Certification Request",
        "versions": {
            "1.0": {
                "path": "pkcs10-certification-request/plugin.lua",
                "description": "# PKCS #10 Certification Request\n\n## Introduction\nThis plugin can produce PKCS #10 Certfication Request for a asymmetric security object\nin DSM. The sobject needs to be in a group to which this plugin has access.\nSee [RFC 2986](https://datatracker.ietf.org/doc/html/rfc2986) for more details about PKCS #10.\n\n## Input/Output\n\nThis plugin accepts a JSON object with the following fields as input:\n\n* `subject_dn`: a map of OIDs to values\n* `subject_key`: the name of the subject key security object\n* `attributes` (optional): a map of OIDs to an object which contains more information about that attribute.\n* `hash_alg` (optional): hash algorithm used before CSR signing.\n\nIt returns the newly generated certificate signing request (CSR) in PEM format encoded as a JSON string.\n\n## Example Usage\nAssuming there exists an sobject of type RSA/EC named \"Subject key\", following will produce a CSR:\n\n```json\n{\n  \"subject_dn\": {\n    \"CN\": \"localhost\",\n    \"OU\": [\n      \"Testing\",\n      \"Testing2\"\n    ]\n  },\n  \"subject_key\": \"Subject key\",\n  \"attributes\": {\n    \"extensionRequest\": {\n      \"subjectAlternativeName\": {\n        \"dns_names\": [\n          \"example.com\",\n          \"example2.com\"\n        ],\n        \"critical\": true\n      },\n      \"<any_other_extension_oid>\": {\n        \"der_value\": \"<base64_der_value>\"\n      }\n    },\n    \"<any_other_attribute_oid>\": {\n      \"der_values\": [\"<base64_der_value_1>\", \"<base64_der_value_2>\", ...]\n    }\n  }\n}\n```\n\nAs shown above, for some attributes, special syntax is available (only `extensionRequest` for now). Value for other attributes\ncan be specified by `der_values`. Also, if `der_values` is specified for attributes with special syntax support (like `extensionRequest`),\nthat special syntax will be ignored and `der_values` will be prioritised. `der_values` is an array of base64 DER encoded elements for the particular attribute.\nThe input is a sequence because PKCS #10 RFC allows an attribute to have multiple values. Whether it makes sense to have multiple values or not\ndepends on that particular attribute. Like `extensionRequest` only allows a single value.\n\nAlso, special syntax could be available for extensions specified within `extensionRequest` attribute. If not, `der_value` can be\nused and will also be prioritised over special syntax like above. Currently, special syntax in extensions is only supported for subjectAlternativeName\nas shown above and it only supports `dns_names` for now.\n\n## References\n- [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280)\n- [RFC 2986](https://datatracker.ietf.org/doc/html/rfc2986)\n- [RFC 2985](https://datatracker.ietf.org/doc/html/rfc2985)",
                "short_description": "Issue PKCS #10 Certification Signing Request (CSR) for RSA/EC Security Objects in DSM",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "47446f3da55438ae50add366897fa418905eba8f"
            },
            "1.1": {
                "path": "pkcs10-certification-request/plugin.lua",
                "description": "# PKCS #10 Certification Request\n\n## Introduction\nThis plugin can produce PKCS #10 Certification Request for a asymmetric security object\nin DSM. The sobject needs to be in a group to which this plugin has access.\nSee [RFC 2986](https://datatracker.ietf.org/doc/html/rfc2986) for more details about PKCS #10.\n\n## Input/Output\n\nThis plugin accepts a JSON object with the following fields as input:\n\n* `subject_dn`: a map of OIDs to values\n* `subject_key`: the name of the subject key security object\n* `attributes` (optional): a map of OIDs to an object which contains more information about that attribute.\n* `hash_alg` (optional): hash algorithm used before CSR signing.\n\nIt returns the newly generated certificate signing request (CSR) in PEM format encoded as a JSON string.\n\n## Example Usage\nAssuming there exists an sobject of type RSA/EC named \"Subject key\", following will produce a CSR:\n\n```json\n{\n  \"subject_dn\": {\n    \"CN\": \"localhost\",\n    \"OU\": [\n      \"Testing\",\n      \"Testing2\"\n    ]\n  },\n  \"subject_key\": \"Subject key\",\n  \"attributes\": {\n    \"extensionRequest\": {\n      \"subjectAlternativeName\": {\n        \"dns_names\": [\n          \"example.com\",\n          \"example2.com\"\n        ],\n        \"ip_addresses\": [\n          \"127.0.0.1\",\n          \"2001:db8:3333:4444:5555:6666:7777:8888\",\n          \"2001:db8:3333:4444:5555:6666:1.2.3.4\",\n          \"::1234:5678:1.2.3.4\"\n        ],\n        \"critical\": true\n      },\n      \"<any_other_extension_oid>\": {\n        \"der_value\": \"<base64_der_value>\"\n      }\n    },\n    \"<any_other_attribute_oid>\": {\n      \"der_values\": [\"<base64_der_value_1>\", \"<base64_der_value_2>\", ...]\n    }\n  }\n}\n```\n\nAs shown above, for some attributes, special syntax is available (only `extensionRequest` for now). Value for other attributes\ncan be specified by `der_values`. Also, if `der_values` is specified for attributes with special syntax support (like `extensionRequest`),\nthat special syntax will be ignored and `der_values` will be prioritised. `der_values` is an array of base64 DER encoded elements for the particular attribute.\nThe input is a sequence because PKCS #10 RFC allows an attribute to have multiple values. Whether it makes sense to have multiple values or not\ndepends on that particular attribute. Like `extensionRequest` only allows a single value.\n\nAlso, special syntax could be available for extensions specified within `extensionRequest` attribute. If not, `der_value` can be\nused and will also be prioritised over special syntax like above. Currently, special syntax in extensions is only supported for subjectAlternativeName\nas shown above and it only supports `dns_names` and `ip_addresses` for now.\n\n## References\n- [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280)\n- [RFC 2986](https://datatracker.ietf.org/doc/html/rfc2986)\n- [RFC 2985](https://datatracker.ietf.org/doc/html/rfc2985)\n",
                "short_description": "Issue PKCS #10 Certification Signing Request (CSR) for RSA/EC Security Objects in DSM",
                "release_notes": [
                    "Add support for IP addresses in SAN"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Notify Fortanix DSM key rotation reminders through ServiceNow Incidents",
        "versions": {
            "1.0": {
                "path": "key-rotation-incident/plugin.lua",
                "description": "# Notify key rotation reminder as ServiceNow Incidents\n\nThis plugin can be used to monitor Fortanix DSM key rotation schedules and generate \nalerts using ServiceNow Incidents. The plugin scans all keys across Fortanix DSM Group(s)\nit is a member of. Based on 90, 60, or 30 days prior to a time period that is\ninput to the plugin, if the key creation date breaches this threshold, an Incident\nis generated in ServiceNow. For any key, a minimum of three Incidents will be\ngenerated in ServiceNow. No new Incidents are generated if the key creation date\nsurpasses the specified time period threshold. The plugin also allows querying\nServiceNow for a list of Incidents relevant to this workflow.\n\n## Input Commands\n\nThe plugin accepts a JSON object as input with a set of fields that vary based on\nthe operation. Most operational commands require the following two fields:\n\n- `operation`: String identifying the operation to execute, see below for a full list.\n- `secret_id`: String identifying the Fortanix DSM secret object containing the ServiceNow\n    credentials. This is not required for the `configure` operation and is instead output.\n\nSome operations require more fields in the input as noted below.\n\n### Configure\n`configure`: generates a new secret with ServiceNow credentials and other parameters\nit receives as input in a DSM security object named randomly.\n\nThe input parameters are:\n\n- `endpoint`: String, obtained from ServiceNow\n- `api_key`: String, obtained from ServiceNow, alternatively for username/password\n- `username`: String, (optional) obtained from ServiceNow\n- `password`: String, (optional) obtained from ServiceNow\n- `schedule`: Number, (optional) count of days after a key creation date it is supposed\n  to be rotated on. This is the time period threshold used to compute the 90, 60, or 30 day\n  reminder notifications. Default value is 365.\n- `tag`: String, used for ServiceNow Incident management. Default value is \"ftnxreminder\".\n- `message`: String, (optional) used for ServiceNow Incident description. Default value is\n  \"This is a reminder to rotate the following key\"\n- `params`: String, (optional) comma-separated list of column names used to fetch ServiceNow\n  Incident records\n\nThe output contains a JSON object with a key called `secret_id` that is the UUID of the \nDSM secret and will be used in all subsequent operations.  The ServiceNow Incident API key\nor credentials needs to have permission to make REST API calls as well as authorized to\nGET or POST Incidents into the Table API.\n\n### List Keys\n`list-keys`: fetches all relevant keys that are due for rotation either 90, 60, or 30 days\nprior to the configured or specified schedule. Plugin will consider keys across all\nFortanix DSM groups it is a member of.\n\nThe input parameters are:\n\n- `schedule`: Number, (optional) count of days after a key creation date it is supposed\n  to be rotated on\n- `filter`: String, (optional) Fortanix DSM Security Object Type(s) to select. Default is empty,\n  which selects all object types. Can be a single type or comma-separated list of types.\n\nThe output contains a JSON object array of keys that are due for rotation either 90, 60,\nor 30 days prior to the configured or specified schedule, found across groups within\nFortanix DSM that the plugin is a member of.\n\n### List ServiceNow Incidents\n`list-incidents`: fetches ServiceNow Incidents related to the Fortanix DSM keys\nthat are or were due for rotation.\n\nThe input parameters are:\n\n- `secret_id`: String, UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n- `params`: String, (optional) comma-separated list of ServiceNow Incident column names. Default value is\n  \"number,short_description,opened_at,urgency\"\n\nThe output contains a JSON object array of ServiceNow Incidents corresponding to keys in\nFortanix DSM that are or were due for rotation. The `params` value overrides the corresponding information\nstored in the `secret_id` metadata from the `configure` operation.\n\n### Notify ServiceNow Incidents\n`notify-incidents`: generates a ServiceNow Incident per Fortanix DSM key that is due for\nrotation either 90, 60, or 30 days prior to the configured or specified schedule.\n\nThe input parameters are:\n\n- `secret_id`: String, UUID of the Fortanix DSM Security Object obtained from `configure` operation.\n- `schedule`: Number, (optional) count of days after a key creation date it is supposed to be rotated on\n- `notify_again`: Boolean, (optional) whether to create a new ServiceNow Incident. Default is false.\n- `filter`: String, (optional) Fortanix DSM Security Object Type to select. Default is empty,\n  which selects all object types. Can be a single type or comma-separated list of types.\n\nThe output contains a JSON object array of keys that are due for rotation either 90, 60, or 30 days\nprior to the configured or specified schedule, found across groups within Fortanix DSM that the plugin is \na member of.\n\n## Example Usage\n\nInvoke the plugin with the following input to check for Fortanix DSM keys due for rotation:\n```\n{\n  \"operation\": \"list-keys\",\n  \"schedule\": 365\n}\n\n```\nIf pertinent keys are found, the output will be an array of groups of Security Object(s) as follows:\n```\n{\n  \"d7993e29-5a28-439a-9c26-b2d0c2a4960b\": [\n    {\n      \"notify\": 2,\n      \"created\": \"20211202T160910Z\",\n      \"key\": \"tq-root-key\",\n      \"meta\": {\n        \"foo-key\": \"bar-value\"\n      }\n    }\n  ],\n  \"07f85883-adaf-4a6c-a040-ffed46dfd349\": {}\n}\n```\nNote: the `schedule` parameter is optional and helpful for testing the integration or\ntroubleshooting the plugin. The keys are segregated into Fortanix DSM Group UUIDs. Each key\nhas a `notify` rating of 1, 2, or 3 that corresponds to 90, 60, and 30 days of lead time\nprior to the rotation schedule. Key may include a `meta` object that may key-value pairs,\nand also include the ServiceNow Incident number, the escalation date and its notification rating.\n\n\nNow that you have confirmed the presence of Fortanix DSM key(s) in one or more Fortanix DSM\ngroup(s) that are due for rotation per schedule, you may invoke the plugin with the following\ninput to initialize the ServiceNow integration:\n```\n{\n  \"operation\": \"configure\",\n  \"endpoint\": \"dev50668.service-now.com\",\n  \"api_key\": \"Zm9ydGFuaXg6dUlXck9PcCVmTzh...\",\n    \"_OR_\": \"api_key or username+password\",\n  \"username\": \"fortanix\",\n  \"password\": \"uIWrOOp....\"\n  \"schedule\": 365,\n  \"tag\": \"ftnxreminder\",\n  \"message\": \"This is a reminder to rotate the following key\",\n}\n```\nIf successful, you will see output like this:\n```\n{\n  \"secret_id\": \"6c7cc3ec-1de6-4526-b272-1e3addd120b4\"\n}\n```\nNote: you can copy the JSON output key and value or just the value to substitute in latter operations.\n\nTo check if there are any ServiceNow Incidents, run the `list-incidents`, which is a read-only operation\nusing the `secret_id` input:\n\n```\n{\n  \"operation\": \"list-incidents\",\n  \"secret_id\": \"ecb3f5e4-fa46-4ed9-aef4-3bed49141535\"\n}\n\n```\nThe output should list the ServiceNow Incidents, that are related to any previously notified Fortanix DSM keys.\nIf there were no events the output will be as follows.\n\nIf the `secret_id` is correct you'd see an output like this:\n```\n{\n  \"error\": {\n    \"detail\": \"Records matching query not found. Check query parameter or offset parameter\",\n    \"message\": \"No Record found\"\n  },\n  \"status\": \"failure\"\n}\n```\n\nThe main operation as per the objective of this plugin is `notify-incidents`. Based on the `list-keys` output\nthis operation will trigger ServiceNow and create new Incidents.\n```\n{\n  \"operation\": \"notify-incidents\",\n  \"secret_id\": \"ecb3f5e4-fa46-4ed9-aef4-3bed49141535\",\n  \"schedule\": 365\n}\n```\nIf the `secret_id` is correct you'd see an output like this:\n```\n{\n  \"07f85883-adaf-4a6c-a040-ffed46dfd349\": {},\n  \"d7993e29-5a28-439a-9c26-b2d0c2a4960b\": [\n    {\n      \"notify\": 2,\n      \"meta\": {\n        \"ftnxreminder2\": \"20221013T220549Z\",\n        \"ftnxreminder2-incident\": \"INC0010073\",\n        \"foo-key\": \"bar-value\"\n      },\n      \"created\": \"20211202T160910Z\",\n      \"type\": \"RSA\",\n      \"key\": \"tq-root-key\"\n    }\n  ]\n}\n```\nNote: the `schedule` parameter is optional again, but shown here for completeness.\nThe custom_metadata of the keys are updated with the ServiceNow Incident details. You may change the\n`schedule` to see the impact of reversing or forwarding the time period on `list-keys` and `notify-incidents` operations.\n\nTo check if there are any ServiceNow Incidents, run the `list-incidents`, which is a read-only operation\nusing the `secret_id` input:\n```\n{\n  \"operation\": \"list-incidents\",\n  \"secret_id\": \"ecb3f5e4-fa46-4ed9-aef4-3bed49141535\"\n}\n```\nThe output should list the ServiceNow Incidents, that are related to any previously notified Fortanix DSM keys.\nIf there were no events the output will be empty or simply `{}`.\n\nIf the `secret_id` is correct you'd see an output like this:\n```\n[\n  {\n    \"opened_at\": \"2022-10-13 22:05:48\",\n    \"urgency\": \"2\",\n    \"short_description\": \"This is a reminder to rotate the following key: tq-root-key #ftnxreminder2\",\n    \"number\": \"INC0010073\"\n  }\n]\n```\n\nInvoke the plugin one more time to check for Fortanix DSM keys due for rotation:\n```\n{\n  \"operation\": \"list-keys\",\n  \"schedule\": 325\n}\n```\nIf pertinent keys are found, the output will be an array of groups of Security Object(s) as follows:\n```\n{\n  \"07f85883-adaf-4a6c-a040-ffed46dfd349\": {},\n  \"d7993e29-5a28-439a-9c26-b2d0c2a4960b\": [\n    {\n      \"meta\": {\n        \"ftnxreminder2\": \"20221013T220549Z\",\n        \"ftnxreminder2-incident\": \"INC0010073\",\n        \"foo-key\": \"bar-value\"\n      },\n      \"key\": \"tq-root-key\",\n      \"type\": \"RSA\",\n      \"notify\": 3,\n      \"created\": \"20211202T160910Z\"\n    }\n  ]\n}\n```\nNote: the `schedule` parameter is brought forward by reducing the time to 325 days. This simulates a time\nprogression of 40 days i.e. 365 - 325. The output contains `notify` value of 3, which means it is the last \nreminder into ServiceNow.\n\nInvoke the plugin one last time to notify ServiceNow:\n```\n{\n  \"operation\": \"notify-incidents\",\n  \"schedule\": 325\n}\n```\nNote: there will be another Incident created in ServiceNow and the Fortanix DSM key custom_metadata\nwill be updated accordingly:\n```\n{\n  \"07f85883-adaf-4a6c-a040-ffed46dfd349\": {},\n  \"d7993e29-5a28-439a-9c26-b2d0c2a4960b\": [\n    {\n      \"key\": \"tq-root-key\",\n      \"type\": \"RSA\",\n      \"created\": \"20211202T160910Z\",\n      \"meta\": {\n        \"ftnxreminder2\": \"20221013T220549Z\",\n        \"ftnxreminder2-incident\": \"INC0010073\",\n        \"ftnxreminder3\": \"20221013T221410Z\"\n        \"ftnxreminder3-incident\": \"INC0010074\",\n        \"foo-key\": \"bar-value\"\n      },\n      \"notify\": 3\n    }\n  ]\n}\n```\nNote: the `list-incidents` should reveal two records from ServiceNow corresponding to the 60 day (notify2), and\n30 day (notify3) reminders related to this Fortanix DSM key.\n```\n[\n  {\n    \"urgency\": \"2\"\n    \"short_description\": \"This is a reminder to rotate the following key: tq-root-key #ftnxreminder2\",\n    \"opened_at\": \"2022-10-13 22:05:48\",\n    \"number\": \"INC0010073\",\n  },\n  {\n    \"urgency\": \"3\",\n    \"short_description\": \"This is a reminder to rotate the following key: tq-root-key #ftnxreminder3\",\n    \"opened_at\": \"2022-10-13 22:14:10\"\n    \"number\": \"INC0010074\",\n  }\n]\n```\n\nAnd finally, by progressing the time even further we can validate there are no more keys that are due for rotation.\n\nInvoke the plugin with `list-keys` with:\n```\n{\n  \"operation\": \"list-keys\",\n  \"schedule\": 305,\n}\n```\nTo find the results as:\n```\n{\n  \"07f85883-adaf-4a6c-a040-ffed46dfd349\": {},\n  \"d7993e29-5a28-439a-9c26-b2d0c2a4960b\": {}\n}\n```\n\n\n\n## References\n\n * [Fortanix DSM key lifecycle documentation]https://support.fortanix.com/hc/en-us/articles/360038354592-User-s-Guide-Fortanix-Data-Security-Manager-Key-Lifecycle-Management\n * [ServiceNow Table API for CRUD operations on Incidents]https://docs.servicenow.com/bundle/tokyo-application-development/page/integrate/inbound-rest/concept/c_TableAPI.html\n * [ServiceNow documentation for retrieving Incidents]https://docs.servicenow.com/bundle/tokyo-application-development/page/integrate/inbound-rest/task/t_GetStartedRetrieveExisting.html\n * [ServiceNow reference for REST API]https://docs.servicenow.com/en-US/bundle/tokyo-application-development/page/build/applications/concept/api-rest.html\n * [ServiceNow reference for REST API]https://docs.servicenow.com/en-US/bundle/tokyo-application-development/page/build/applications/concept/api-rest.html",
                "short_description": "This plugin can be used to monitor key rotation schedule in Fortanix DSM and generate alerts using ServiceNow Incidents",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Fortanix DSM-Azure Bring Your Own Secrets (BYOS)",
        "versions": {
            "1.0": {
                "path": "byos-azure/plugin.lua",
                "description": "## Fortanix Data Security Manager (DSM) - Azure Key Vault Integration Plugin\r\n\r\n## Introduction\r\n\r\nThis README provides an overview of the Fortanix DSM - Azure Key Vault Integration Plugin, which facilitates secret management between Fortanix Data Security Manager (DSM) and Azure Key Vault (AKV). The plugin offers various operations to interact with secrets in both DSM and AKV.\r\n\r\n## Use Cases\r\n\r\nThis integration is designed to address the following use cases:\r\n\r\nCreate Secrets: This takes an existing secret from DSM and imports it into AKV\r\nImport Secrets: Import an existing secret from AKV into DSM for secure management.\r\nImport All Secrets: Import all secrets from AKV into DSM for comprehensive management.\r\nList Secrets: Retrieve a list of secrets stored in AKV.\r\nList Secret with Versions: Retrieve a list of versions for all secrets stored in AKV.\r\nDelete Secret: Delete a secret from AKV.\r\nList of Deleted Secrets: Provides list of deleted secrets from AKV.\r\nRecover Secret: Recover a previously deleted secret in AKV.\r\nPurge Secret: Permanently remove a deleted secret from AKV.\r\n\r\n\r\n## Short Description\r\nThis integration offers a set of functions to allow for secure secret management between DSM and AKV. It's capable of importing, listing, deleting, recovering, purging secrets, and more. The plugin employs authentication via Azure Active Directory and leverages the Azure Key Vault REST API to perform these operations.\r\n\r\n## Setup Process\r\n\r\nConfigure Azure Authentication:\r\n\r\nRun the configure operation with the following parameters:\r\ntenant_id: Your Azure AD Tenant ID.\r\nclient_id: Your Azure AD Client ID.\r\nclient_secret: Your Azure AD Client Secret.\r\n\r\n## Perform Operations:\r\n\r\nCall the desired operation by providing a JSON payload. Here's an example of how to call the import_secret function:\r\n\r\n// This will import an existing secret in AKV and import it into DSM\r\n{\r\n  \"operation\": \"import\",\r\n  \"name\": \"secret-name\",\r\n  \"version\": \"version\",\r\n  \"key_vault\": \"key_vault\",\r\n  \"secret_id\": \"secret-id\"\r\n}\r\n\r\nYou can replace \"operation\" with any of the supported operations (e.g., create, list_secrets, delete, import_all, etc.) and provide the required parameters.\r\n\r\nAPI Response: The plugin will return a JSON response indicating the success or failure of the operation.\r\n\r\nReplace \"name\", \"version\", \"key_vault\", and \"secret-id\" with your specific values. The plugin will then securely import the secret into DSM.\r\n\r\n## Supported Operations\r\nThe following operations are supported by this plugin:\r\n\r\nCreate Secrets: This takes an existing secret from DSM and imports it into AKV\r\nImport Secrets: Import an existing secret from AKV into DSM for secure management.\r\nImport All Secrets: Import all secrets from AKV into DSM for comprehensive management.\r\nList Secrets: Retrieve a list of secrets stored in AKV.\r\nList Secret with Versions: Retrieve a list of versions for all secrets stored in AKV.\r\nDelete Secret: Delete a secret from AKV.\r\nList of Deleted Secrets: Provides list of deleted secrets from AKV.\r\nRecover Secret: Recover a previously deleted secret in AKV.\r\nPurge Secret: Permanently remove a deleted secret from AKV.\r\n\r\n## Conclusion\r\nThe Fortanix DSM - Azure Key Vault Integration Plugin simplifies the management of secrets between Fortanix Data Security Manager and Azure Key Vault. It offers a range of operations to facilitate this integration securely. Follow the setup process and examples provided in this README to use the plugin effectively for your specific use cases.",
                "short_description": "This plugin implements the Bring your own Secret (BYOS) model for Azure Key Vault. Using this plugin you can manage your Secrets using Fortanix DSM.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "Fortanix DSM-AWS Bring Your Own Secrets (BYOS)",
        "versions": {
            "1.0": {
                "path": "byos-aws/plugin.lua",
                "description": "#AWS Plugin for Secret Management with Fortanix DSM\r\n\r\n#Introduction: \r\nThis page provides an overview of a newly developed AWS plugin that leverages Fortanix Data Security Manager (DSM) for secure secret management within your AWS environment.\r\n\r\n#Challenges of Managing Secrets in AWS:\r\n    Security Risks: Secrets are highly sensitive data and storing them unencrypted or in plaintext poses significant security vulnerabilities. Accidental exposure, breaches, and insider threats can have devastating consequences.\r\n    Manual Processes: Manually rotating, managing, and granting access to secrets is time-consuming, error-prone, and inefficient. This slows down workflows and increases the risk of human error.\r\n    Lack of Centralized Control: Secrets often spread across different services and accounts, making it difficult to track, audit, and enforce consistent security policies.\r\n    Compliance Complexity: Meeting compliance regulations requires stringent controls over secrets, which can be challenging with decentralized management.\r\n\r\nFeatures\r\n    Secure creation, rotation, and deletion of secrets\r\n    Access control and granular permission management\r\n    Integration with existing AWS services and IAM roles\r\n    Audit logging and compliance reporting\r\n    User-friendly interface for managing secrets\r\n\r\n\r\n\r\n##Plugin Operations Guide:\r\n\r\n--[[\r\n\r\nPlugin Operations Guide:\r\n\r\n1. Configure: Description: Sets up the plugin with necessary AWS credentials to enable communication with AWS services. These credentials are used for all operations that require AWS API calls, ensuring secure access to AWS Secrets Manager.\r\nOperation: configure. Please note these operations are for the region \r\n\r\nParameters:\r\n\r\nsecret_key: The secret access key part of your AWS credentials.\r\naccess_key: The access key ID part of your AWS credentials.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"configure\",\r\n  \"secret_key\": \"GZA....sz\",\r\n  \"access_key\": \"AK...ZCX\"\r\n}\r\n\r\n2. Create: Description: Creates a new secret within the local secret management system with the specified name and identifier. This operation is typically used to initialize a secret before importing its value from external sources or manually setting it.\r\n\r\nOperation: create\r\n\r\nParameters:\r\n\r\nname: The name to assign to the new secret.\r\nsecret_id: The identifier for the secret to be created.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"create\",\r\n  \"aws_secret_name\": \"nik12345678\",\r\n  \"secret_value\": \"123\",\r\n  \"secret_stages\": \"AWSCURRENT\",\r\n  \"secret_id\": \"55ec7250-ffd1-4db7-8e5d-2\"\r\n}\r\n\r\n\r\n3. List: Description: Lists the properties and current state of a secret managed by the local secret management system. This can include metadata such as creation date, last modified date, and version information.\r\n\r\nOperation: list\r\nParameters:\r\n\r\nsecret_id: The identifier for the secret whose details are to be listed.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"list\",\r\n  \"secret_id\": \"55ec7250-ffd1-4db7-8e5d-\"\r\n}\r\n\r\n\r\n4. List Versions: Description: Lists all versions of a specified secret, providing a history of changes and the ability to access previous values of the secret. This operation supports auditing and compliance by enabling tracking of secret updates over time.\r\n\r\nOperation: list_versions\r\n\r\nParameters:\r\nname: The name of the secret for which versions are to be listed.\r\nsecret_id: The identifier for the secret whose versions are to be listed.\r\n\r\nSample JSON:\r\n{\r\n  \"operation\": \"list_versions\",\r\n  \"name\": \"rotate1\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n\r\n5. Import from AWS: Description: Retrieves a specific version (or the latest) of a secret from AWS Secrets Manager and stores it locally, associating it with the provided secret_id. This operation ensures the secret is available within the local secret management system for use in applications or services.\r\n\r\nOperation: import_from_aws\r\n\r\nParameters:\r\n\r\naws_secret_name: The name of the secret in AWS Secrets Manager.\r\naws_secret_version: The version of the secret to import. If not specified, the latest version is imported.\r\nsecret_id: The identifier for the secret where the AWS secret will be stored.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"import_from_aws\",\r\n  \"aws_secret_name\": \"aws7\",\r\n  \"aws_secret_version\": \"6c3d9904-32f4-44f5-95ac-8f86e066e83b\",\r\n  \"aws_version_stage\": \"AWSCURRENT\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n6. Import All Secrets from AWS: Description: Retrieves all secrets from AWS Secrets Manager and stores it locally, associating it with the provided secret_id. This operation ensures the secret is available within the local secret management system for use in applications or services.\r\n\r\nOperation: import_all_secrets\r\n\r\nParameters:\r\n\r\nsecret_id: The identifier for the secret where the AWS secret will be stored.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"import_all_secrets\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n7. Rotate: Description: Initiates a rotation process for the specified secret, creating a new version of the secret with a new value. This is essential for maintaining security by regularly updating secret values.\r\n\r\nOperation: rotate\r\n\r\nParameters:\r\nname: The name of the secret to rotate.\r\nsecret_id: The identifier for the secret to be rotated.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"rotate\",\r\n  \"secret_name\": \"plg4\",\r\n  \"new_secret_value\": \"143\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n8. Delete: Description: Permanently removes a secret from the local secret management system. This operation is used to clean up secrets that are no longer needed, ensuring that outdated or sensitive information is securely managed and not left accessible.\r\n\r\nOperation: delete\r\nParameters:\r\n\r\nname: The name of the secret to be deleted.\r\nsecret_id: The identifier for the secret to be deleted.\r\n\r\nSample JSON: \r\n\r\n{\r\n  \"operation\": \"delete\",\r\n  \"name\": \"aws1\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n\r\n9. Restore: Description: Restores a previously deleted or archived secret back into the active state within the local secret management system. This operation makes the secret available for use again.\r\n\r\nOperation: restore\r\n\r\nParameters:\r\n\r\nname: The name of the secret to be restored.\r\nsecret_id: The identifier for the secret to be restored.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"restore\",\r\n  \"name\": \"aws1\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\n\r\n10. Export: Exports a secret from Fortanix DSM to AWS Secret Manager.\r\n\r\nOperation: Export\r\n\r\nParameters:\r\n\r\ndsm_secret_name\": the name of secret in dsm \r\naws_secret_name\": the of secret which has to be in AWS secret manager\r\naws_secret_version\": Version Id of aws secret \r\naws_version_stage\": \r\nsecret_id\": \r\n\r\n\r\nname: The name of the secret to be restored.\r\nsecret_id: The identifier for the secret to be restored.\r\n\r\nSample JSON:\r\n\r\n{\r\n  \"operation\": \"export\",\r\n  \"dsm_secret_name\": \"export21\",\r\n  \"aws_secret_name\": \"export21\",\r\n  \"aws_secret_version\": \"6c3d9904-32f4-44f5-95ac-8f86e066e83b\",\r\n  \"aws_version_stage\": \"AWSCURRENT\",\r\n  \"secret_id\": \"4ac0c969-5a82-4e5c-938a-\"\r\n}\r\n\r\nNote: If you require these operations to be executed in regions other than us-west-1, kindly modify the region in the following loc\u00a0and functions:\r\n -- function aws_request, loc - 209\r\n \r",
                "short_description": "This plugin implements the Bring your own Secret (BYOS) model for AWS KMS. Using this plugin you can manage your Secrets using Fortanix DSM.",
                "release_notes": [
                    "Initial Release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    },
    {
        "name": "TR31",
        "versions": {
            "1.0": {
                "path": "tr31/plugin.lua",
                "description": "# TR-31\n\nPlugin for wrapping/unwrapping TR-31 key blocks (ANSI X9.143-2021)\n\n## Introduction\n\nThis plugin allows to operate on TR-31 key blocks, also known as cryptograms.\nIt can create cryptograms, e.g., wrap a key already residing in Fortanix DSM\nwith given TR-31 properties. Additionally, this plugin can also open\ncryptograms, e.g., unwrap a cryptogram created elsewhere and import the\nunderlying key into Fortanix DSM.\n\n## Prerequisites\n\nIn order to operate, this plugin needs the Key Block Protection Key\n(henceforth \"KBPK\" - the unwrapping key) of type AES-256 already residing in\nFortanix DSM.\n\n## Create a cryptogram\n\nThis operation, labeled \"seal\", needs a target key and a composed header\nwith the following ANSI X9.143-2021 attributes:\n\n- Version: Table 1 of [ANSI]. Only value \"D\" is currently supported.\n- Key Usage: Table 2 of [ANSI]\n- Algorithm: Table 3 of [ANSI]\n- Mode of Use: Table 4 of [ANSI]\n- Key Version Number: Table 5 of [ANSI]\n- Exportability: Table 6 of [ANSI]\n- Key Context: Description in Table 1 of [ANSI]\n\nExample input:\n\n```\n{\n    \"operation\": \"seal\",\n    \"key_block_protection_key_id\": \"90850697-2d66-489f-84e8-38b987e4d48e\",\n    \"target_key_id\": \"10b09192-d036-44ab-ba95-d05bf34a57f4\",\n    \"header\": {\n        \"version\": \"D\",\n        \"key_usage\": \"P0\",\n        \"algorithm\": \"E\",\n        \"mode_of_use\": \"E\",\n        \"key_version_number\": \"00\",\n        \"exportability\": \"E\",\n        \"key_context\": \"0\"\n    }\n}\n```\n\n## Import a cryptogram\n\nThis operation takes a KBPK, a cryptogram, and a Sobject template. It opens\nthe cryptogram and imports the Sobject into DSM with the given template\nvalues.\n\nExample input:\n\n```\n{\n    \"operation\": \"open\",\n    \"key_block_protection_key_id\": \"90850697-2d66-489f-84e8-38b987e4d48e\",\n    \"cryptogram\": \"D0240P0EE00E0000A839F57FF82C76859B184F1EB1A3DB4E9931819F32EFF9241E9CDB5DF2C0E122ACA0AF299E36EF2BB9D373B6D04A791C584C882EF57A7C060E4E1881C76213269568D0E77F1EE459395FBE5111A86F8E03E17D4FF7E8CFC00FB4B140E382DE6FB5F2DAF791C889A015090B9F331A1DAB\",\n    \"sobject_template\": {\n        \"transient\": true\n    }\n}\n```\n\n## References\n\n[ANSI]: ANSI X9.143-2022 INTEROPERABLE SECURE KEY BLOCK SPECIFICATION\n\n### Release Notes\n\n- 1.0 Initial release",
                "short_description": "Plugin for wrapping/unwrapping TR-31 key blocks (ANSI X9.143-2021)",
                "release_notes": [
                    "Initial release"
                ],
                "commit": "78bdebf36812209442f6463ba74e419897dc9fa5"
            }
        }
    }
]